// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: event_queries.sql

package event_db

import (
	"context"
	"database/sql"
	"time"

	"api/internal/custom_types"
	"github.com/google/uuid"
)

const createEvent = `-- name: CreateEvent :exec
INSERT INTO events.events (program_start_at, program_end_at, event_start_time, event_end_time, day, location_id,
                           program_id, capacity)
VALUES ($1, $2, $3, $4, $5,
        $6, $7, $8)
`

type CreateEventParams struct {
	ProgramStartAt time.Time                     `json:"program_start_at"`
	ProgramEndAt   time.Time                     `json:"program_end_at"`
	EventStartTime custom_types.TimeWithTimeZone `json:"event_start_time"`
	EventEndTime   custom_types.TimeWithTimeZone `json:"event_end_time"`
	Day            DayEnum                       `json:"day"`
	LocationID     uuid.NullUUID                 `json:"location_id"`
	ProgramID      uuid.NullUUID                 `json:"program_id"`
	Capacity       sql.NullInt32                 `json:"capacity"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.ExecContext(ctx, createEvent,
		arg.ProgramStartAt,
		arg.ProgramEndAt,
		arg.EventStartTime,
		arg.EventEndTime,
		arg.Day,
		arg.LocationID,
		arg.ProgramID,
		arg.Capacity,
	)
	return err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE
FROM events.events
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, id)
	return err
}

const getEventById = `-- name: GetEventById :one
SELECT e.id, e.program_start_at, e.program_end_at, e.program_id, e.team_id, e.location_id, e.capacity, e.created_at, e.updated_at, e.day, e.event_start_time, e.event_end_time,
       p.name        as program_name,
       p.description as program_description,
       p."type"      as program_type,
       l.name        as location_name,
       l.address     as address
FROM events.events e
          LEFT JOIN program.programs p ON e.program_id = p.id
         LEFT JOIN location.locations l ON e.location_id = l.id
WHERE e.id = $1
`

type GetEventByIdRow struct {
	ID                 uuid.UUID                     `json:"id"`
	ProgramStartAt     time.Time                     `json:"program_start_at"`
	ProgramEndAt       time.Time                     `json:"program_end_at"`
	ProgramID          uuid.NullUUID                 `json:"program_id"`
	TeamID             uuid.NullUUID                 `json:"team_id"`
	LocationID         uuid.NullUUID                 `json:"location_id"`
	Capacity           sql.NullInt32                 `json:"capacity"`
	CreatedAt          time.Time                     `json:"created_at"`
	UpdatedAt          time.Time                     `json:"updated_at"`
	Day                DayEnum                       `json:"day"`
	EventStartTime     custom_types.TimeWithTimeZone `json:"event_start_time"`
	EventEndTime       custom_types.TimeWithTimeZone `json:"event_end_time"`
	ProgramName        sql.NullString                `json:"program_name"`
	ProgramDescription sql.NullString                `json:"program_description"`
	ProgramType        NullProgramProgramType        `json:"program_type"`
	LocationName       sql.NullString                `json:"location_name"`
	Address            sql.NullString                `json:"address"`
}

func (q *Queries) GetEventById(ctx context.Context, id uuid.UUID) (GetEventByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getEventById, id)
	var i GetEventByIdRow
	err := row.Scan(
		&i.ID,
		&i.ProgramStartAt,
		&i.ProgramEndAt,
		&i.ProgramID,
		&i.TeamID,
		&i.LocationID,
		&i.Capacity,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Day,
		&i.EventStartTime,
		&i.EventEndTime,
		&i.ProgramName,
		&i.ProgramDescription,
		&i.ProgramType,
		&i.LocationName,
		&i.Address,
	)
	return i, err
}

const getEvents = `-- name: GetEvents :many
SELECT e.id, e.program_start_at, e.program_end_at, e.program_id, e.team_id, e.location_id, e.capacity, e.created_at, e.updated_at, e.day, e.event_start_time, e.event_end_time,
       p.name        as program_name,
       p.description as program_description,
       p."type"      as program_type,
       l.name        as location_name,
       l.address     as address
FROM events.events e
         LEFT JOIN program.programs p ON e.program_id = p.id
         LEFT JOIN location.locations l ON e.location_id = l.id
WHERE ($1 = program_id OR $1 IS NULL)
  AND ($2 = location_id OR $2 IS NULL)
  AND ($3 >= e.program_start_at OR $3 IS NULL) -- within boundary
  AND ($4 <= e.program_end_at OR $4 IS NULL)
`

type GetEventsParams struct {
	ProgramID  uuid.NullUUID `json:"program_id"`
	LocationID uuid.NullUUID `json:"location_id"`
	Before     sql.NullTime  `json:"before"`
	After      sql.NullTime  `json:"after"`
}

type GetEventsRow struct {
	ID                 uuid.UUID                     `json:"id"`
	ProgramStartAt     time.Time                     `json:"program_start_at"`
	ProgramEndAt       time.Time                     `json:"program_end_at"`
	ProgramID          uuid.NullUUID                 `json:"program_id"`
	TeamID             uuid.NullUUID                 `json:"team_id"`
	LocationID         uuid.NullUUID                 `json:"location_id"`
	Capacity           sql.NullInt32                 `json:"capacity"`
	CreatedAt          time.Time                     `json:"created_at"`
	UpdatedAt          time.Time                     `json:"updated_at"`
	Day                DayEnum                       `json:"day"`
	EventStartTime     custom_types.TimeWithTimeZone `json:"event_start_time"`
	EventEndTime       custom_types.TimeWithTimeZone `json:"event_end_time"`
	ProgramName        sql.NullString                `json:"program_name"`
	ProgramDescription sql.NullString                `json:"program_description"`
	ProgramType        NullProgramProgramType        `json:"program_type"`
	LocationName       sql.NullString                `json:"location_name"`
	Address            sql.NullString                `json:"address"`
}

func (q *Queries) GetEvents(ctx context.Context, arg GetEventsParams) ([]GetEventsRow, error) {
	rows, err := q.db.QueryContext(ctx, getEvents,
		arg.ProgramID,
		arg.LocationID,
		arg.Before,
		arg.After,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventsRow
	for rows.Next() {
		var i GetEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.ProgramStartAt,
			&i.ProgramEndAt,
			&i.ProgramID,
			&i.TeamID,
			&i.LocationID,
			&i.Capacity,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Day,
			&i.EventStartTime,
			&i.EventEndTime,
			&i.ProgramName,
			&i.ProgramDescription,
			&i.ProgramType,
			&i.LocationName,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :exec
UPDATE events.events
SET program_start_at   = $1,
    program_end_at     = $2,
    location_id    = $3,
    program_id    = $4,
    event_start_time = $5,
    event_end_time   = $6,
    day                = $7,
    capacity = $8,
    updated_at     = current_timestamp
WHERE id = $9
`

type UpdateEventParams struct {
	ProgramStartAt time.Time                     `json:"program_start_at"`
	ProgramEndAt   time.Time                     `json:"program_end_at"`
	LocationID     uuid.NullUUID                 `json:"location_id"`
	ProgramID      uuid.NullUUID                 `json:"program_id"`
	EventStartTime custom_types.TimeWithTimeZone `json:"event_start_time"`
	EventEndTime   custom_types.TimeWithTimeZone `json:"event_end_time"`
	Day            DayEnum                       `json:"day"`
	Capacity       sql.NullInt32                 `json:"capacity"`
	ID             uuid.UUID                     `json:"id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) error {
	_, err := q.db.ExecContext(ctx, updateEvent,
		arg.ProgramStartAt,
		arg.ProgramEndAt,
		arg.LocationID,
		arg.ProgramID,
		arg.EventStartTime,
		arg.EventEndTime,
		arg.Day,
		arg.Capacity,
		arg.ID,
	)
	return err
}
