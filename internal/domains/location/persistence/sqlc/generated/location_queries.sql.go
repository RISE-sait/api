// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: location_queries.sql

package db_location

import (
	"context"

	"github.com/google/uuid"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO location.locations (name, address)
    VALUES ($1, $2)
    RETURNING id, name, address
`

type CreateLocationParams struct {
	Name    string `json:"name"`
	Address string `json:"address"`
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (LocationLocation, error) {
	row := q.db.QueryRowContext(ctx, createLocation, arg.Name, arg.Address)
	var i LocationLocation
	err := row.Scan(&i.ID, &i.Name, &i.Address)
	return i, err
}

const deleteLocation = `-- name: DeleteLocation :execrows
DELETE FROM location.locations WHERE id = $1
`

func (q *Queries) DeleteLocation(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteLocation, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getLocationById = `-- name: GetLocationById :one
SELECT id, name, address from location.locations WHERE id = $1
`

func (q *Queries) GetLocationById(ctx context.Context, id uuid.UUID) (LocationLocation, error) {
	row := q.db.QueryRowContext(ctx, getLocationById, id)
	var i LocationLocation
	err := row.Scan(&i.ID, &i.Name, &i.Address)
	return i, err
}

const getLocations = `-- name: GetLocations :many
SELECT id, name, address from location.locations
`

func (q *Queries) GetLocations(ctx context.Context) ([]LocationLocation, error) {
	rows, err := q.db.QueryContext(ctx, getLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LocationLocation
	for rows.Next() {
		var i LocationLocation
		if err := rows.Scan(&i.ID, &i.Name, &i.Address); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLocation = `-- name: UpdateLocation :execrows
UPDATE location.locations
    SET name = $1, address = $2
    WHERE id = $3
`

type UpdateLocationParams struct {
	Name    string    `json:"name"`
	Address string    `json:"address"`
	ID      uuid.UUID `json:"id"`
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateLocation, arg.Name, arg.Address, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
