// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_queries.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users.users (hubspot_id) VALUES ($1)
RETURNING id, hubspot_id, profile_pic_url, wins, losses, points, steals, assists, rebounds, created_at, updated_at
`

func (q *Queries) CreateUser(ctx context.Context, hubspotID sql.NullString) (UsersUser, error) {
	row := q.db.QueryRowContext(ctx, createUser, hubspotID)
	var i UsersUser
	err := row.Scan(
		&i.ID,
		&i.HubspotID,
		&i.ProfilePicUrl,
		&i.Wins,
		&i.Losses,
		&i.Points,
		&i.Steals,
		&i.Assists,
		&i.Rebounds,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByHubSpotId = `-- name: GetUserByHubSpotId :one
SELECT id, hubspot_id, profile_pic_url, wins, losses, points, steals, assists, rebounds, created_at, updated_at FROM users.users WHERE hubspot_id = $1 LIMIT 1
`

func (q *Queries) GetUserByHubSpotId(ctx context.Context, hubspotID sql.NullString) (UsersUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByHubSpotId, hubspotID)
	var i UsersUser
	err := row.Scan(
		&i.ID,
		&i.HubspotID,
		&i.ProfilePicUrl,
		&i.Wins,
		&i.Losses,
		&i.Points,
		&i.Steals,
		&i.Assists,
		&i.Rebounds,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserHubspotId = `-- name: UpdateUserHubspotId :execrows
UPDATE users.users
SET hubspot_id = $1
WHERE id = $2
`

type UpdateUserHubspotIdParams struct {
	HubspotID sql.NullString `json:"hubspot_id"`
	ID        uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateUserHubspotId(ctx context.Context, arg UpdateUserHubspotIdParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateUserHubspotId, arg.HubspotID, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
