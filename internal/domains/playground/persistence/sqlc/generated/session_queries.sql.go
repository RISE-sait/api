// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: session_queries.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
WITH inserted AS (
    INSERT INTO playground.sessions (system_id, customer_id, start_time, end_time)
    VALUES ($1, $2, $3, $4)
    RETURNING id, system_id, customer_id, start_time, end_time, created_at, updated_at
)
SELECT i.id,
       i.system_id,
       sys.name  AS system_name,
       i.customer_id,
       u.first_name AS customer_first_name,
       u.last_name  AS customer_last_name,
       i.start_time,
       i.end_time,
       i.created_at,
       i.updated_at
FROM inserted i
         JOIN playground.systems sys ON sys.id = i.system_id
         JOIN users.users u ON u.id = i.customer_id
`

type CreateSessionParams struct {
	SystemID   uuid.UUID `json:"system_id"`
	CustomerID uuid.UUID `json:"customer_id"`
	StartTime  time.Time `json:"start_time"`
	EndTime    time.Time `json:"end_time"`
}

type CreateSessionRow struct {
	ID                uuid.UUID `json:"id"`
	SystemID          uuid.UUID `json:"system_id"`
	SystemName        string    `json:"system_name"`
	CustomerID        uuid.UUID `json:"customer_id"`
	CustomerFirstName string    `json:"customer_first_name"`
	CustomerLastName  string    `json:"customer_last_name"`
	StartTime         time.Time `json:"start_time"`
	EndTime           time.Time `json:"end_time"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (CreateSessionRow, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.SystemID,
		arg.CustomerID,
		arg.StartTime,
		arg.EndTime,
	)
	var i CreateSessionRow
	err := row.Scan(
		&i.ID,
		&i.SystemID,
		&i.SystemName,
		&i.CustomerID,
		&i.CustomerFirstName,
		&i.CustomerLastName,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :execrows
DELETE FROM playground.sessions WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteSession, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getSession = `-- name: GetSession :one
SELECT s.id,
       s.system_id,
       sys.name  AS system_name,
       s.customer_id,
       u.first_name AS customer_first_name,
       u.last_name  AS customer_last_name,
       s.start_time,
       s.end_time,
       s.created_at,
       s.updated_at
FROM playground.sessions s
         JOIN playground.systems sys ON sys.id = s.system_id
         JOIN users.users u ON u.id = s.customer_id
WHERE s.id = $1
`

type GetSessionRow struct {
	ID                uuid.UUID `json:"id"`
	SystemID          uuid.UUID `json:"system_id"`
	SystemName        string    `json:"system_name"`
	CustomerID        uuid.UUID `json:"customer_id"`
	CustomerFirstName string    `json:"customer_first_name"`
	CustomerLastName  string    `json:"customer_last_name"`
	StartTime         time.Time `json:"start_time"`
	EndTime           time.Time `json:"end_time"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (GetSessionRow, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i GetSessionRow
	err := row.Scan(
		&i.ID,
		&i.SystemID,
		&i.SystemName,
		&i.CustomerID,
		&i.CustomerFirstName,
		&i.CustomerLastName,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSessions = `-- name: GetSessions :many
SELECT s.id,
       s.system_id,
       sys.name  AS system_name,
       s.customer_id,
       u.first_name AS customer_first_name,
       u.last_name  AS customer_last_name,
       s.start_time,
       s.end_time,
       s.created_at,
       s.updated_at
FROM playground.sessions s
         JOIN playground.systems sys ON sys.id = s.system_id
         JOIN users.users u ON u.id = s.customer_id
ORDER BY s.start_time
`

type GetSessionsRow struct {
	ID                uuid.UUID `json:"id"`
	SystemID          uuid.UUID `json:"system_id"`
	SystemName        string    `json:"system_name"`
	CustomerID        uuid.UUID `json:"customer_id"`
	CustomerFirstName string    `json:"customer_first_name"`
	CustomerLastName  string    `json:"customer_last_name"`
	StartTime         time.Time `json:"start_time"`
	EndTime           time.Time `json:"end_time"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) GetSessions(ctx context.Context) ([]GetSessionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getSessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSessionsRow
	for rows.Next() {
		var i GetSessionsRow
		if err := rows.Scan(
			&i.ID,
			&i.SystemID,
			&i.SystemName,
			&i.CustomerID,
			&i.CustomerFirstName,
			&i.CustomerLastName,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
