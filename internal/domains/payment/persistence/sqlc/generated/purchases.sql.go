// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: purchases.sql

package db_payment

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCustomerMembershipPlan = `-- name: CreateCustomerMembershipPlan :exec
INSERT INTO users.customer_membership_plans (customer_id, membership_plan_id, status, start_date, renewal_date)
VALUES ($1, $2, $3, $4, $5)
`

type CreateCustomerMembershipPlanParams struct {
	CustomerID       uuid.UUID                  `json:"customer_id"`
	MembershipPlanID uuid.UUID                  `json:"membership_plan_id"`
	Status           MembershipMembershipStatus `json:"status"`
	StartDate        time.Time                  `json:"start_date"`
	RenewalDate      sql.NullTime               `json:"renewal_date"`
}

func (q *Queries) CreateCustomerMembershipPlan(ctx context.Context, arg CreateCustomerMembershipPlanParams) error {
	_, err := q.db.ExecContext(ctx, createCustomerMembershipPlan,
		arg.CustomerID,
		arg.MembershipPlanID,
		arg.Status,
		arg.StartDate,
		arg.RenewalDate,
	)
	return err
}

const getMembershipPlanJoiningRequirements = `-- name: GetMembershipPlanJoiningRequirements :one
SELECT id, name, stripe_price_id, stripe_joining_fee_id, membership_id, amt_periods, created_at, updated_at
FROM membership.membership_plans
WHERE id = $1
`

func (q *Queries) GetMembershipPlanJoiningRequirements(ctx context.Context, id uuid.UUID) (MembershipMembershipPlan, error) {
	row := q.db.QueryRowContext(ctx, getMembershipPlanJoiningRequirements, id)
	var i MembershipMembershipPlan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StripePriceID,
		&i.StripeJoiningFeeID,
		&i.MembershipID,
		&i.AmtPeriods,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProgram = `-- name: GetProgram :one
SELECT id, name
FROM program.programs
WHERE id = $1
`

type GetProgramRow struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) GetProgram(ctx context.Context, id uuid.UUID) (GetProgramRow, error) {
	row := q.db.QueryRowContext(ctx, getProgram, id)
	var i GetProgramRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getProgramRegistrationPriceIDForCustomer = `-- name: GetProgramRegistrationPriceIDForCustomer :one
SELECT pm.stripe_program_price_id
FROM program.program_membership pm
WHERE pm.membership_id = (SELECT mp.membership_id
                          FROM users.customer_membership_plans cmp
                                   LEFT JOIN membership.membership_plans mp ON mp.id = cmp.membership_plan_id
                                   LEFT JOIN membership.memberships m ON m.id = mp.membership_id
                          WHERE customer_id = $1
                            AND status = 'active'
                          ORDER BY cmp.start_date DESC
                          LIMIT 1)
    AND pm.program_id = $2
`

type GetProgramRegistrationPriceIDForCustomerParams struct {
	CustomerID uuid.UUID `json:"customer_id"`
	ProgramID  uuid.UUID `json:"program_id"`
}

func (q *Queries) GetProgramRegistrationPriceIDForCustomer(ctx context.Context, arg GetProgramRegistrationPriceIDForCustomerParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getProgramRegistrationPriceIDForCustomer, arg.CustomerID, arg.ProgramID)
	var stripe_program_price_id string
	err := row.Scan(&stripe_program_price_id)
	return stripe_program_price_id, err
}

const isCustomerExist = `-- name: IsCustomerExist :one
SELECT EXISTS(SELECT 1 FROM users.users WHERE id = $1)
`

func (q *Queries) IsCustomerExist(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, isCustomerExist, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
