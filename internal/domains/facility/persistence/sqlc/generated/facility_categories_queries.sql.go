// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: facility_categories_queries.sql

package facility_db

import (
	"context"

	"github.com/google/uuid"
)

const createFacilityCategory = `-- name: CreateFacilityCategory :one
INSERT INTO facility.facility_categories (name) VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateFacilityCategory(ctx context.Context, name string) (FacilityFacilityCategory, error) {
	row := q.db.QueryRowContext(ctx, createFacilityCategory, name)
	var i FacilityFacilityCategory
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteFacilityCategory = `-- name: DeleteFacilityCategory :execrows
DELETE FROM facility.facility_categories WHERE id = $1
`

func (q *Queries) DeleteFacilityCategory(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteFacilityCategory, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getFacilityCategories = `-- name: GetFacilityCategories :many
SELECT id, name from facility.facility_categories
`

func (q *Queries) GetFacilityCategories(ctx context.Context) ([]FacilityFacilityCategory, error) {
	rows, err := q.db.QueryContext(ctx, getFacilityCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FacilityFacilityCategory
	for rows.Next() {
		var i FacilityFacilityCategory
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFacilityCategoryById = `-- name: GetFacilityCategoryById :one
SELECT name FROM facility.facility_categories WHERE id = $1
`

func (q *Queries) GetFacilityCategoryById(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getFacilityCategoryById, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const updateFacilityCategory = `-- name: UpdateFacilityCategory :one
UPDATE facility.facility_categories
SET name = $1
WHERE id = $2
RETURNING id, name
`

type UpdateFacilityCategoryParams struct {
	Name string
	ID   uuid.UUID
}

func (q *Queries) UpdateFacilityCategory(ctx context.Context, arg UpdateFacilityCategoryParams) (FacilityFacilityCategory, error) {
	row := q.db.QueryRowContext(ctx, updateFacilityCategory, arg.Name, arg.ID)
	var i FacilityFacilityCategory
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
