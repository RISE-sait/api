// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: staff_queries.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createStaff = `-- name: CreateStaff :execrows
INSERT INTO users.staff (id, role_id, is_active) VALUES ($1,
(SELECT id from users.staff_roles where role_name = $2), $3)
`

type CreateStaffParams struct {
	ID       uuid.UUID `json:"id"`
	RoleName string    `json:"role_name"`
	IsActive bool      `json:"is_active"`
}

func (q *Queries) CreateStaff(ctx context.Context, arg CreateStaffParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createStaff, arg.ID, arg.RoleName, arg.IsActive)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getStaffById = `-- name: GetStaffById :one
SELECT s.id, s.is_active, s.created_at, s.updated_at, s.role_id, sr.role_name, u.hubspot_id FROM users.staff s
JOIN users.users u ON s.id = u.id
JOIN users.staff_roles sr ON s.role_id = sr.id
WHERE u.id = $1
`

type GetStaffByIdRow struct {
	ID        uuid.UUID `json:"id"`
	IsActive  bool      `json:"is_active"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	RoleID    uuid.UUID `json:"role_id"`
	RoleName  string    `json:"role_name"`
	HubspotID string    `json:"hubspot_id"`
}

func (q *Queries) GetStaffById(ctx context.Context, id uuid.UUID) (GetStaffByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getStaffById, id)
	var i GetStaffByIdRow
	err := row.Scan(
		&i.ID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoleID,
		&i.RoleName,
		&i.HubspotID,
	)
	return i, err
}

const getStaffRoles = `-- name: GetStaffRoles :many
SELECT id, role_name FROM users.staff_roles
`

func (q *Queries) GetStaffRoles(ctx context.Context) ([]UsersStaffRole, error) {
	rows, err := q.db.QueryContext(ctx, getStaffRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersStaffRole
	for rows.Next() {
		var i UsersStaffRole
		if err := rows.Scan(&i.ID, &i.RoleName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
