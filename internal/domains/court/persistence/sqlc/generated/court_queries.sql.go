// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: court_queries.sql

package db_court

import (
	"context"

	"github.com/google/uuid"
)

const createCourt = `-- name: CreateCourt :one
INSERT INTO location.courts (location_id, name)
VALUES ($1, $2)
RETURNING id, location_id, name
`

type CreateCourtParams struct {
	LocationID uuid.UUID `json:"location_id"`
	Name       string    `json:"name"`
}

type CreateCourtRow struct {
	ID         uuid.UUID `json:"id"`
	LocationID uuid.UUID `json:"location_id"`
	Name       string    `json:"name"`
}

func (q *Queries) CreateCourt(ctx context.Context, arg CreateCourtParams) (CreateCourtRow, error) {
	row := q.db.QueryRowContext(ctx, createCourt, arg.LocationID, arg.Name)
	var i CreateCourtRow
	err := row.Scan(&i.ID, &i.LocationID, &i.Name)
	return i, err
}

const deleteCourt = `-- name: DeleteCourt :execrows
DELETE FROM location.courts
WHERE id = $1
`

func (q *Queries) DeleteCourt(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteCourt, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getCourtById = `-- name: GetCourtById :one
SELECT id, location_id, name
FROM location.courts
WHERE id = $1
`

type GetCourtByIdRow struct {
	ID         uuid.UUID `json:"id"`
	LocationID uuid.UUID `json:"location_id"`
	Name       string    `json:"name"`
}

func (q *Queries) GetCourtById(ctx context.Context, id uuid.UUID) (GetCourtByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getCourtById, id)
	var i GetCourtByIdRow
	err := row.Scan(&i.ID, &i.LocationID, &i.Name)
	return i, err
}

const getCourts = `-- name: GetCourts :many
SELECT id, location_id, name
FROM location.courts
`

type GetCourtsRow struct {
	ID         uuid.UUID `json:"id"`
	LocationID uuid.UUID `json:"location_id"`
	Name       string    `json:"name"`
}

func (q *Queries) GetCourts(ctx context.Context) ([]GetCourtsRow, error) {
	rows, err := q.db.QueryContext(ctx, getCourts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCourtsRow
	for rows.Next() {
		var i GetCourtsRow
		if err := rows.Scan(&i.ID, &i.LocationID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourt = `-- name: UpdateCourt :execrows
UPDATE location.courts
SET location_id = $1,
    name = $2
WHERE id = $3
`

type UpdateCourtParams struct {
	LocationID uuid.UUID `json:"location_id"`
	Name       string    `json:"name"`
	ID         uuid.UUID `json:"id"`
}

func (q *Queries) UpdateCourt(ctx context.Context, arg UpdateCourtParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateCourt, arg.LocationID, arg.Name, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
