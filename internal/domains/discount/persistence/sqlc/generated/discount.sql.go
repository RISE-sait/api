// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: discount.sql

package db_discount

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createDiscount = `-- name: CreateDiscount :one
INSERT INTO discounts (
    name, description, discount_percent, is_use_unlimited, use_per_client, is_active, valid_from, valid_to
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, name, description, discount_percent, is_use_unlimited, use_per_client, is_active, valid_from, valid_to, created_at, updated_at
`

type CreateDiscountParams struct {
	Name            string         `json:"name"`
	Description     sql.NullString `json:"description"`
	DiscountPercent int32          `json:"discount_percent"`
	IsUseUnlimited  bool           `json:"is_use_unlimited"`
	UsePerClient    sql.NullInt32  `json:"use_per_client"`
	IsActive        bool           `json:"is_active"`
	ValidFrom       time.Time      `json:"valid_from"`
	ValidTo         sql.NullTime   `json:"valid_to"`
}

func (q *Queries) CreateDiscount(ctx context.Context, arg CreateDiscountParams) (Discount, error) {
	row := q.db.QueryRowContext(ctx, createDiscount,
		arg.Name,
		arg.Description,
		arg.DiscountPercent,
		arg.IsUseUnlimited,
		arg.UsePerClient,
		arg.IsActive,
		arg.ValidFrom,
		arg.ValidTo,
	)
	var i Discount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DiscountPercent,
		&i.IsUseUnlimited,
		&i.UsePerClient,
		&i.IsActive,
		&i.ValidFrom,
		&i.ValidTo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDiscount = `-- name: DeleteDiscount :execrows
DELETE FROM discounts WHERE id = $1
`

func (q *Queries) DeleteDiscount(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteDiscount, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getDiscountById = `-- name: GetDiscountById :one
SELECT id, name, description, discount_percent, is_use_unlimited, use_per_client, is_active, valid_from, valid_to, created_at, updated_at FROM discounts WHERE id = $1
`

func (q *Queries) GetDiscountById(ctx context.Context, id uuid.UUID) (Discount, error) {
	row := q.db.QueryRowContext(ctx, getDiscountById, id)
	var i Discount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DiscountPercent,
		&i.IsUseUnlimited,
		&i.UsePerClient,
		&i.IsActive,
		&i.ValidFrom,
		&i.ValidTo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDiscountByNameActive = `-- name: GetDiscountByNameActive :one
SELECT id, name, description, discount_percent, is_use_unlimited, use_per_client, is_active, valid_from, valid_to, created_at, updated_at FROM discounts
WHERE name = $1
  AND is_active = true
  AND valid_from <= now()
  AND (valid_to IS NULL OR valid_to >= now())
`

func (q *Queries) GetDiscountByNameActive(ctx context.Context, name string) (Discount, error) {
	row := q.db.QueryRowContext(ctx, getDiscountByNameActive, name)
	var i Discount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DiscountPercent,
		&i.IsUseUnlimited,
		&i.UsePerClient,
		&i.IsActive,
		&i.ValidFrom,
		&i.ValidTo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRestrictedPlans = `-- name: GetRestrictedPlans :many
SELECT membership_plan_id FROM membership.discount_restricted_membership_plans
WHERE discount_id = $1
`

func (q *Queries) GetRestrictedPlans(ctx context.Context, discountID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getRestrictedPlans, discountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var membership_plan_id uuid.UUID
		if err := rows.Scan(&membership_plan_id); err != nil {
			return nil, err
		}
		items = append(items, membership_plan_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsageCount = `-- name: GetUsageCount :one
SELECT usage_count FROM users.customer_discount_usage WHERE customer_id = $1 AND discount_id = $2
`

type GetUsageCountParams struct {
	CustomerID uuid.UUID `json:"customer_id"`
	DiscountID uuid.UUID `json:"discount_id"`
}

func (q *Queries) GetUsageCount(ctx context.Context, arg GetUsageCountParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, getUsageCount, arg.CustomerID, arg.DiscountID)
	var usage_count int32
	err := row.Scan(&usage_count)
	return usage_count, err
}

const incrementUsage = `-- name: IncrementUsage :execrows
INSERT INTO users.customer_discount_usage (customer_id, discount_id)
VALUES ($1, $2)
ON CONFLICT (customer_id, discount_id) DO UPDATE
SET usage_count = users.customer_discount_usage.usage_count + 1,
    last_used_at = CURRENT_TIMESTAMP
`

type IncrementUsageParams struct {
	CustomerID uuid.UUID `json:"customer_id"`
	DiscountID uuid.UUID `json:"discount_id"`
}

func (q *Queries) IncrementUsage(ctx context.Context, arg IncrementUsageParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, incrementUsage, arg.CustomerID, arg.DiscountID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const listDiscounts = `-- name: ListDiscounts :many
SELECT id, name, description, discount_percent, is_use_unlimited, use_per_client, is_active, valid_from, valid_to, created_at, updated_at FROM discounts ORDER BY created_at DESC
`

func (q *Queries) ListDiscounts(ctx context.Context) ([]Discount, error) {
	rows, err := q.db.QueryContext(ctx, listDiscounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Discount
	for rows.Next() {
		var i Discount
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.DiscountPercent,
			&i.IsUseUnlimited,
			&i.UsePerClient,
			&i.IsActive,
			&i.ValidFrom,
			&i.ValidTo,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDiscount = `-- name: UpdateDiscount :one
UPDATE discounts
SET name = $1,
    description = $2,
    discount_percent = $3,
    is_use_unlimited = $4,
    use_per_client = $5,
    is_active = $6,
    valid_from = $7,
    valid_to = $8,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $9
RETURNING id, name, description, discount_percent, is_use_unlimited, use_per_client, is_active, valid_from, valid_to, created_at, updated_at
`

type UpdateDiscountParams struct {
	Name            string         `json:"name"`
	Description     sql.NullString `json:"description"`
	DiscountPercent int32          `json:"discount_percent"`
	IsUseUnlimited  bool           `json:"is_use_unlimited"`
	UsePerClient    sql.NullInt32  `json:"use_per_client"`
	IsActive        bool           `json:"is_active"`
	ValidFrom       time.Time      `json:"valid_from"`
	ValidTo         sql.NullTime   `json:"valid_to"`
	ID              uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateDiscount(ctx context.Context, arg UpdateDiscountParams) (Discount, error) {
	row := q.db.QueryRowContext(ctx, updateDiscount,
		arg.Name,
		arg.Description,
		arg.DiscountPercent,
		arg.IsUseUnlimited,
		arg.UsePerClient,
		arg.IsActive,
		arg.ValidFrom,
		arg.ValidTo,
		arg.ID,
	)
	var i Discount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DiscountPercent,
		&i.IsUseUnlimited,
		&i.UsePerClient,
		&i.IsActive,
		&i.ValidFrom,
		&i.ValidTo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
