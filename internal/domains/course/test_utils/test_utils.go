package course

import (
	"api/internal/di"
	db "api/internal/domains/course/persistence/sqlc/generated"

	persistence "api/internal/domains/course/persistence"

	"context"
	"database/sql"
	"fmt"
	"os"
	"testing"
	"time"

	"github.com/stretchr/testify/require"
	"github.com/testcontainers/testcontainers-go"
	"github.com/testcontainers/testcontainers-go/wait"
)

var dbInstance *sql.DB

func SetupTestDB(t *testing.T) (*db.Queries, func()) {
	ctx := context.Background()

	// Start a PostgreSQL container
	req := testcontainers.ContainerRequest{
		Image:        "postgres:13",
		ExposedPorts: []string{"5432/tcp"},
		Env: map[string]string{
			"POSTGRES_USER":     "postgres",
			"POSTGRES_PASSWORD": "root",
			"POSTGRES_DB":       "testdb",
		},
		WaitingFor: wait.ForListeningPort("5432/tcp").WithStartupTimeout(30 * time.Second),
	}

	_ = os.Setenv("TESTCONTAINERS_DEBUG", "true")

	// Create the container
	postgresC, err := testcontainers.GenericContainer(ctx, testcontainers.GenericContainerRequest{
		ContainerRequest: req,
		Started:          true,
	})
	require.NoError(t, err)

	host, err := postgresC.Host(ctx)
	require.NoError(t, err)

	port, err := postgresC.MappedPort(ctx, "5432")
	require.NoError(t, err)

	dsn := fmt.Sprintf("postgresql://postgres:root@%s:%s/testdb?sslmode=disable", host, port.Port())

	// Open DB connection
	sqlDb, err := sql.Open("postgres", dsn)
	require.NoError(t, err)

	dbInstance = sqlDb

	require.NoError(t, sqlDb.Ping())

	// Migration query to set up the table
	migrationSQL := `
	CREATE TABLE IF NOT EXISTS courses (
	    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
	    name VARCHAR(50) NOT NULL UNIQUE, 
	    description TEXT,
	    capacity INT NOT NULL,
	    start_date TIMESTAMP WITH TIME ZONE NOT NULL,
	    end_date TIMESTAMP WITH TIME ZONE NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	    CONSTRAINT end_after_start CHECK (end_date > start_date)
	);`

	_, err = sqlDb.Exec(migrationSQL)
	require.NoError(t, err)

	queries := db.New(sqlDb)

	// Return cleanup function to stop and remove the container after tests
	cleanup := func() {
		_, err := dbInstance.Exec("DELETE FROM courses")
		require.NoError(t, err)
	}

	return queries, cleanup
}

func SetupTestRepository(t *testing.T) (*persistence.CourseRepository, func()) {
	queries, cleanupDB := SetupTestDB(t)

	// Simulate your container setup here
	container := &di.Container{
		Queries: &di.QueriesType{
			CoursesDb: queries, // Use the actual queries generated by sqlc
		},
	}
	repo := persistence.NewCourseRepository(container)

	// Return cleanup function that handles both DB cleanup and repository cleanup
	cleanup := func() {
		cleanupDB() // Cleanup DB state
		// Add additional repository cleanup logic if necessary
	}

	return repo, cleanup
}
