{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/auth": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Firebase token for user verification",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User authenticated successfully",
                        "schema": {
                            "$ref": "#/definitions/identity.UserAuthenticationResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid Firebase token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/child/{id}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Authenticates a user using Firebase token and returns a JWT token for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Authenticate a user and return a JWT token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Child ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User authenticated successfully",
                        "schema": {
                            "$ref": "#/definitions/identity.UserAuthenticationResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid Firebase token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/barbers/services": {
            "get": {
                "description": "Retrieve a list of all barber services",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "barber"
                ],
                "summary": "Get all barber services",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/haircut.BarberServiceResponseDto"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new barber service with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "barber"
                ],
                "summary": "Create a new barber service",
                "parameters": [
                    {
                        "description": "Create Barber Service Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/haircut.CreateBarberServiceRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/barbers/services/{id}": {
            "delete": {
                "description": "Delete a barber service by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "barber"
                ],
                "summary": "Delete a barber service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Barber Service ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Updated successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/checkout/membership_plans/{id}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Generates a payment link for purchasing a membership plan.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "CheckoutMembershipPlan a membership plan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Membership plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment link generated successfully",
                        "schema": {
                            "$ref": "#/definitions/payment.CheckoutResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to process checkout",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/checkout/programs/{id}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Program ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment link generated successfully",
                        "schema": {
                            "$ref": "#/definitions/payment.CheckoutResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to process checkout",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/customers": {
            "get": {
                "description": "Retrieves a list of customers, optionally filtered by HubSpot IDs, with pagination support.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Get customers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of customers to retrieve (default: 20)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of customers to skip (default: 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Parent ID to filter customers (example: 123e4567-e89b-12d3-a456-426614174000)",
                        "name": "parent_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of customers",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/customer.Response"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid parameters"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/customers/email/{email}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer Email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The customer",
                        "schema": {
                            "$ref": "#/definitions/customer.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid parameters"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/customers/id/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The customer",
                        "schema": {
                            "$ref": "#/definitions/customer.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid parameters"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/customers/{customer_id}/athlete": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Customer stats update data",
                        "name": "update_body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/customer.StatsUpdateRequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Customer stats updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "description": "Retrieve all events within a specific date range, with optional filters by course, location, game, and practice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Choose between 'date' and 'day'. Response type for the schedule, in specific dates or recurring day information. Default is 'day'.",
                        "name": "view",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"2025-03-01\"",
                        "description": "Start date of the events range (YYYY-MM-DD)",
                        "name": "after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"2025-03-31\"",
                        "description": "End date of the events range (YYYY-MM-DD)",
                        "name": "before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"550e8400-e29b-41d4-a716-446655440000\"",
                        "description": "Filter by program ID (UUID format)",
                        "name": "program_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"550e8400-e29b-41d4-a716-446655440000\"",
                        "description": "Filter by user ID (UUID format)",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"550e8400-e29b-41d4-a716-446655440000\"",
                        "description": "Filter by team ID (UUID format)",
                        "name": "team_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"550e8400-e29b-41d4-a716-446655440000\"",
                        "description": "Filter by location ID (UUID format)",
                        "name": "location_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Program Type (game, practice, course, others)",
                        "name": "program_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"550e8400-e29b-41d4-a716-446655440000\"",
                        "description": "ID of person who created the event (UUID format)",
                        "name": "created_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"550e8400-e29b-41d4-a716-446655440000\"",
                        "description": "ID of person who updated the event (UUID format)",
                        "name": "updated_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of events retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/event.EventResponseDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input format or missing required parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Registers a new event with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Create a new event",
                "parameters": [
                    {
                        "description": "Event details",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/event.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Event created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events/{event_id}/customers/{customer_id}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "enrollments"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Enrollment created successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete an enrollment by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "enrollments"
                ],
                "summary": "Delete an enrollment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Enrollment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Enrollment deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Enrollment not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events/{event_id}/staffs/{staff_id}": {
            "post": {
                "description": "Assign a staff member to an event using event_id and staff_id in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "event_staff"
                ],
                "summary": "Assign a staff member to an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Staff ID",
                        "name": "staff_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Staff successfully assigned to event",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a staff member from an event using event_id and staff_id in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "event_staff"
                ],
                "summary": "Unassign a staff member from an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Staff ID",
                        "name": "staff_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Staff successfully unassigned from event",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events/{id}": {
            "get": {
                "description": "Retrieves details of a specific event based on its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get event details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Choose between 'date' and 'day'. Response type for the schedule, in specific dates or recurring day information. Default is 'day'.",
                        "name": "view",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/event.EventResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Updates the details of an existing event.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Update an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated event details",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/event.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Event updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an event by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Delete an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Event deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/games": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "responses": {
                    "200": {
                        "description": "List of games retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/game.ResponseDto"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "parameters": [
                    {
                        "description": "Game details",
                        "name": "game",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/game.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Game created successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/games/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Game ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Game retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/game.ResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Game not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Game ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Game details",
                        "name": "game",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/game.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Game updated successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Game not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Game ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Game deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Game not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/haircuts": {
            "get": {
                "description": "Retrieves all haircut images from a folder in Google Cloud Storage. Optionally, specify a barber name to get images from that barber's folder.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "haircut"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Barber ID to filter images",
                        "name": "barber_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of image URLs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Uploads a haircut image to Google Cloud Storage and returns the object URL.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "haircut"
                ],
                "parameters": [
                    {
                        "type": "file",
                        "description": "Haircut image to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File uploaded successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/haircuts/events": {
            "get": {
                "description": "Retrieve all haircut events, with optional filters by barber ID and customer ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "haircut"
                ],
                "summary": "Get all haircut events",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"2025-03-01\"",
                        "description": "Start date of the events range (YYYY-MM-DD)",
                        "name": "after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"2025-03-31\"",
                        "description": "End date of the events range (YYYY-MM-DD)",
                        "name": "before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by barber ID",
                        "name": "barber_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by customer ID",
                        "name": "customer_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of haircut events retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/haircut.EventResponseDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Registers a new haircut event with the provided details from request body.\nRequires an Authorization header containing the customer's JWT, ensuring only logged-in customers can make the request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "haircut"
                ],
                "parameters": [
                    {
                        "description": "Haircut event details",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/haircut.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Haircut event created successfully",
                        "schema": {
                            "$ref": "#/definitions/haircut.EventResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/haircuts/events/{id}": {
            "get": {
                "description": "Retrieves details of a specific haircut event based on its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "haircut"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Haircut event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Haircut event details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/haircut.EventResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Haircut event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a haircut event by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "haircut"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Haircut event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Haircut event deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Haircut event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/locations": {
            "get": {
                "description": "Retrieves a list of all locations.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Get all locations",
                "responses": {
                    "200": {
                        "description": "List of locations retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/location.ResponseDto"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Registers a new Location with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Create a new Location",
                "parameters": [
                    {
                        "description": "Location details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/location.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Location created successfully",
                        "schema": {
                            "$ref": "#/definitions/location.ResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/locations/{id}": {
            "get": {
                "description": "Retrieves a Location by its unique identifier.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Get a Location by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Location UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Location retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/location.ResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid UUID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Location not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the details of an existing Location by its UUID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Update a Location",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Location UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Location details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/location.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Location updated successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Location not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a Location by its UUID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Delete a Location",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Location UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Location deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid UUID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Location not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/memberships": {
            "get": {
                "description": "Get a list of memberships",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memberships"
                ],
                "summary": "Get a list of memberships",
                "responses": {
                    "200": {
                        "description": "GetMemberships of memberships retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/membership.Response"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new membership",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memberships"
                ],
                "summary": "Create a new membership",
                "parameters": [
                    {
                        "description": "Membership details",
                        "name": "membership",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/membership.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Membership created successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/memberships/plans": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new membership plan",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "membership-plans"
                ],
                "summary": "Create a new membership plan",
                "parameters": [
                    {
                        "description": "Membership plan details",
                        "name": "plan",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/membership_plan.PlanRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Membership plan created successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/memberships/plans/payment-frequencies": {
            "get": {
                "description": "Retrieves a list of available payment frequencies for membership plans.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "membership-plans"
                ],
                "summary": "Get payment frequencies for membership plans",
                "responses": {
                    "200": {
                        "description": "List of payment frequencies",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/memberships/plans/{id}": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a membership plan",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "membership-plans"
                ],
                "summary": "Update a membership plan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Membership plan details",
                        "name": "plan",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/membership_plan.PlanRequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Membership plan updated successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Membership plan not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a membership plan by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "membership-plans"
                ],
                "summary": "Delete a membership plan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Membership plan deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Membership plan not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/memberships/{id}": {
            "get": {
                "description": "Get a membership by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memberships"
                ],
                "summary": "Get a membership by ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"",
                        "description": "Membership ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Membership retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/membership.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Membership not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a membership",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memberships"
                ],
                "summary": "Update a membership",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"",
                        "description": "Membership ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Membership details",
                        "name": "membership",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/membership.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Membership updated successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Membership not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a membership by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memberships"
                ],
                "summary": "Delete a membership",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"",
                        "description": "Membership ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Membership deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Membership not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/memberships/{id}/plans": {
            "get": {
                "description": "Get membership plans by membership ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "membership-plans"
                ],
                "summary": "Get membership plans by membership ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"",
                        "description": "Membership ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GetMemberships of membership plans retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/membership_plan.PlanResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid membership ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Membership plans not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/programs": {
            "get": {
                "description": "Get a list of programs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "programs"
                ],
                "summary": "Get a list of programs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Program Type (game, practice, course, others)",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Programs retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/program.Response"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new program",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "programs"
                ],
                "summary": "Create a new program",
                "parameters": [
                    {
                        "description": "Program details",
                        "name": "program",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/program.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Program created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/programs/levels": {
            "get": {
                "description": "Retrieves a list of available program levels.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "programs"
                ],
                "responses": {
                    "200": {
                        "description": "Get program levels retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/program.LevelsResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/programs/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "programs"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Program ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Programs retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/program.Response"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Program not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update a program",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "programs"
                ],
                "summary": "Update a program",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Program ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Program details",
                        "name": "program",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/program.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Program updated successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Program not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "programs"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Program ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Program deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Program not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/register/athlete": {
            "post": {
                "description": "Registers a new athlete by verifying the Firebase token and creating an account based on the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registration"
                ],
                "summary": "Register a new athlete",
                "parameters": [
                    {
                        "description": "Athlete registration details",
                        "name": "athlete",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/customer.AthleteRegistrationRequestDto"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Firebase token for user verification",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Athlete registered successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Missing or invalid Firebase token or request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to register athlete",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/register/child": {
            "post": {
                "description": "Registers a new child account using the provided details and associates it with the parent based on the Firebase authentication token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registration"
                ],
                "summary": "Register a new child account and associate it with the parent",
                "parameters": [
                    {
                        "description": "Child account registration details",
                        "name": "customer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/customer.ChildRegistrationRequestDto"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Firebase token for user verification",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Child account registered successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input or missing Firebase token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Invalid Firebase token or insufficient permissions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to register child account or associate with parent",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/register/parent": {
            "post": {
                "description": "Registers a new parent by verifying the Firebase token and creating an account based on the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registration"
                ],
                "summary": "Register a new parent",
                "parameters": [
                    {
                        "description": "Parent registration details",
                        "name": "parent",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/customer.ParentRegistrationRequestDto"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Firebase token for user verification",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Parent registered successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Missing or invalid Firebase token or request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to register parent",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/register/staff": {
            "post": {
                "description": "Creates a new staff account in the system using the provided registration details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registration"
                ],
                "summary": "Register a new staff member",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Firebase token for user verification",
                        "name": "firebase_token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Staff registration details",
                        "name": "staff",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/staff.RegistrationRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Staff registered successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Invalid or missing authentication token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to register staff",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/staffs": {
            "get": {
                "description": "Retrieves staff members based on optional role filter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staff"
                ],
                "summary": "Get a list of staff members",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"Coach\"",
                        "description": "Role name to filter staff",
                        "name": "role",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of staff members retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/staff.ResponseDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/staffs/{id}": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a staff member",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staff"
                ],
                "summary": "Update a staff member",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"",
                        "description": "Staff ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Staff details",
                        "name": "staff",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/staff.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Staff updated successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Staff not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a staff member by HubSpotId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staff"
                ],
                "summary": "Delete a staff member",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"",
                        "description": "Staff HubSpotId",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Staff deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid HubSpotId",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Staff not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/teams": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "responses": {
                    "200": {
                        "description": "Teams retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/team.Response"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "parameters": [
                    {
                        "description": "Team details",
                        "name": "team",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/team.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Team created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/teams/{id}": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Team details",
                        "name": "team",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/team.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Team updated successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Team not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teams"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Team deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Team not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/webhooks/stripe": {
            "post": {
                "description": "- checkout.session.completed: Logs completed checkout sessions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Receives and processes payment updates from Stripe .",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Stripe webhook signature",
                        "name": "Stripe-Signature",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Raw webhook payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Webhook processed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to process webhook event",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "customer.AthleteRegistrationRequestDto": {
            "type": "object",
            "required": [
                "age",
                "first_name",
                "last_name"
            ],
            "properties": {
                "age": {
                    "type": "integer"
                },
                "country_code": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "has_consent_to_email_marketing": {
                    "type": "boolean"
                },
                "has_consent_to_sms": {
                    "type": "boolean"
                },
                "last_name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string",
                    "example": "+15141234567"
                },
                "waivers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/customer.WaiverSigningRequestDto"
                    }
                }
            }
        },
        "customer.AthleteResponseDto": {
            "type": "object",
            "properties": {
                "assists": {
                    "type": "integer"
                },
                "losses": {
                    "type": "integer"
                },
                "points": {
                    "type": "integer"
                },
                "rebounds": {
                    "type": "integer"
                },
                "steals": {
                    "type": "integer"
                },
                "wins": {
                    "type": "integer"
                }
            }
        },
        "customer.ChildRegistrationRequestDto": {
            "type": "object",
            "required": [
                "age",
                "first_name",
                "last_name"
            ],
            "properties": {
                "age": {
                    "type": "integer"
                },
                "country_code": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "waivers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/customer.WaiverSigningRequestDto"
                    }
                }
            }
        },
        "customer.MembershipResponseDto": {
            "type": "object",
            "properties": {
                "membership_name": {
                    "type": "string"
                },
                "membership_plan_id": {
                    "type": "string"
                },
                "membership_plan_name": {
                    "type": "string"
                },
                "membership_renewal_date": {
                    "type": "string"
                },
                "membership_start_date": {
                    "type": "string"
                }
            }
        },
        "customer.ParentRegistrationRequestDto": {
            "type": "object",
            "required": [
                "age",
                "first_name",
                "last_name"
            ],
            "properties": {
                "age": {
                    "type": "integer"
                },
                "country_code": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "has_consent_to_email_marketing": {
                    "type": "boolean"
                },
                "has_consent_to_sms": {
                    "type": "boolean"
                },
                "last_name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string",
                    "example": "+15141234567"
                }
            }
        },
        "customer.Response": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "athlete_info": {
                    "$ref": "#/definitions/customer.AthleteResponseDto"
                },
                "country_code": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "hubspot_id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "membership_info": {
                    "$ref": "#/definitions/customer.MembershipResponseDto"
                },
                "phone": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "customer.StatsUpdateRequestDto": {
            "type": "object",
            "properties": {
                "assists": {
                    "type": "integer"
                },
                "losses": {
                    "type": "integer"
                },
                "points": {
                    "type": "integer"
                },
                "rebounds": {
                    "type": "integer"
                },
                "steals": {
                    "type": "integer"
                },
                "wins": {
                    "type": "integer"
                }
            }
        },
        "customer.WaiverSigningRequestDto": {
            "type": "object",
            "required": [
                "waiver_url"
            ],
            "properties": {
                "is_waiver_signed": {
                    "type": "boolean"
                },
                "waiver_url": {
                    "type": "string"
                }
            }
        },
        "event.CustomerResponseDto": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "has_cancelled_enrollment": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "event.DateResponseDto": {
            "type": "object",
            "properties": {
                "end_at": {
                    "type": "string"
                },
                "start_at": {
                    "type": "string"
                }
            }
        },
        "event.EventResponseDto": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "customers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/event.CustomerResponseDto"
                    }
                },
                "day": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/event.LocationInfo"
                },
                "program": {
                    "$ref": "#/definitions/event.ProgramInfo"
                },
                "program_end_at": {
                    "type": "string"
                },
                "program_start_at": {
                    "type": "string"
                },
                "schedule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/event.DateResponseDto"
                    }
                },
                "session_end_at": {
                    "type": "string"
                },
                "session_start_at": {
                    "type": "string"
                },
                "staff": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/event.StaffResponseDto"
                    }
                },
                "team": {
                    "$ref": "#/definitions/event.TeamInfo"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "event.LocationInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "event.ProgramInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "event.RequestDto": {
            "type": "object",
            "required": [
                "day",
                "program_end_at",
                "program_start_at",
                "session_end_time",
                "session_start_time"
            ],
            "properties": {
                "capacity": {
                    "type": "integer",
                    "example": 100
                },
                "day": {
                    "type": "string",
                    "example": "THURSDAY"
                },
                "location_id": {
                    "type": "string",
                    "example": "0bab3927-50eb-42b3-9d6b-2350dd00a100"
                },
                "program_end_at": {
                    "type": "string",
                    "example": "2023-10-05T07:00:00Z"
                },
                "program_id": {
                    "type": "string",
                    "example": "f0e21457-75d4-4de6-b765-5ee13221fd72"
                },
                "program_start_at": {
                    "type": "string",
                    "example": "2023-10-05T07:00:00Z"
                },
                "session_end_time": {
                    "type": "string",
                    "example": "23:00:00+00:00"
                },
                "session_start_time": {
                    "type": "string",
                    "example": "23:00:00+00:00"
                }
            }
        },
        "event.StaffResponseDto": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "role_name": {
                    "type": "string"
                }
            }
        },
        "event.TeamInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "game.RequestDto": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "lose_score": {
                    "type": "integer"
                },
                "lose_team": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "win_score": {
                    "type": "integer"
                },
                "win_team": {
                    "type": "string"
                }
            }
        },
        "game.ResponseDto": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lose_score": {
                    "type": "integer"
                },
                "lose_team": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "win_score": {
                    "type": "integer"
                },
                "win_team": {
                    "type": "string"
                }
            }
        },
        "haircut.BarberServiceResponseDto": {
            "type": "object",
            "properties": {
                "barber_id": {
                    "type": "string"
                },
                "barber_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "haircut_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "service_type_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "haircut.CreateBarberServiceRequestDto": {
            "type": "object",
            "properties": {
                "barber_id": {
                    "type": "string",
                    "example": "f0e21457-75d4-4de6-b765-5ee13221fd72"
                },
                "haircut_service_id": {
                    "type": "string",
                    "example": "f0e21457-75d4-4de6-b765-5ee13221fd72"
                }
            }
        },
        "haircut.EventResponseDto": {
            "type": "object",
            "properties": {
                "barber_id": {
                    "type": "string"
                },
                "barber_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "string"
                },
                "customer_name": {
                    "type": "string"
                },
                "end_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "start_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "haircut.RequestDto": {
            "type": "object",
            "required": [
                "begin_time",
                "end_time"
            ],
            "properties": {
                "barber_id": {
                    "type": "string",
                    "example": "f0e21457-75d4-4de6-b765-5ee13221fd72"
                },
                "begin_time": {
                    "type": "string",
                    "example": "2023-10-05T07:00:00Z"
                },
                "end_time": {
                    "type": "string",
                    "example": "2023-10-05T07:00:00Z"
                }
            }
        },
        "identity.MembershipReadResponseDto": {
            "type": "object",
            "properties": {
                "membership_name": {
                    "type": "string"
                },
                "plan_name": {
                    "type": "string"
                },
                "renewal_date": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                }
            }
        },
        "identity.UserAuthenticationResponseDto": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "country_code": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active_staff": {
                    "type": "boolean"
                },
                "last_name": {
                    "type": "string"
                },
                "membership_info": {
                    "$ref": "#/definitions/identity.MembershipReadResponseDto"
                },
                "phone": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "location.RequestDto": {
            "type": "object",
            "required": [
                "address",
                "name"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "location.ResponseDto": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "membership.RequestDto": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Access to all premium features"
                },
                "name": {
                    "type": "string",
                    "example": "Premium Membership"
                }
            }
        },
        "membership.Response": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "membership_plan.PlanRequestDto": {
            "type": "object",
            "required": [
                "membership_id",
                "payment_frequency",
                "price"
            ],
            "properties": {
                "amt_periods": {
                    "type": "integer"
                },
                "membership_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "payment_frequency": {
                    "type": "string"
                },
                "price": {
                    "type": "string"
                }
            }
        },
        "membership_plan.PlanResponse": {
            "type": "object",
            "properties": {
                "amt_periods": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "joining_fees": {
                    "type": "string"
                },
                "membership_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "payment_frequency": {
                    "type": "string"
                },
                "price": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "payment.CheckoutResponseDto": {
            "type": "object",
            "properties": {
                "payment_url": {
                    "type": "string"
                }
            }
        },
        "program.LevelsResponse": {
            "type": "object",
            "properties": {
                "levels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "program.RequestDto": {
            "type": "object",
            "required": [
                "level",
                "name",
                "type"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "program.Response": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "staff.CoachStatsResponseDto": {
            "type": "object",
            "properties": {
                "losses": {
                    "type": "integer"
                },
                "wins": {
                    "type": "integer"
                }
            }
        },
        "staff.RegistrationRequestDto": {
            "type": "object",
            "required": [
                "age",
                "first_name",
                "last_name",
                "role"
            ],
            "properties": {
                "age": {
                    "type": "integer"
                },
                "country_code": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "is_active_staff": {
                    "type": "boolean"
                },
                "last_name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string",
                    "example": "+15141234567"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "staff.RequestDto": {
            "type": "object",
            "required": [
                "is_active",
                "role_name"
            ],
            "properties": {
                "is_active": {
                    "type": "boolean"
                },
                "role_name": {
                    "type": "string"
                }
            }
        },
        "staff.ResponseDto": {
            "type": "object",
            "properties": {
                "coach_stats": {
                    "$ref": "#/definitions/staff.CoachStatsResponseDto"
                },
                "country_code": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "hubspot_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "last_name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "role_name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "team.RequestDto": {
            "type": "object",
            "required": [
                "capacity",
                "name"
            ],
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "coach_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "team.Response": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "coach_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}