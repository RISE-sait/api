// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: event_queries.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (begin_date_time, end_date_time, location_id, course_id, practice_id, game_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, begin_date_time, end_date_time, practice_id, course_id, game_id, location_id, created_at, updated_at
`

type CreateEventParams struct {
	BeginDateTime time.Time     `json:"begin_date_time"`
	EndDateTime   time.Time     `json:"end_date_time"`
	LocationID    uuid.UUID     `json:"location_id"`
	CourseID      uuid.NullUUID `json:"course_id"`
	PracticeID    uuid.NullUUID `json:"practice_id"`
	GameID        uuid.NullUUID `json:"game_id"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.BeginDateTime,
		arg.EndDateTime,
		arg.LocationID,
		arg.CourseID,
		arg.PracticeID,
		arg.GameID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.BeginDateTime,
		&i.EndDateTime,
		&i.PracticeID,
		&i.CourseID,
		&i.GameID,
		&i.LocationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :execrows
DELETE FROM events WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteEvent, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getEventById = `-- name: GetEventById :one
SELECT id, begin_date_time, end_date_time, practice_id, course_id, game_id, location_id, created_at, updated_at
FROM events
WHERE id = $1
`

func (q *Queries) GetEventById(ctx context.Context, id uuid.UUID) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEventById, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.BeginDateTime,
		&i.EndDateTime,
		&i.PracticeID,
		&i.CourseID,
		&i.GameID,
		&i.LocationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEvents = `-- name: GetEvents :many
SELECT id, begin_date_time, end_date_time, practice_id, course_id, game_id, location_id, created_at, updated_at
FROM events WHERE
course_id = $1 OR $1 IS NULL
    AND (practice_id = $2 or $2 IS NULL)
        AND (game_id = $3 or $3 IS NULL)

AND location_id = $4 or $4 IS NULL
`

type GetEventsParams struct {
	CourseID   uuid.NullUUID `json:"course_id"`
	PracticeID uuid.NullUUID `json:"practice_id"`
	GameID     uuid.NullUUID `json:"game_id"`
	LocationID uuid.NullUUID `json:"location_id"`
}

func (q *Queries) GetEvents(ctx context.Context, arg GetEventsParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEvents,
		arg.CourseID,
		arg.PracticeID,
		arg.GameID,
		arg.LocationID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.BeginDateTime,
			&i.EndDateTime,
			&i.PracticeID,
			&i.CourseID,
			&i.GameID,
			&i.LocationID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events
    SET begin_date_time = $1, end_date_time = $2, location_id = $3, practice_id = $4, course_id = $5,
        game_id = $6
    WHERE id = $7
    RETURNING id, begin_date_time, end_date_time, practice_id, course_id, game_id, location_id, created_at, updated_at
`

type UpdateEventParams struct {
	BeginDateTime time.Time     `json:"begin_date_time"`
	EndDateTime   time.Time     `json:"end_date_time"`
	LocationID    uuid.UUID     `json:"location_id"`
	PracticeID    uuid.NullUUID `json:"practice_id"`
	CourseID      uuid.NullUUID `json:"course_id"`
	GameID        uuid.NullUUID `json:"game_id"`
	ID            uuid.UUID     `json:"id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, updateEvent,
		arg.BeginDateTime,
		arg.EndDateTime,
		arg.LocationID,
		arg.PracticeID,
		arg.CourseID,
		arg.GameID,
		arg.ID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.BeginDateTime,
		&i.EndDateTime,
		&i.PracticeID,
		&i.CourseID,
		&i.GameID,
		&i.LocationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
