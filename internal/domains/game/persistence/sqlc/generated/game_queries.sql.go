// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: game_queries.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createGame = `-- name: CreateGame :exec

INSERT INTO game.games (
  id, home_team_id, away_team_id, home_score, away_score, start_time,
  end_time,court_id, location_id, status
) VALUES (
  gen_random_uuid(), $1, $2, $3, $4, $5, $6, $7, $8, $9
)
`

type CreateGameParams struct {
	HomeTeamID uuid.UUID      `json:"home_team_id"`
	AwayTeamID uuid.UUID      `json:"away_team_id"`
	HomeScore  sql.NullInt32  `json:"home_score"`
	AwayScore  sql.NullInt32  `json:"away_score"`
	StartTime  time.Time      `json:"start_time"`
	EndTime    sql.NullTime   `json:"end_time"`
	CourtID    uuid.NullUUID  `json:"court_id"`
	LocationID uuid.UUID      `json:"location_id"`
	Status     sql.NullString `json:"status"`
}

// The following SQL functions provide full CRUD support for the game.games table.
// This structure replaces the older approach of inserting game data via a WITH clause
// that unwrapped parallel arrays (e.g., unnesting start_times, team_names, etc.).
//
// - The new design promotes single-row transactional inserts, which are safer and easier to debug.
// - Complex batch insertion with unnested arrays was moved into Go, giving more control over data preparation.
// - This also simplifies SQL and avoids silent failures during multi-row joins.
// Inserts a single game into the game.games table using direct parameters.
func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) error {
	_, err := q.db.ExecContext(ctx, createGame,
		arg.HomeTeamID,
		arg.AwayTeamID,
		arg.HomeScore,
		arg.AwayScore,
		arg.StartTime,
		arg.EndTime,
		arg.CourtID,
		arg.LocationID,
		arg.Status,
	)
	return err
}

const deleteGame = `-- name: DeleteGame :execrows
DELETE FROM game.games
WHERE id = $1
`

// Deletes a game by ID.
func (q *Queries) DeleteGame(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteGame, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getGameById = `-- name: GetGameById :one
SELECT 
    g.id,
    g.home_team_id,
    ht.name AS home_team_name,
    g.away_team_id,
    at.name AS away_team_name,
    g.home_score,
    g.away_score,
    g.start_time,
    g.end_time,
    g.location_id,
    loc.name AS location_name,
    g.court_id,
    c.name AS court_name,
    g.court_id,
    c.name AS court_name,
    g.status,
    g.created_at,
    g.updated_at
FROM game.games g
JOIN athletic.teams ht ON g.home_team_id = ht.id
JOIN athletic.teams at ON g.away_team_id = at.id
JOIN location.courts c ON g.court_id = c.id
JOIN location.locations loc ON g.location_id = loc.id
WHERE g.id = $1
`

type GetGameByIdRow struct {
	ID           uuid.UUID      `json:"id"`
	HomeTeamID   uuid.UUID      `json:"home_team_id"`
	HomeTeamName string         `json:"home_team_name"`
	AwayTeamID   uuid.UUID      `json:"away_team_id"`
	AwayTeamName string         `json:"away_team_name"`
	HomeScore    sql.NullInt32  `json:"home_score"`
	AwayScore    sql.NullInt32  `json:"away_score"`
	StartTime    time.Time      `json:"start_time"`
	EndTime      sql.NullTime   `json:"end_time"`
	LocationID   uuid.UUID      `json:"location_id"`
	LocationName string         `json:"location_name"`
	CourtID      uuid.NullUUID  `json:"court_id"`
	CourtName    string         `json:"court_name"`
	CourtID_2    uuid.NullUUID  `json:"court_id_2"`
	CourtName_2  string         `json:"court_name_2"`
	Status       sql.NullString `json:"status"`
	CreatedAt    sql.NullTime   `json:"created_at"`
	UpdatedAt    sql.NullTime   `json:"updated_at"`
}

// Retrieves a specific game along with team names and location name.
func (q *Queries) GetGameById(ctx context.Context, id uuid.UUID) (GetGameByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getGameById, id)
	var i GetGameByIdRow
	err := row.Scan(
		&i.ID,
		&i.HomeTeamID,
		&i.HomeTeamName,
		&i.AwayTeamID,
		&i.AwayTeamName,
		&i.HomeScore,
		&i.AwayScore,
		&i.StartTime,
		&i.EndTime,
		&i.LocationID,
		&i.LocationName,
		&i.CourtID,
		&i.CourtName,
		&i.CourtID_2,
		&i.CourtName_2,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGames = `-- name: GetGames :many
SELECT 
    g.id,
    g.home_team_id,
    ht.name AS home_team_name,
    ht.logo_url AS home_team_logo_url,
    g.away_team_id,
    at.name AS away_team_name,
    at.logo_url AS away_team_logo_url,
    g.home_score,
    g.away_score,
    g.start_time,
    g.end_time,
    g.location_id,
    loc.name AS location_name,
    g.status,
    g.created_at,
    g.updated_at
FROM game.games g
JOIN location.courts c ON g.court_id = c.id
JOIN athletic.teams ht ON g.home_team_id = ht.id
JOIN athletic.teams at ON g.away_team_id = at.id
JOIN location.locations loc ON g.location_id = loc.id
ORDER BY g.start_time ASC
LIMIT $1 OFFSET $2
`

type GetGamesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetGamesRow struct {
	ID              uuid.UUID      `json:"id"`
	HomeTeamID      uuid.UUID      `json:"home_team_id"`
	HomeTeamName    string         `json:"home_team_name"`
	HomeTeamLogoUrl sql.NullString `json:"home_team_logo_url"`
	AwayTeamID      uuid.UUID      `json:"away_team_id"`
	AwayTeamName    string         `json:"away_team_name"`
	AwayTeamLogoUrl sql.NullString `json:"away_team_logo_url"`
	HomeScore       sql.NullInt32  `json:"home_score"`
	AwayScore       sql.NullInt32  `json:"away_score"`
	StartTime       time.Time      `json:"start_time"`
	EndTime         sql.NullTime   `json:"end_time"`
	LocationID      uuid.UUID      `json:"location_id"`
	LocationName    string         `json:"location_name"`
	Status          sql.NullString `json:"status"`
	CreatedAt       sql.NullTime   `json:"created_at"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
}

// Retrieves all games, with team and location names.
func (q *Queries) GetGames(ctx context.Context, arg GetGamesParams) ([]GetGamesRow, error) {
	rows, err := q.db.QueryContext(ctx, getGames, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGamesRow
	for rows.Next() {
		var i GetGamesRow
		if err := rows.Scan(
			&i.ID,
			&i.HomeTeamID,
			&i.HomeTeamName,
			&i.HomeTeamLogoUrl,
			&i.AwayTeamID,
			&i.AwayTeamName,
			&i.AwayTeamLogoUrl,
			&i.HomeScore,
			&i.AwayScore,
			&i.StartTime,
			&i.EndTime,
			&i.LocationID,
			&i.LocationName,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGamesByTeams = `-- name: GetGamesByTeams :many
SELECT
    g.id,
    g.home_team_id,
    ht.name AS home_team_name,
    ht.logo_url AS home_team_logo_url,
    g.away_team_id,
    at.name AS away_team_name,
    at.logo_url AS away_team_logo_url,
    g.home_score,
    g.away_score,
    g.start_time,
    g.end_time,
    g.location_id,
    loc.name AS location_name,
    g.status,
    g.created_at,
    g.updated_at
FROM game.games g
JOIN athletic.teams ht ON g.home_team_id = ht.id
JOIN athletic.teams at ON g.away_team_id = at.id
JOIN location.locations loc ON g.location_id = loc.id
WHERE g.home_team_id = ANY($1::uuid[])
   OR g.away_team_id = ANY($1::uuid[])
ORDER BY g.start_time ASC
LIMIT $3 OFFSET $2
`

type GetGamesByTeamsParams struct {
	TeamIds []uuid.UUID `json:"team_ids"`
	Offset  int32       `json:"offset"`
	Limit   int32       `json:"limit"`
}

type GetGamesByTeamsRow struct {
	ID              uuid.UUID      `json:"id"`
	HomeTeamID      uuid.UUID      `json:"home_team_id"`
	HomeTeamName    string         `json:"home_team_name"`
	HomeTeamLogoUrl sql.NullString `json:"home_team_logo_url"`
	AwayTeamID      uuid.UUID      `json:"away_team_id"`
	AwayTeamName    string         `json:"away_team_name"`
	AwayTeamLogoUrl sql.NullString `json:"away_team_logo_url"`
	HomeScore       sql.NullInt32  `json:"home_score"`
	AwayScore       sql.NullInt32  `json:"away_score"`
	StartTime       time.Time      `json:"start_time"`
	EndTime         sql.NullTime   `json:"end_time"`
	LocationID      uuid.UUID      `json:"location_id"`
	LocationName    string         `json:"location_name"`
	Status          sql.NullString `json:"status"`
	CreatedAt       sql.NullTime   `json:"created_at"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetGamesByTeams(ctx context.Context, arg GetGamesByTeamsParams) ([]GetGamesByTeamsRow, error) {
	rows, err := q.db.QueryContext(ctx, getGamesByTeams, pq.Array(arg.TeamIds), arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGamesByTeamsRow
	for rows.Next() {
		var i GetGamesByTeamsRow
		if err := rows.Scan(
			&i.ID,
			&i.HomeTeamID,
			&i.HomeTeamName,
			&i.HomeTeamLogoUrl,
			&i.AwayTeamID,
			&i.AwayTeamName,
			&i.AwayTeamLogoUrl,
			&i.HomeScore,
			&i.AwayScore,
			&i.StartTime,
			&i.EndTime,
			&i.LocationID,
			&i.LocationName,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPastGames = `-- name: GetPastGames :many
SELECT 
    g.id,
    g.home_team_id,
    ht.name AS home_team_name,
    ht.logo_url AS home_team_logo_url,
    g.away_team_id,
    at.name AS away_team_name,
    at.logo_url AS away_team_logo_url,
    g.home_score,
    g.away_score,
    g.start_time,
    g.end_time,
    g.location_id,
    loc.name AS location_name,
    g.status,
    g.created_at,
    g.updated_at
FROM game.games g
JOIN athletic.teams ht ON g.home_team_id = ht.id
JOIN athletic.teams at ON g.away_team_id = at.id
JOIN location.locations loc ON g.location_id = loc.id
WHERE g.start_time < NOW()
ORDER BY g.start_time DESC
LIMIT $1 OFFSET $2
`

type GetPastGamesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetPastGamesRow struct {
	ID              uuid.UUID      `json:"id"`
	HomeTeamID      uuid.UUID      `json:"home_team_id"`
	HomeTeamName    string         `json:"home_team_name"`
	HomeTeamLogoUrl sql.NullString `json:"home_team_logo_url"`
	AwayTeamID      uuid.UUID      `json:"away_team_id"`
	AwayTeamName    string         `json:"away_team_name"`
	AwayTeamLogoUrl sql.NullString `json:"away_team_logo_url"`
	HomeScore       sql.NullInt32  `json:"home_score"`
	AwayScore       sql.NullInt32  `json:"away_score"`
	StartTime       time.Time      `json:"start_time"`
	EndTime         sql.NullTime   `json:"end_time"`
	LocationID      uuid.UUID      `json:"location_id"`
	LocationName    string         `json:"location_name"`
	Status          sql.NullString `json:"status"`
	CreatedAt       sql.NullTime   `json:"created_at"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
}

// Retrieves games that have already completed.
func (q *Queries) GetPastGames(ctx context.Context, arg GetPastGamesParams) ([]GetPastGamesRow, error) {
	rows, err := q.db.QueryContext(ctx, getPastGames, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPastGamesRow
	for rows.Next() {
		var i GetPastGamesRow
		if err := rows.Scan(
			&i.ID,
			&i.HomeTeamID,
			&i.HomeTeamName,
			&i.HomeTeamLogoUrl,
			&i.AwayTeamID,
			&i.AwayTeamName,
			&i.AwayTeamLogoUrl,
			&i.HomeScore,
			&i.AwayScore,
			&i.StartTime,
			&i.EndTime,
			&i.LocationID,
			&i.LocationName,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUpcomingGames = `-- name: GetUpcomingGames :many
SELECT 
    g.id,
    g.home_team_id,
    ht.name AS home_team_name,
    ht.logo_url AS home_team_logo_url,
    g.away_team_id,
    at.name AS away_team_name,
    at.logo_url AS away_team_logo_url,
    g.home_score,
    g.away_score,
    g.start_time,
    g.end_time,
    g.location_id,
    loc.name AS location_name,
    g.status,
    g.created_at,
    g.updated_at
FROM game.games g
JOIN athletic.teams ht ON g.home_team_id = ht.id
JOIN athletic.teams at ON g.away_team_id = at.id
JOIN location.locations loc ON g.location_id = loc.id
WHERE g.end_time >= NOW()
ORDER BY g.start_time ASC
LIMIT $1 OFFSET $2
`

type GetUpcomingGamesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetUpcomingGamesRow struct {
	ID              uuid.UUID      `json:"id"`
	HomeTeamID      uuid.UUID      `json:"home_team_id"`
	HomeTeamName    string         `json:"home_team_name"`
	HomeTeamLogoUrl sql.NullString `json:"home_team_logo_url"`
	AwayTeamID      uuid.UUID      `json:"away_team_id"`
	AwayTeamName    string         `json:"away_team_name"`
	AwayTeamLogoUrl sql.NullString `json:"away_team_logo_url"`
	HomeScore       sql.NullInt32  `json:"home_score"`
	AwayScore       sql.NullInt32  `json:"away_score"`
	StartTime       time.Time      `json:"start_time"`
	EndTime         sql.NullTime   `json:"end_time"`
	LocationID      uuid.UUID      `json:"location_id"`
	LocationName    string         `json:"location_name"`
	Status          sql.NullString `json:"status"`
	CreatedAt       sql.NullTime   `json:"created_at"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
}

// Retrieves games that are upcoming and ongoing.
// This includes games that have started but not yet ended.
func (q *Queries) GetUpcomingGames(ctx context.Context, arg GetUpcomingGamesParams) ([]GetUpcomingGamesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUpcomingGames, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUpcomingGamesRow
	for rows.Next() {
		var i GetUpcomingGamesRow
		if err := rows.Scan(
			&i.ID,
			&i.HomeTeamID,
			&i.HomeTeamName,
			&i.HomeTeamLogoUrl,
			&i.AwayTeamID,
			&i.AwayTeamName,
			&i.AwayTeamLogoUrl,
			&i.HomeScore,
			&i.AwayScore,
			&i.StartTime,
			&i.EndTime,
			&i.LocationID,
			&i.LocationName,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGame = `-- name: UpdateGame :execrows
UPDATE game.games
SET home_score = $2,
    away_score = $3,
    start_time = $4,
    end_time = $5,
    location_id = $6,
    court_id = $7,
    status = $8,
    updated_at = now()
WHERE id = $1
`

type UpdateGameParams struct {
	ID         uuid.UUID      `json:"id"`
	HomeScore  sql.NullInt32  `json:"home_score"`
	AwayScore  sql.NullInt32  `json:"away_score"`
	StartTime  time.Time      `json:"start_time"`
	EndTime    sql.NullTime   `json:"end_time"`
	LocationID uuid.UUID      `json:"location_id"`
	CourtID    uuid.NullUUID  `json:"court_id"`
	Status     sql.NullString `json:"status"`
}

// Updates an existing game's scores, times, location, and status.
func (q *Queries) UpdateGame(ctx context.Context, arg UpdateGameParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateGame,
		arg.ID,
		arg.HomeScore,
		arg.AwayScore,
		arg.StartTime,
		arg.EndTime,
		arg.LocationID,
		arg.CourtID,
		arg.Status,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
