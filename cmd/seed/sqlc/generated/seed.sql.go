// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: seed.sql

package db_seed

import (
	"context"
	"time"

	"api/internal/custom_types"
	"github.com/google/uuid"
	"github.com/lib/pq"
)

const insertClients = `-- name: InsertClients :many
WITH prepared_data AS (SELECT unnest($1::text[])            AS country_alpha2_code,
                              unnest($2::text[])                     AS first_name,
                              unnest($3::text[])                      AS last_name,
                              unnest($4::int[])                             AS age,
                              unnest(
                                      ARRAY(
                                              SELECT CASE
                                                         WHEN parent_id = '00000000-0000-0000-0000-000000000000'
                                                             THEN NULL
                                                         ELSE parent_id
                                                         END
                                              FROM unnest($5::uuid[]) AS parent_id
                                      )
                              )                                                     AS parent_id,
                              unnest($6::text[])                          AS phone,
                              unnest($7::text[])                          AS email,
                              unnest($8::boolean[]) AS has_marketing_email_consent,
                              unnest($9::boolean[])             AS has_sms_consent)
INSERT
INTO users.users (country_alpha2_code,
                  first_name,
                  last_name,
                  age,
                  parent_id,
                  phone,
                  email,
                  has_marketing_email_consent,
                  has_sms_consent)
SELECT country_alpha2_code,
       first_name,
       last_name,
       age,
       parent_id,
       phone,
       email,
       has_marketing_email_consent,
       has_sms_consent
FROM prepared_data
RETURNING id
`

type InsertClientsParams struct {
	CountryAlpha2CodeArray        []string    `json:"country_alpha2_code_array"`
	FirstNameArray                []string    `json:"first_name_array"`
	LastNameArray                 []string    `json:"last_name_array"`
	AgeArray                      []int32     `json:"age_array"`
	ParentIDArray                 []uuid.UUID `json:"parent_id_array"`
	PhoneArray                    []string    `json:"phone_array"`
	EmailArray                    []string    `json:"email_array"`
	HasMarketingEmailConsentArray []bool      `json:"has_marketing_email_consent_array"`
	HasSmsConsentArray            []bool      `json:"has_sms_consent_array"`
}

func (q *Queries) InsertClients(ctx context.Context, arg InsertClientsParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, insertClients,
		pq.Array(arg.CountryAlpha2CodeArray),
		pq.Array(arg.FirstNameArray),
		pq.Array(arg.LastNameArray),
		pq.Array(arg.AgeArray),
		pq.Array(arg.ParentIDArray),
		pq.Array(arg.PhoneArray),
		pq.Array(arg.EmailArray),
		pq.Array(arg.HasMarketingEmailConsentArray),
		pq.Array(arg.HasSmsConsentArray),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertClientsMembershipPlans = `-- name: InsertClientsMembershipPlans :many
INSERT INTO public.customer_membership_plans (customer_id, membership_plan_id, start_date, renewal_date)
VALUES (unnest($1::uuid[]),
        unnest($2::uuid[]),
        unnest($3::timestamptz[]),
        unnest($4::timestamptz[]))
RETURNING id
`

type InsertClientsMembershipPlansParams struct {
	CustomerID       []uuid.UUID `json:"customer_id"`
	PlansArray       []uuid.UUID `json:"plans_array"`
	StartDateArray   []time.Time `json:"start_date_array"`
	RenewalDateArray []time.Time `json:"renewal_date_array"`
}

func (q *Queries) InsertClientsMembershipPlans(ctx context.Context, arg InsertClientsMembershipPlansParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, insertClientsMembershipPlans,
		pq.Array(arg.CustomerID),
		pq.Array(arg.PlansArray),
		pq.Array(arg.StartDateArray),
		pq.Array(arg.RenewalDateArray),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCourses = `-- name: InsertCourses :many
INSERT INTO course.courses (name, description, capacity)
VALUES (unnest($1::text[]),
        unnest($2::text[]),
        unnest($3::int[]))
RETURNING id
`

type InsertCoursesParams struct {
	NameArray        []string `json:"name_array"`
	DescriptionArray []string `json:"description_array"`
	CapacityArray    []int32  `json:"capacity_array"`
}

func (q *Queries) InsertCourses(ctx context.Context, arg InsertCoursesParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, insertCourses, pq.Array(arg.NameArray), pq.Array(arg.DescriptionArray), pq.Array(arg.CapacityArray))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertEvents = `-- name: InsertEvents :exec
INSERT INTO public.events (event_start_at, event_end_at, session_start_time, session_end_time,
                           day, practice_id, course_id, game_id, location_id)
SELECT unnest($1::timestamptz[]),
       unnest($2::timestamptz[]),
       unnest($3::timetz[]),
       unnest($4::timetz[]),
       unnest($5::day_enum[]),
       unnest(
               ARRAY(
                       SELECT CASE
                                  WHEN practice_id = '00000000-0000-0000-0000-000000000000'
                                      THEN NULL
                                  ELSE practice_id
                                  END
                       FROM unnest($6::uuid[]) AS practice_id
               )
       ),
       unnest(
               ARRAY(
                       SELECT CASE
                                  WHEN course_id = '00000000-0000-0000-0000-000000000000'
                                      THEN NULL
                                  ELSE course_id
                                  END
                       FROM unnest($7::uuid[]) AS course_id
               )
       ),
       unnest(
               ARRAY(
                       SELECT CASE
                                  WHEN game_id = '00000000-0000-0000-0000-000000000000'
                                      THEN NULL
                                  ELSE game_id
                                  END
                       FROM unnest($8::uuid[]) AS game_id
               )
       ),
       unnest($9::uuid[])
ON CONFLICT DO NOTHING
`

type InsertEventsParams struct {
	EventStartAtArray     []time.Time                     `json:"event_start_at_array"`
	EventEndAtArray       []time.Time                     `json:"event_end_at_array"`
	SessionStartTimeArray []custom_types.TimeWithTimeZone `json:"session_start_time_array"`
	SessionEndTimeArray   []custom_types.TimeWithTimeZone `json:"session_end_time_array"`
	DayArray              []DayEnum                       `json:"day_array"`
	PracticeIDArray       []uuid.UUID                     `json:"practice_id_array"`
	CourseIDArray         []uuid.UUID                     `json:"course_id_array"`
	GameIDArray           []uuid.UUID                     `json:"game_id_array"`
	LocationIDArray       []uuid.UUID                     `json:"location_id_array"`
}

func (q *Queries) InsertEvents(ctx context.Context, arg InsertEventsParams) error {
	_, err := q.db.ExecContext(ctx, insertEvents,
		pq.Array(arg.EventStartAtArray),
		pq.Array(arg.EventEndAtArray),
		pq.Array(arg.SessionStartTimeArray),
		pq.Array(arg.SessionEndTimeArray),
		pq.Array(arg.DayArray),
		pq.Array(arg.PracticeIDArray),
		pq.Array(arg.CourseIDArray),
		pq.Array(arg.GameIDArray),
		pq.Array(arg.LocationIDArray),
	)
	return err
}

const insertGames = `-- name: InsertGames :many
INSERT INTO public.games (name)
VALUES (unnest($1::text[]))
RETURNING id
`

func (q *Queries) InsertGames(ctx context.Context, nameArray []string) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, insertGames, pq.Array(nameArray))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertLocations = `-- name: InsertLocations :many
INSERT INTO location.locations (name, address)
VALUES (unnest($1::text[]), unnest($2::text[]))
RETURNING id
`

type InsertLocationsParams struct {
	NameArray    []string `json:"name_array"`
	AddressArray []string `json:"address_array"`
}

func (q *Queries) InsertLocations(ctx context.Context, arg InsertLocationsParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, insertLocations, pq.Array(arg.NameArray), pq.Array(arg.AddressArray))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMembershipPlans = `-- name: InsertMembershipPlans :many
INSERT INTO membership.membership_plans (name, price, joining_fee, auto_renew, membership_id, payment_frequency,
                                         amt_periods)
SELECT name,
       price,
       joining_fee,
       auto_renew,
       (SELECT id FROM membership.memberships m WHERE m.name = membership_name),
       payment_frequency,
       amt_periods
FROM unnest($1::text[]) WITH ORDINALITY AS n(name, ord)
         JOIN
     unnest($2::numeric[]) WITH ORDINALITY AS p(price, ord) ON n.ord = p.ord
         JOIN
     unnest($3::numeric[]) WITH ORDINALITY AS j(joining_fee, ord) ON n.ord = j.ord
         JOIN
     unnest($4::boolean[]) WITH ORDINALITY AS a(auto_renew, ord) ON n.ord = a.ord
         JOIN
     unnest($5::text[]) WITH ORDINALITY AS m(membership_name, ord) ON n.ord = m.ord
         JOIN
     unnest($6::payment_frequency[]) WITH ORDINALITY AS f(payment_frequency, ord) ON n.ord = f.ord
         JOIN
     unnest($7::int[]) WITH ORDINALITY AS ap(amt_periods, ord) ON n.ord = ap.ord
RETURNING id
`

type InsertMembershipPlansParams struct {
	NameArray             []string           `json:"name_array"`
	PriceArray            []string           `json:"price_array"`
	JoiningFeeArray       []string           `json:"joining_fee_array"`
	AutoRenewArray        []bool             `json:"auto_renew_array"`
	MembershipNameArray   []string           `json:"membership_name_array"`
	PaymentFrequencyArray []PaymentFrequency `json:"payment_frequency_array"`
	AmtPeriodsArray       []int32            `json:"amt_periods_array"`
}

func (q *Queries) InsertMembershipPlans(ctx context.Context, arg InsertMembershipPlansParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, insertMembershipPlans,
		pq.Array(arg.NameArray),
		pq.Array(arg.PriceArray),
		pq.Array(arg.JoiningFeeArray),
		pq.Array(arg.AutoRenewArray),
		pq.Array(arg.MembershipNameArray),
		pq.Array(arg.PaymentFrequencyArray),
		pq.Array(arg.AmtPeriodsArray),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMemberships = `-- name: InsertMemberships :many
INSERT INTO membership.memberships (name, description)
VALUES (unnest($1::text[]), unnest($2::text[]))
RETURNING id
`

type InsertMembershipsParams struct {
	NameArray        []string `json:"name_array"`
	DescriptionArray []string `json:"description_array"`
}

func (q *Queries) InsertMemberships(ctx context.Context, arg InsertMembershipsParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, insertMemberships, pq.Array(arg.NameArray), pq.Array(arg.DescriptionArray))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPractices = `-- name: InsertPractices :many
INSERT INTO public.practices (name, description, level, capacity)
VALUES (unnest($1::text[]),
        unnest($2::text[]),
        unnest($3::practice_level[]),
        unnest($4::int[]))
RETURNING id
`

type InsertPracticesParams struct {
	NameArray        []string        `json:"name_array"`
	DescriptionArray []string        `json:"description_array"`
	LevelArray       []PracticeLevel `json:"level_array"`
	CapacityArray    []int32         `json:"capacity_array"`
}

func (q *Queries) InsertPractices(ctx context.Context, arg InsertPracticesParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, insertPractices,
		pq.Array(arg.NameArray),
		pq.Array(arg.DescriptionArray),
		pq.Array(arg.LevelArray),
		pq.Array(arg.CapacityArray),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
