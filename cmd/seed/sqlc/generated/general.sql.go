// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: general.sql

package db_seed

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const insertCoachStats = `-- name: InsertCoachStats :exec
INSERT INTO athletic.coach_stats (coach_id, wins, losses)
VALUES ((SELECT id FROM users.users WHERE email = 'viktor.djurasic+1@abcfitness.com'),
        1,
        1),
       ((SELECT id FROM users.users WHERE email = 'coach@test.com'),
        1,
        2)
`

func (q *Queries) InsertCoachStats(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, insertCoachStats)
	return err
}

const insertLocations = `-- name: InsertLocations :exec
INSERT INTO location.locations (name, address)
VALUES (unnest($1::text[]), unnest($2::text[]))
`

type InsertLocationsParams struct {
	NameArray    []string `json:"name_array"`
	AddressArray []string `json:"address_array"`
}

func (q *Queries) InsertLocations(ctx context.Context, arg InsertLocationsParams) error {
	_, err := q.db.ExecContext(ctx, insertLocations, pq.Array(arg.NameArray), pq.Array(arg.AddressArray))
	return err
}

const insertTeams = `-- name: InsertTeams :many
WITH prepared_data AS (SELECT unnest($1::text[])          AS coach,
                              unnest($2::int[])             AS capacity,
                              unnest($3::text[]) AS name)
INSERT
INTO athletic.teams(capacity, coach_id, name)
SELECT capacity, u.id, name
FROM prepared_data
JOIN users.users u ON u.email = coach
RETURNING id
`

type InsertTeamsParams struct {
	CoachEmailArray []string `json:"coach_email_array"`
	CapacityArray   []int32  `json:"capacity_array"`
	NameArray       []string `json:"name_array"`
}

func (q *Queries) InsertTeams(ctx context.Context, arg InsertTeamsParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, insertTeams, pq.Array(arg.CoachEmailArray), pq.Array(arg.CapacityArray), pq.Array(arg.NameArray))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertWaivers = `-- name: InsertWaivers :exec
INSERT INTO waiver.waiver(waiver_url, waiver_name)
VALUES ('https://storage.googleapis.com/rise-sports/waivers/code.pdf', 'code_pdf'),
       ('https://storage.googleapis.com/rise-sports/waivers/tetris.pdf', 'tetris_pdf')
`

func (q *Queries) InsertWaivers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, insertWaivers)
	return err
}
