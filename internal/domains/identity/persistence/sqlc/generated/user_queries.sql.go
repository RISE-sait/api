// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_queries.sql

package db_identity

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users.users (hubspot_id, country_alpha2_code, age, phone, has_marketing_email_consent, has_sms_consent, parent_id, first_name, last_name)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, hubspot_id, country_alpha2_code, first_name, last_name, age, parent_id, phone, has_marketing_email_consent, has_sms_consent, created_at, updated_at
`

type CreateUserParams struct {
	HubspotID                sql.NullString `json:"hubspot_id"`
	CountryAlpha2Code        string         `json:"country_alpha2_code"`
	Age                      int32          `json:"age"`
	Phone                    sql.NullString `json:"phone"`
	HasMarketingEmailConsent bool           `json:"has_marketing_email_consent"`
	HasSmsConsent            bool           `json:"has_sms_consent"`
	ParentID                 uuid.NullUUID  `json:"parent_id"`
	FirstName                string         `json:"first_name"`
	LastName                 string         `json:"last_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (UsersUser, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.HubspotID,
		arg.CountryAlpha2Code,
		arg.Age,
		arg.Phone,
		arg.HasMarketingEmailConsent,
		arg.HasSmsConsent,
		arg.ParentID,
		arg.FirstName,
		arg.LastName,
	)
	var i UsersUser
	err := row.Scan(
		&i.ID,
		&i.HubspotID,
		&i.CountryAlpha2Code,
		&i.FirstName,
		&i.LastName,
		&i.Age,
		&i.ParentID,
		&i.Phone,
		&i.HasMarketingEmailConsent,
		&i.HasSmsConsent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByHubSpotID = `-- name: GetUserByHubSpotID :one
SELECT id, hubspot_id, country_alpha2_code, first_name, last_name, age, parent_id, phone, has_marketing_email_consent, has_sms_consent, created_at, updated_at
from users.users
WHERE hubspot_id = $1
`

func (q *Queries) GetUserByHubSpotID(ctx context.Context, hubspotID sql.NullString) (UsersUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByHubSpotID, hubspotID)
	var i UsersUser
	err := row.Scan(
		&i.ID,
		&i.HubspotID,
		&i.CountryAlpha2Code,
		&i.FirstName,
		&i.LastName,
		&i.Age,
		&i.ParentID,
		&i.Phone,
		&i.HasMarketingEmailConsent,
		&i.HasSmsConsent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUserID = `-- name: GetUserByUserID :one
SELECT id, hubspot_id, country_alpha2_code, first_name, last_name, age, parent_id, phone, has_marketing_email_consent, has_sms_consent, created_at, updated_at
FROM users.users
WHERE id = $1
`

func (q *Queries) GetUserByUserID(ctx context.Context, id uuid.UUID) (UsersUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByUserID, id)
	var i UsersUser
	err := row.Scan(
		&i.ID,
		&i.HubspotID,
		&i.CountryAlpha2Code,
		&i.FirstName,
		&i.LastName,
		&i.Age,
		&i.ParentID,
		&i.Phone,
		&i.HasMarketingEmailConsent,
		&i.HasSmsConsent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserHubspotId = `-- name: UpdateUserHubspotId :execrows
UPDATE users.users
SET hubspot_id = $1
WHERE id = $2
`

type UpdateUserHubspotIdParams struct {
	HubspotID sql.NullString `json:"hubspot_id"`
	ID        uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateUserHubspotId(ctx context.Context, arg UpdateUserHubspotIdParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateUserHubspotId, arg.HubspotID, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
