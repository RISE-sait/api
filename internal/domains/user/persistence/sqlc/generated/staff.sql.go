// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: staff.sql

package db_user

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const deleteStaff = `-- name: DeleteStaff :execrows
DELETE FROM users.staff WHERE id = $1
`

func (q *Queries) DeleteStaff(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteStaff, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getStaffByID = `-- name: GetStaffByID :one
SELECT s.id, is_active, created_at, updated_at, role_id, sr.id, role_name, sr.role_name FROM users.staff s
JOIN users.staff_roles sr ON s.role_id = sr.id
WHERE s.id = $1
`

type GetStaffByIDRow struct {
	ID         uuid.UUID `json:"id"`
	IsActive   bool      `json:"is_active"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
	RoleID     uuid.UUID `json:"role_id"`
	ID_2       uuid.UUID `json:"id_2"`
	RoleName   string    `json:"role_name"`
	RoleName_2 string    `json:"role_name_2"`
}

func (q *Queries) GetStaffByID(ctx context.Context, id uuid.UUID) (GetStaffByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getStaffByID, id)
	var i GetStaffByIDRow
	err := row.Scan(
		&i.ID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoleID,
		&i.ID_2,
		&i.RoleName,
		&i.RoleName_2,
	)
	return i, err
}

const getStaffs = `-- name: GetStaffs :many
SELECT s.id, s.is_active, s.created_at, s.updated_at, s.role_id, u.hubspot_id, sr.role_name FROM users.staff s
JOIN users.users u ON u.id = s.id
JOIN users.staff_roles sr ON s.role_id = sr.id
WHERE
(sr.role_name = $1 OR $1 IS NULL)
    AND
    (hubspot_id = ANY($2::text[]) OR $2 IS NULL)
`

type GetStaffsParams struct {
	Role       sql.NullString `json:"role"`
	HubspotIds []string       `json:"hubspot_ids"`
}

type GetStaffsRow struct {
	ID        uuid.UUID `json:"id"`
	IsActive  bool      `json:"is_active"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	RoleID    uuid.UUID `json:"role_id"`
	HubspotID string    `json:"hubspot_id"`
	RoleName  string    `json:"role_name"`
}

func (q *Queries) GetStaffs(ctx context.Context, arg GetStaffsParams) ([]GetStaffsRow, error) {
	rows, err := q.db.QueryContext(ctx, getStaffs, arg.Role, pq.Array(arg.HubspotIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStaffsRow
	for rows.Next() {
		var i GetStaffsRow
		if err := rows.Scan(
			&i.ID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RoleID,
			&i.HubspotID,
			&i.RoleName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStaff = `-- name: UpdateStaff :one
WITH updated_staff AS (
    UPDATE users.staff s
    SET
        role_id = (SELECT id from users.staff_roles sr WHERE sr.role_name = $1),
        is_active = $2
    WHERE s.id = $3
    RETURNING id, is_active, created_at, updated_at, role_id
)
SELECT us.id, us.is_active, us.created_at, us.updated_at, us.role_id, sr.role_name
FROM updated_staff us
JOIN users.staff_roles sr ON us.role_id = sr.id
`

type UpdateStaffParams struct {
	RoleName string    `json:"role_name"`
	IsActive bool      `json:"is_active"`
	ID       uuid.UUID `json:"id"`
}

type UpdateStaffRow struct {
	ID        uuid.UUID `json:"id"`
	IsActive  bool      `json:"is_active"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	RoleID    uuid.UUID `json:"role_id"`
	RoleName  string    `json:"role_name"`
}

func (q *Queries) UpdateStaff(ctx context.Context, arg UpdateStaffParams) (UpdateStaffRow, error) {
	row := q.db.QueryRowContext(ctx, updateStaff, arg.RoleName, arg.IsActive, arg.ID)
	var i UpdateStaffRow
	err := row.Scan(
		&i.ID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoleID,
		&i.RoleName,
	)
	return i, err
}
