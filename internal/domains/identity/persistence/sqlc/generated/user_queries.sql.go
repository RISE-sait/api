// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_queries.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :execrows
INSERT INTO users (email) VALUES ($1)
`

func (q *Queries) CreateUser(ctx context.Context, email string) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser, email)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}
