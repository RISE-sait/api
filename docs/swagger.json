{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "host": "localhost:80",
    "paths": {
        "/auth": {
            "post": {
                "description": "Authenticates a user using Firebase token and returns a JWT token for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Authenticate a user and return a JWT token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Firebase token for user verification",
                        "name": "firebase_token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User authenticated successfully",
                        "schema": {
                            "$ref": "#/definitions/identity.UserAuthenticationResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid Firebase token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/child/{hubspot_id}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Authenticates a user using Firebase token and returns a JWT token for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Authenticate a user and return a JWT token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Child HubSpotId",
                        "name": "hubspot_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User authenticated successfully",
                        "schema": {
                          "$ref": "#/definitions/identity.UserAuthenticationResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid Firebase token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/courses": {
            "get": {
                "description": "Get a list of courses",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "courses"
                ],
                "summary": "Get a list of courses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by course name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by course description",
                        "name": "description",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GetMemberships of courses retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/course.ResponseDto"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new course",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "courses"
                ],
                "summary": "Create a new course",
                "parameters": [
                    {
                        "description": "Course details",
                        "name": "course",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/course.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Course created successfully",
                        "schema": {
                            "$ref": "#/definitions/course.ResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/courses/{id}": {
            "get": {
                "description": "Get a course by HubSpotId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "courses"
                ],
                "summary": "Get a course by HubSpotId",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Course HubSpotId",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Course retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/course.ResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid HubSpotId",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Course not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a course",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "courses"
                ],
                "summary": "Update a course",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Course ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Course details",
                        "name": "course",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/course.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Course updated successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Course not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a course by HubSpotId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "courses"
                ],
                "summary": "Delete a course",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Course HubSpotId",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request: Invalid HubSpotId",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Course not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/customers": {
            "get": {
                "description": "Retrieves a list of customers, optionally filtered by HubSpot IDs.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Get customers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comma-separated list of HubSpot IDs to filter customers",
                        "name": "hubspot_ids",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of customers",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/customer.Response"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/customers/{customer_id}/stats": {
            "patch": {
                "description": "Updates customer statistics (wins, losses, etc.) for the specified customer ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Update customer statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Customer stats update data",
                        "name": "update_body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/customer.StatsUpdateRequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Customer stats updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
      "/customers/{id}/membership-plans": {
        "get": {
          "description": "Retrieves a list of membership plans associated with a specific customer, using the customer ID as a required parameter.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "customers"
          ],
          "summary": "Get membership plans by customer",
          "parameters": [
            {
              "type": "string",
              "description": "Customer ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "List of membership plans for the customer",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/customer.MembershipPlansResponseDto"
                }
              }
            },
            "400": {
              "description": "Bad Request: Invalid customer ID",
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
            },
            "404": {
              "description": "Not Found: Customer not found",
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "type": "object",
                "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/enrollments": {
            "get": {
                "description": "Get enrollments by customer and event HubSpotId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "enrollments"
                ],
                "summary": "Get enrollments by customer and event HubSpotId",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customerId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "eventId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Enrollments retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/enrollment.ResponseDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid HubSpotId",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Enrollments not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new enrollment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "enrollments"
                ],
                "summary": "Create a new enrollment",
                "parameters": [
                    {
                        "description": "Enrollment details",
                        "name": "enrollment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/enrollment.CreateRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Enrollment created successfully",
                        "schema": {
                            "$ref": "#/definitions/enrollment.ResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/enrollments/{id}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete an enrollment by HubSpotId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "enrollments"
                ],
                "summary": "Delete an enrollment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Enrollment HubSpotId",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Enrollment deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid HubSpotId",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Enrollment not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/event-staff": {
            "get": {
                "description": "Retrieve all staff assigned to an event using event_id as a query parameter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "event_staff"
                ],
                "summary": "Get staff assigned to an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID (UUID)",
                        "name": "event_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GetMemberships of staff assigned to the event",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/staff.ResponseDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Assign a staff member to an event using event_id and staff_id in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "event_staff"
                ],
                "summary": "Assign a staff member to an event",
                "parameters": [
                    {
                        "description": "Event and staff assignment details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/event_staff.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Staff successfully assigned to event",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a staff member from an event using event_id and staff_id in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "event_staff"
                ],
                "summary": "Unassign a staff member from an event",
                "parameters": [
                    {
                        "description": "Event and staff unassignment details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/event_staff.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Staff successfully unassigned from event",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "description": "Retrieve all events, with optional filters by course, location, and practice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get all events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by course ID (UUID)",
                        "name": "courseId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by location ID (UUID)",
                        "name": "locationId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by practice ID (UUID)",
                        "name": "practiceId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GetMemberships of events retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/event.ResponseDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Registers a new event with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Create a new event",
                "parameters": [
                    {
                        "description": "Event details",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/event.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Event created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/events/{id}": {
            "get": {
                "description": "Retrieves details of a specific event based on its HubSpotId.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get event details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/event.ResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid HubSpotId",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the details of an existing event.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Update an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated event details",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/event.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Event updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an event by its HubSpotId.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Delete an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Event deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid HubSpotId",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/facilities": {
            "get": {
                "description": "Retrieves a list of all facilities, optionally filtered by name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "facilities"
                ],
                "summary": "Get all facilities",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Facility name filter",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GetMemberships of facilities retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/facility.ResponseDto"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Registers a new facility with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "facilities"
                ],
                "summary": "Create a new facility",
                "parameters": [
                    {
                        "description": "Facility details",
                        "name": "facility",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/facility.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Facility created successfully",
                        "schema": {
                            "$ref": "#/definitions/facility.ResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/facilities/categories": {
            "get": {
                "description": "Retrieves a list of all facility categories.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "facility-categories"
                ],
                "summary": "Get all facility categories",
                "responses": {
                    "200": {
                        "description": "GetMemberships of facility categories retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/facility.CategoryResponseDto"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Registers a new facility category with the provided name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "facility-categories"
                ],
                "summary": "Create a new facility category",
                "parameters": [
                    {
                        "description": "Facility Category details",
                        "name": "facility_category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/facility.CategoryRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Facility category created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/facilities/categories/{id}": {
            "get": {
                "description": "Retrieves a facility category by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "facility-categories"
                ],
                "summary": "Get a facility category by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Facility Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Facility category retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/facility.CategoryResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Facility category not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the details of an existing facility category by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "facility-categories"
                ],
                "summary": "Update a facility category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Facility Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated facility category details",
                        "name": "facility_category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/facility.CategoryRequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Facility category updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Facility category not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a facility category by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "facility-categories"
                ],
                "summary": "Delete a facility category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Facility Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Facility category deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Facility category not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/facilities/{id}": {
            "get": {
                "description": "Retrieves a facility by its HubSpotId.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "facilities"
                ],
                "summary": "Get a facility by HubSpotId",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Facility HubSpotId",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Facility retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/facility.ResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid HubSpotId",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Facility not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the details of an existing facility by its HubSpotId.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "facilities"
                ],
                "summary": "Update a facility",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Facility HubSpotId",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated facility details",
                        "name": "facility",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/facility.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Facility updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Facility not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a facility by its HubSpotId.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "facilities"
                ],
                "summary": "Delete a facility",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Facility HubSpotId",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Facility deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid HubSpotId",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Facility not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/games": {
            "get": {
                "description": "Get a list of games",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "summary": "Get a list of games",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by game name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by game description",
                        "name": "description",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of games retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/game.ResponseDto"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new game",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "summary": "Create a new game",
                "parameters": [
                    {
                        "description": "Game details",
                        "name": "game",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/game.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Game created successfully",
                        "schema": {
                            "$ref": "#/definitions/game.ResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/games/{id}": {
            "get": {
                "description": "Get a game by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "summary": "Get a game by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Game ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Game retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/game.ResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Game not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a game",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "summary": "Update a game",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Game ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Game details",
                        "name": "game",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/game.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Game updated successfully",
                        "schema": {
                            "$ref": "#/definitions/game.ResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Game not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a game by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "summary": "Delete a game",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Game ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Game deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Game not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/haircuts": {
            "get": {
                "description": "Retrieves all haircut images from a folder in S3. Optionally, specify a barber name to get images from that barber's folder.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "haircut"
                ],
                "summary": "Retrieve haircut images",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Barber name to filter images",
                        "name": "barber",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of image URLs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Uploads a haircut image to S3 and returns the object URL.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "haircut"
                ],
                "summary": "Upload a haircut image",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Haircut image to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File uploaded successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/haircuts/events": {
            "get": {
                "description": "Retrieve all barber events, with optional filters by barber ID and customer ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "haircut"
                ],
                "summary": "Get all barber events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by barber ID",
                        "name": "barber_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by customer ID",
                        "name": "customer_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of barber events retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/haircut.ResponseDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Registers a new barber event with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "haircut"
                ],
                "summary": "Create a new barber event",
                "parameters": [
                    {
                        "description": "Barber event details",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/haircut.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Barber event created successfully",
                        "schema": {
                            "$ref": "#/definitions/haircut.ResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/haircuts/events/{id}": {
            "get": {
                "description": "Retrieves details of a specific barber event based on its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "haircut"
                ],
                "summary": "Get barber event details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Barber event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Barber event details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/haircut.ResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Barber event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the details of an existing barber event.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "haircut"
                ],
                "summary": "Update a barber event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Barber event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated barber event details",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/haircut.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Barber event updated successfully",
                        "schema": {
                            "$ref": "#/definitions/haircut.ResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Barber event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a barber event by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "haircut"
                ],
                "summary": "Delete a barber event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Barber event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Barber event deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Barber event not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
      "/memberships": {
            "get": {
              "description": "Get a list of memberships",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                  "memberships"
                ],
              "summary": "Get a list of memberships",
                "responses": {
                    "200": {
                      "description": "GetMemberships of memberships retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                              "$ref": "#/definitions/membership.Response"
                            }
                        }
                    },
                  "500": {
                    "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                  }
                }
            },
        "post": {
          "security": [
            {
              "Bearer": []
            }
          ],
          "description": "Create a new membership",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "memberships"
          ],
          "summary": "Create a new membership",
          "parameters": [
            {
              "description": "Membership details",
              "name": "membership",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/membership.RequestDto"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Membership created successfully"
            },
            "400": {
              "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
        }
      },
      "/memberships/plans": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new membership plan",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "membership-plans"
                ],
                "summary": "Create a new membership plan",
                "parameters": [
                    {
                        "description": "Membership plan details",
                        "name": "plan",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/membership_plan.PlanRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Membership plan created successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
      "/memberships/plans/payment-frequencies": {
        "get": {
          "description": "Retrieves a list of available payment frequencies for membership plans.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "membership-plans"
          ],
          "summary": "Get payment frequencies for membership plans",
          "responses": {
            "200": {
              "description": "List of payment frequencies",
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        }
      },
      "/memberships/plans/{id}": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a membership plan",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "membership-plans"
                ],
                "summary": "Update a membership plan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Membership plan details",
                        "name": "plan",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/membership_plan.PlanRequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Membership plan updated successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Membership plan not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
              "description": "Delete a membership plan by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "membership-plans"
                ],
                "summary": "Delete a membership plan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Membership plan deleted successfully"
                    },
                    "400": {
                      "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Membership plan not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/memberships/{id}": {
            "get": {
              "description": "Get a membership by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memberships"
                ],
              "summary": "Get a membership by ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"",
                        "description": "Membership ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Membership retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/membership.Response"
                        }
                    },
                    "400": {
                      "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Membership not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a membership",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memberships"
                ],
                "summary": "Update a membership",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"",
                        "description": "Membership ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Membership details",
                        "name": "membership",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/membership.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Membership updated successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Membership not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
              "description": "Delete a membership by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "memberships"
                ],
                "summary": "Delete a membership",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"",
                        "description": "Membership ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Membership deleted successfully"
                    },
                    "400": {
                      "description": "Bad Request: Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Membership not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                  "500": {
                    "description": "Internal Server Error",
                    "schema": {
                      "type": "object",
                      "additionalProperties": true
                    }
                  }
                }
            }
        },
      "/memberships/{id}/plans": {
        "get": {
          "description": "Get membership plans by membership ID",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "membership-plans"
          ],
          "summary": "Get membership plans by membership ID",
          "parameters": [
            {
              "type": "string",
              "example": "\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"",
              "description": "Membership ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "GetMemberships of membership plans retrieved successfully",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/membership_plan.PlanResponse"
                }
              }
            },
            "400": {
              "description": "Bad Request: Invalid membership ID",
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
            },
            "404": {
              "description": "Not Found: Membership plans not found",
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/practices": {
            "get": {
                "description": "Get a list of practices",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "practices"
                ],
                "summary": "Get a list of practices",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by practice name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by practice description",
                        "name": "description",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GetMemberships of practices retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.PracticeResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new practice",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "practices"
                ],
                "summary": "Create a new practice",
                "parameters": [
                    {
                        "description": "Practice details",
                        "name": "practice",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PracticeRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Practice created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.PracticeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/practices/{id}": {
            "put": {
                "description": "Update a practice",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "practices"
                ],
                "summary": "Update a practice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Practice HubSpotId",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Practice details",
                        "name": "practice",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PracticeRequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Practice updated successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Practice not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a practice by HubSpotId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "practices"
                ],
                "summary": "Delete a practice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Practice HubSpotId",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Practice deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid HubSpotId",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Practice not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/practices/{name}": {
            "get": {
                "description": "Get a practice by name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "practices"
                ],
                "summary": "Get a practice by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Practice Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Practice retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.PracticeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid Name",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Practice not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/purchases/memberships": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Allows a customer to purchase a membership plan by providing the plan details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchases"
                ],
                "summary": "Purchase a membership plan",
                "parameters": [
                    {
                        "description": "Membership purchase details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/purchase.MembershipPlanRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Membership purchased successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to process membership purchase",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/register/customer": {
            "post": {
              "description": "Registers a new customer by verifying the Firebase token and creating an account based on the provided details. The registration can either be for an athlete or a parent, depending on the specified role in the request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registration"
                ],
                "summary": "Register a new customer",
                "parameters": [
                    {
                        "description": "Customer registration details",
                        "name": "customer",
                        "in": "body",
                        "required": true,
                        "schema": {
                          "$ref": "#/definitions/identity.CustomerRegistrationRequestDto"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Firebase token for user verification",
                        "name": "firebase_token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                      "description": "Customer registered successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                      "description": "Bad Request: Missing or invalid Firebase token or request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                      "description": "Internal Server Error: Failed to register customer",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/register/staff": {
            "post": {
                "description": "Creates a new staff account in the system using the provided registration details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registration"
                ],
                "summary": "Register a new staff member",
                "parameters": [
                    {
                        "description": "Staff registration details",
                        "name": "staff",
                        "in": "body",
                        "required": true,
                        "schema": {
                          "$ref": "#/definitions/identity.StaffRegistrationRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Staff registered successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Invalid or missing authentication token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to register staff",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/staffs": {
            "get": {
                "description": "Retrieves staff members based on optional filters like role or HubSpot IDs.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staff"
                ],
                "summary": "Get a list of staff members",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"Coach\"",
                        "description": "Role name to filter staff",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"123,456,789\"",
                        "description": "Comma-separated HubSpot IDs",
                        "name": "hubspot_ids",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of staff members retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/staff.ResponseDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/staffs/{id}": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a staff member",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staff"
                ],
                "summary": "Update a staff member",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"",
                        "description": "Staff HubSpotId",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Staff details",
                        "name": "staff",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/staff.RequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Staff updated successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Staff not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a staff member by HubSpotId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staff"
                ],
                "summary": "Delete a staff member",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"",
                        "description": "Staff HubSpotId",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content: Staff deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request: Invalid HubSpotId",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Staff not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/{email}": {
            "get": {
                "description": "Retrieves a repository using their email address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a repository by email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Customer retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/hubspot.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid Email",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Customer not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/{email}/children": {
            "get": {
                "description": "Retrieves a repository's children using the parent's email address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a repository's children by parent email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Parent Email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Customer's children retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/hubspot.UserResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid Email",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found: Parent or children not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "course.RequestDto": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "course.ResponseDto": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
      "customer.MembershipPlansResponseDto": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "membership_name": {
            "type": "string"
          },
          "membership_plan_id": {
            "type": "string"
          },
          "renewal_date": {
            "type": "string"
          },
          "start_date": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
                }
            }
        },
        "customer.Response": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "hubspot_id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "profile_pic": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "customer.StatsUpdateRequestDto": {
            "type": "object",
            "properties": {
                "assists": {
                    "type": "integer"
                },
                "losses": {
                    "type": "integer"
                },
                "points": {
                    "type": "integer"
                },
                "rebounds": {
                    "type": "integer"
                },
                "steals": {
                    "type": "integer"
                },
                "wins": {
                    "type": "integer"
                }
            }
        },
        "customer.WaiverSigningRequestDto": {
            "type": "object",
            "required": [
                "waiver_url"
            ],
            "properties": {
                "is_waiver_signed": {
                    "type": "boolean"
                },
                "waiver_url": {
                    "type": "string"
                }
            }
        },
        "dto.PracticeRequestDto": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.PracticeResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "enrollment.CreateRequestDto": {
            "type": "object",
            "required": [
                "customer_id",
                "event_id"
            ],
            "properties": {
                "customer_id": {
                    "type": "string"
                },
                "event_id": {
                    "type": "string"
                }
            }
        },
        "enrollment.ResponseDto": {
            "type": "object",
            "properties": {
                "checked_in_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "string"
                },
                "event_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_cancelled": {
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "event.RequestDto": {
            "type": "object",
            "required": [
                "day",
                "event_end_at",
                "event_start_at",
                "session_end_time",
                "session_start_time"
            ],
            "properties": {
                "course_id": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "day": {
                    "type": "string",
                    "example": "THURSDAY"
                },
                "event_end_at": {
                    "type": "string",
                    "example": "2023-10-05T07:00:00Z"
                },
                "event_start_at": {
                    "type": "string",
                    "example": "2023-10-05T07:00:00Z"
                },
                "game_id": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "location_id": {
                    "type": "string",
                    "example": "0bab3927-50eb-42b3-9d6b-2350dd00a100"
                },
                "practice_id": {
                    "type": "string",
                    "example": "f0e21457-75d4-4de6-b765-5ee13221fd72"
                },
                "session_end_time": {
                    "type": "string",
                    "example": "23:00:00+00:00"
                },
                "session_start_time": {
                    "type": "string",
                    "example": "23:00:00+00:00"
                }
            }
        },
        "event.ResponseDto": {
            "type": "object",
            "properties": {
                "course_id": {
                    "type": "string"
                },
                "day": {
                    "type": "string"
                },
                "event_end_at": {
                    "type": "string"
                },
                "event_start_at": {
                    "type": "string"
                },
                "game_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "location_id": {
                    "type": "string"
                },
                "practice_id": {
                    "type": "string"
                },
                "session_end_at": {
                    "type": "string"
                },
                "session_start_at": {
                    "type": "string"
                }
            }
        },
        "event_staff.EventStaffBase": {
            "type": "object",
            "properties": {
                "event_id": {
                    "type": "string"
                },
                "staff_id": {
                    "type": "string"
                }
            }
        },
        "event_staff.RequestDto": {
            "type": "object",
            "properties": {
                "base": {
                    "$ref": "#/definitions/event_staff.EventStaffBase"
                }
            }
        },
        "facility.CategoryRequestDto": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "facility.CategoryResponseDto": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "facility.RequestDto": {
            "type": "object",
            "required": [
                "facility_type_id",
                "location",
                "name"
            ],
            "properties": {
                "facility_type_id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "facility.ResponseDto": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "facility_category": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "game.RequestDto": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "video_link": {
                    "type": "string"
                }
            }
        },
        "game.ResponseDto": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "video_link": {
                    "type": "string"
                }
            }
        },
        "haircut.RequestDto": {
            "type": "object",
            "required": [
                "begin_time",
                "end_time"
            ],
            "properties": {
                "barber_id": {
                    "type": "string",
                    "example": "f0e21457-75d4-4de6-b765-5ee13221fd72"
                },
                "begin_time": {
                    "type": "string",
                    "example": "2023-10-05T07:00:00Z"
                },
                "customer_id": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "end_time": {
                    "type": "string",
                    "example": "2023-10-05T07:00:00Z"
                }
            }
        },
        "haircut.ResponseDto": {
            "type": "object",
            "properties": {
                "barber_id": {
                    "type": "string"
                },
                "begin_time": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "hubspot.UserAssociation": {
            "type": "object",
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/hubspot.UserAssociationResult"
                    }
                }
            }
        },
        "hubspot.UserAssociationResult": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "hubspot.UserAssociations": {
            "type": "object",
            "properties": {
                "contacts": {
                    "$ref": "#/definitions/hubspot.UserAssociation"
                }
            }
        },
        "hubspot.UserProps": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "hubspot.UserResponse": {
            "type": "object",
            "properties": {
                "associations": {
                    "$ref": "#/definitions/hubspot.UserAssociations"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "properties": {
                    "$ref": "#/definitions/hubspot.UserProps"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
      "identity.CustomerRegistrationRequestDto": {
            "type": "object",
        "required": [
          "age",
          "first_name",
          "last_name",
          "role"
        ],
            "properties": {
                "age": {
                    "type": "integer"
                },
                "first_name": {
                    "type": "string"
                },
              "has_consent_to_email_marketing": {
                "type": "boolean"
              },
              "has_consent_to_sms": {
                "type": "boolean"
              },
                "last_name": {
                    "type": "string"
                },
              "phone_number": {
                "type": "string",
                "example": "+15141234567"
                },
                "role": {
                    "type": "string"
                },
              "waivers": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/customer.WaiverSigningRequestDto"
                }
                }
            }
        },
      "identity.StaffRegistrationRequestDto": {
            "type": "object",
            "required": [
                "age",
                "first_name",
              "last_name",
              "role"
            ],
            "properties": {
                "age": {
                    "type": "integer"
                },
              "first_name": {
                "type": "string"
              },
              "is_active_staff": {
                "type": "boolean"
              },
              "last_name": {
                "type": "string"
              },
              "phone_number": {
                "type": "string",
                "example": "+15141234567"
              },
              "role": {
                "type": "string"
              }
            }
      },
      "identity.UserAuthenticationResponseDto": {
        "type": "object",
        "properties": {
          "age": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
          "phone": {
            "type": "string"
          },
          "role": {
            "type": "string"
                }
            }
        },
        "membership.RequestDto": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Access to all premium features"
                },
                "name": {
                    "type": "string",
                    "example": "Premium Membership"
                }
            }
        },
        "membership.Response": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "membership_plan.PlanRequestDto": {
            "type": "object",
            "required": [
                "membership_id",
                "price"
            ],
            "properties": {
                "amt_periods": {
                    "type": "integer"
                },
                "membership_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "payment_frequency": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                }
            }
        },
        "membership_plan.PlanResponse": {
            "type": "object",
            "properties": {
                "amt_periods": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "membership_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "payment_frequency": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                }
            }
        },
        "purchase.MembershipPlanRequestDto": {
            "type": "object",
            "required": [
                "start_date"
            ],
            "properties": {
                "membership_plan_id": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "staff.RequestDto": {
            "type": "object",
            "required": [
                "is_active",
                "role_name"
            ],
            "properties": {
                "is_active": {
                    "type": "boolean"
                },
                "role_name": {
                    "type": "string"
                }
            }
        },
        "staff.ResponseDto": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "hubspot_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "description": "Indicates if the staff is still an active employee",
                    "type": "boolean"
                },
                "last_name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "role_id": {
                    "type": "string"
                },
                "role_name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}