// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_queries.sql

package db_user

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getUserIDByHubSpotId = `-- name: GetUserIDByHubSpotId :one
SELECT id FROM users.users WHERE hubspot_id = $1
`

func (q *Queries) GetUserIDByHubSpotId(ctx context.Context, hubspotID sql.NullString) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserIDByHubSpotId, hubspotID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, hubspot_id, profile_pic_url, wins, losses, points, steals, assists, rebounds, created_at, updated_at FROM users.users
`

func (q *Queries) GetUsers(ctx context.Context) ([]UsersUser, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUser
	for rows.Next() {
		var i UsersUser
		if err := rows.Scan(
			&i.ID,
			&i.HubspotID,
			&i.ProfilePicUrl,
			&i.Wins,
			&i.Losses,
			&i.Points,
			&i.Steals,
			&i.Assists,
			&i.Rebounds,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
