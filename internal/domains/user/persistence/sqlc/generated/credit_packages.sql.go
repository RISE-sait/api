// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: credit_packages.sql

package db_user

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCreditPackage = `-- name: CreateCreditPackage :one
INSERT INTO users.credit_packages (
    name,
    description,
    stripe_price_id,
    credit_allocation,
    weekly_credit_limit
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, name, description, stripe_price_id, credit_allocation, weekly_credit_limit, created_at, updated_at
`

type CreateCreditPackageParams struct {
	Name              string         `json:"name"`
	Description       sql.NullString `json:"description"`
	StripePriceID     string         `json:"stripe_price_id"`
	CreditAllocation  int32          `json:"credit_allocation"`
	WeeklyCreditLimit int32          `json:"weekly_credit_limit"`
}

func (q *Queries) CreateCreditPackage(ctx context.Context, arg CreateCreditPackageParams) (UsersCreditPackage, error) {
	row := q.db.QueryRowContext(ctx, createCreditPackage,
		arg.Name,
		arg.Description,
		arg.StripePriceID,
		arg.CreditAllocation,
		arg.WeeklyCreditLimit,
	)
	var i UsersCreditPackage
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StripePriceID,
		&i.CreditAllocation,
		&i.WeeklyCreditLimit,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCreditPackage = `-- name: DeleteCreditPackage :exec
DELETE FROM users.credit_packages
WHERE id = $1
`

func (q *Queries) DeleteCreditPackage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCreditPackage, id)
	return err
}

const deleteCustomerActiveCreditPackage = `-- name: DeleteCustomerActiveCreditPackage :exec
DELETE FROM users.customer_active_credit_package
WHERE customer_id = $1
`

func (q *Queries) DeleteCustomerActiveCreditPackage(ctx context.Context, customerID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCustomerActiveCreditPackage, customerID)
	return err
}

const getAllCreditPackages = `-- name: GetAllCreditPackages :many
SELECT id, name, description, stripe_price_id, credit_allocation, weekly_credit_limit, created_at, updated_at FROM users.credit_packages
ORDER BY credit_allocation ASC
`

func (q *Queries) GetAllCreditPackages(ctx context.Context) ([]UsersCreditPackage, error) {
	rows, err := q.db.QueryContext(ctx, getAllCreditPackages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersCreditPackage
	for rows.Next() {
		var i UsersCreditPackage
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.StripePriceID,
			&i.CreditAllocation,
			&i.WeeklyCreditLimit,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCreditPackageByID = `-- name: GetCreditPackageByID :one
SELECT id, name, description, stripe_price_id, credit_allocation, weekly_credit_limit, created_at, updated_at FROM users.credit_packages
WHERE id = $1
`

func (q *Queries) GetCreditPackageByID(ctx context.Context, id uuid.UUID) (UsersCreditPackage, error) {
	row := q.db.QueryRowContext(ctx, getCreditPackageByID, id)
	var i UsersCreditPackage
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StripePriceID,
		&i.CreditAllocation,
		&i.WeeklyCreditLimit,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCreditPackageByStripePriceID = `-- name: GetCreditPackageByStripePriceID :one
SELECT id, name, description, stripe_price_id, credit_allocation, weekly_credit_limit, created_at, updated_at FROM users.credit_packages
WHERE stripe_price_id = $1
`

func (q *Queries) GetCreditPackageByStripePriceID(ctx context.Context, stripePriceID string) (UsersCreditPackage, error) {
	row := q.db.QueryRowContext(ctx, getCreditPackageByStripePriceID, stripePriceID)
	var i UsersCreditPackage
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StripePriceID,
		&i.CreditAllocation,
		&i.WeeklyCreditLimit,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerActiveCreditPackage = `-- name: GetCustomerActiveCreditPackage :one
SELECT cacp.customer_id, cacp.credit_package_id, cacp.weekly_credit_limit, cacp.purchased_at, cacp.updated_at, cp.name as package_name, cp.credit_allocation
FROM users.customer_active_credit_package cacp
JOIN users.credit_packages cp ON cacp.credit_package_id = cp.id
WHERE cacp.customer_id = $1
`

type GetCustomerActiveCreditPackageRow struct {
	CustomerID        uuid.UUID `json:"customer_id"`
	CreditPackageID   uuid.UUID `json:"credit_package_id"`
	WeeklyCreditLimit int32     `json:"weekly_credit_limit"`
	PurchasedAt       time.Time `json:"purchased_at"`
	UpdatedAt         time.Time `json:"updated_at"`
	PackageName       string    `json:"package_name"`
	CreditAllocation  int32     `json:"credit_allocation"`
}

func (q *Queries) GetCustomerActiveCreditPackage(ctx context.Context, customerID uuid.UUID) (GetCustomerActiveCreditPackageRow, error) {
	row := q.db.QueryRowContext(ctx, getCustomerActiveCreditPackage, customerID)
	var i GetCustomerActiveCreditPackageRow
	err := row.Scan(
		&i.CustomerID,
		&i.CreditPackageID,
		&i.WeeklyCreditLimit,
		&i.PurchasedAt,
		&i.UpdatedAt,
		&i.PackageName,
		&i.CreditAllocation,
	)
	return i, err
}

const setCustomerActiveCreditPackage = `-- name: SetCustomerActiveCreditPackage :exec
INSERT INTO users.customer_active_credit_package (
    customer_id,
    credit_package_id,
    weekly_credit_limit,
    purchased_at
) VALUES (
    $1, $2, $3, CURRENT_TIMESTAMP
)
ON CONFLICT (customer_id) DO UPDATE SET
    credit_package_id = $2,
    weekly_credit_limit = $3,
    purchased_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
`

type SetCustomerActiveCreditPackageParams struct {
	CustomerID        uuid.UUID `json:"customer_id"`
	CreditPackageID   uuid.UUID `json:"credit_package_id"`
	WeeklyCreditLimit int32     `json:"weekly_credit_limit"`
}

func (q *Queries) SetCustomerActiveCreditPackage(ctx context.Context, arg SetCustomerActiveCreditPackageParams) error {
	_, err := q.db.ExecContext(ctx, setCustomerActiveCreditPackage, arg.CustomerID, arg.CreditPackageID, arg.WeeklyCreditLimit)
	return err
}

const updateCreditPackage = `-- name: UpdateCreditPackage :one
UPDATE users.credit_packages
SET name = $2,
    description = $3,
    stripe_price_id = $4,
    credit_allocation = $5,
    weekly_credit_limit = $6,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, description, stripe_price_id, credit_allocation, weekly_credit_limit, created_at, updated_at
`

type UpdateCreditPackageParams struct {
	ID                uuid.UUID      `json:"id"`
	Name              string         `json:"name"`
	Description       sql.NullString `json:"description"`
	StripePriceID     string         `json:"stripe_price_id"`
	CreditAllocation  int32          `json:"credit_allocation"`
	WeeklyCreditLimit int32          `json:"weekly_credit_limit"`
}

func (q *Queries) UpdateCreditPackage(ctx context.Context, arg UpdateCreditPackageParams) (UsersCreditPackage, error) {
	row := q.db.QueryRowContext(ctx, updateCreditPackage,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.StripePriceID,
		arg.CreditAllocation,
		arg.WeeklyCreditLimit,
	)
	var i UsersCreditPackage
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StripePriceID,
		&i.CreditAllocation,
		&i.WeeklyCreditLimit,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
