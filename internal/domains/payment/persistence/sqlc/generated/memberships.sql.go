// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: memberships.sql

package db_payment

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const checkCustomerActiveMembership = `-- name: CheckCustomerActiveMembership :one
SELECT COUNT(*) as active_count
FROM users.customer_membership_plans
WHERE customer_id = $1 
  AND membership_plan_id = $2 
  AND status = 'active'
  AND (renewal_date IS NULL OR renewal_date > NOW())
`

type CheckCustomerActiveMembershipParams struct {
	CustomerID       uuid.UUID `json:"customer_id"`
	MembershipPlanID uuid.UUID `json:"membership_plan_id"`
}

func (q *Queries) CheckCustomerActiveMembership(ctx context.Context, arg CheckCustomerActiveMembershipParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkCustomerActiveMembership, arg.CustomerID, arg.MembershipPlanID)
	var active_count int64
	err := row.Scan(&active_count)
	return active_count, err
}

const createCustomerMembershipPlan = `-- name: CreateCustomerMembershipPlan :exec
INSERT INTO users.customer_membership_plans (customer_id, membership_plan_id, status, start_date, renewal_date)
VALUES ($1, $2, $3, $4, $5)
`

type CreateCustomerMembershipPlanParams struct {
	CustomerID       uuid.UUID                  `json:"customer_id"`
	MembershipPlanID uuid.UUID                  `json:"membership_plan_id"`
	Status           MembershipMembershipStatus `json:"status"`
	StartDate        time.Time                  `json:"start_date"`
	RenewalDate      sql.NullTime               `json:"renewal_date"`
}

func (q *Queries) CreateCustomerMembershipPlan(ctx context.Context, arg CreateCustomerMembershipPlanParams) error {
	_, err := q.db.ExecContext(ctx, createCustomerMembershipPlan,
		arg.CustomerID,
		arg.MembershipPlanID,
		arg.Status,
		arg.StartDate,
		arg.RenewalDate,
	)
	return err
}

const getMembershipPlanByStripePriceId = `-- name: GetMembershipPlanByStripePriceId :one
SELECT mp.id, mp.amt_periods
FROM membership.membership_plans mp
         LEFT JOIN membership.memberships m ON m.id = mp.membership_id
WHERE mp.stripe_price_id = $1
`

type GetMembershipPlanByStripePriceIdRow struct {
	ID         uuid.UUID     `json:"id"`
	AmtPeriods sql.NullInt32 `json:"amt_periods"`
}

func (q *Queries) GetMembershipPlanByStripePriceId(ctx context.Context, stripePriceID string) (GetMembershipPlanByStripePriceIdRow, error) {
	row := q.db.QueryRowContext(ctx, getMembershipPlanByStripePriceId, stripePriceID)
	var i GetMembershipPlanByStripePriceIdRow
	err := row.Scan(&i.ID, &i.AmtPeriods)
	return i, err
}

const getMembershipPlanJoiningRequirements = `-- name: GetMembershipPlanJoiningRequirements :one
SELECT id, name, stripe_price_id, stripe_joining_fee_id, membership_id, amt_periods, created_at, updated_at, unit_amount, currency, interval
FROM membership.membership_plans
WHERE id = $1
`

func (q *Queries) GetMembershipPlanJoiningRequirements(ctx context.Context, id uuid.UUID) (MembershipMembershipPlan, error) {
	row := q.db.QueryRowContext(ctx, getMembershipPlanJoiningRequirements, id)
	var i MembershipMembershipPlan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StripePriceID,
		&i.StripeJoiningFeeID,
		&i.MembershipID,
		&i.AmtPeriods,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UnitAmount,
		&i.Currency,
		&i.Interval,
	)
	return i, err
}
