// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customer_queries.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getCustomers = `-- name: GetCustomers :many
SELECT
    cu.user_id as customer_id,
    oi.first_name,
    oi.last_name,
    oi.phone,

    u.email,
    ce.is_cancelled as is_event_booking_cancelled,
    ce.checked_in_at
FROM
    customers cu
    JOIN users u ON cu.user_id = u.id
    JOIN user_optional_info oi ON u.id = oi.id
    JOIN customer_events ce ON cu.user_id = ce.customer_id
WHERE (
        ce.event_id = $1
        OR $1 IS NULL
    )
`

type GetCustomersRow struct {
	CustomerID              uuid.UUID      `json:"customer_id"`
	FirstName               sql.NullString `json:"first_name"`
	LastName                sql.NullString `json:"last_name"`
	Phone                   sql.NullString `json:"phone"`
	Email                   string         `json:"email"`
	IsEventBookingCancelled sql.NullBool   `json:"is_event_booking_cancelled"`
	CheckedInAt             sql.NullTime   `json:"checked_in_at"`
}

func (q *Queries) GetCustomers(ctx context.Context, eventID uuid.NullUUID) ([]GetCustomersRow, error) {
	rows, err := q.db.QueryContext(ctx, getCustomers, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCustomersRow
	for rows.Next() {
		var i GetCustomersRow
		if err := rows.Scan(
			&i.CustomerID,
			&i.FirstName,
			&i.LastName,
			&i.Phone,
			&i.Email,
			&i.IsEventBookingCancelled,
			&i.CheckedInAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
