// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: waivers.sql

package db_identity

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createWaiverSignedStatus = `-- name: CreateWaiverSignedStatus :execrows
WITH prepared_data as (SELECT unnest($1::uuid[])    as user_id,
                              unnest($2::text[]) as waiver_url,
                              unnest($3::bool[])  as is_signed)
INSERT INTO waiver.waiver_signing (user_id, waiver_id, is_signed)
SELECT p.user_id, w.id, p.is_signed
FROM prepared_data p
         LEFT JOIN waiver.waiver w ON w.waiver_url = p.waiver_url
`

type CreateWaiverSignedStatusParams struct {
	UserIDArray    []uuid.UUID `json:"user_id_array"`
	WaiverUrlArray []string    `json:"waiver_url_array"`
	IsSignedArray  []bool      `json:"is_signed_array"`
}

func (q *Queries) CreateWaiverSignedStatus(ctx context.Context, arg CreateWaiverSignedStatusParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createWaiverSignedStatus, pq.Array(arg.UserIDArray), pq.Array(arg.WaiverUrlArray), pq.Array(arg.IsSignedArray))
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getRequiredWaivers = `-- name: GetRequiredWaivers :many
SELECT id, waiver_url, waiver_name, created_at, updated_at
FROM waiver.waiver
`

func (q *Queries) GetRequiredWaivers(ctx context.Context) ([]WaiverWaiver, error) {
	rows, err := q.db.QueryContext(ctx, getRequiredWaivers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WaiverWaiver
	for rows.Next() {
		var i WaiverWaiver
		if err := rows.Scan(
			&i.ID,
			&i.WaiverUrl,
			&i.WaiverName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
