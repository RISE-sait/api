// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package practice_db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type MembershipStatus string

const (
	MembershipStatusActive   MembershipStatus = "active"
	MembershipStatusInactive MembershipStatus = "inactive"
	MembershipStatusCanceled MembershipStatus = "canceled"
	MembershipStatusExpired  MembershipStatus = "expired"
)

func (e *MembershipStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MembershipStatus(s)
	case string:
		*e = MembershipStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for MembershipStatus: %T", src)
	}
	return nil
}

type NullMembershipStatus struct {
	MembershipStatus MembershipStatus
	Valid            bool // Valid is true if MembershipStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMembershipStatus) Scan(value interface{}) error {
	if value == nil {
		ns.MembershipStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MembershipStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMembershipStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MembershipStatus), nil
}

type PaymentFrequency string

const (
	PaymentFrequencyOnce  PaymentFrequency = "once"
	PaymentFrequencyWeek  PaymentFrequency = "week"
	PaymentFrequencyMonth PaymentFrequency = "month"
	PaymentFrequencyDay   PaymentFrequency = "day"
)

func (e *PaymentFrequency) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentFrequency(s)
	case string:
		*e = PaymentFrequency(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentFrequency: %T", src)
	}
	return nil
}

type NullPaymentFrequency struct {
	PaymentFrequency PaymentFrequency
	Valid            bool // Valid is true if PaymentFrequency is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentFrequency) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentFrequency, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentFrequency.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentFrequency) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentFrequency), nil
}

type PracticeLevel string

const (
	PracticeLevelBeginner     PracticeLevel = "beginner"
	PracticeLevelIntermediate PracticeLevel = "intermediate"
	PracticeLevelAdvanced     PracticeLevel = "advanced"
	PracticeLevelAll          PracticeLevel = "all"
)

func (e *PracticeLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PracticeLevel(s)
	case string:
		*e = PracticeLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for PracticeLevel: %T", src)
	}
	return nil
}

type NullPracticeLevel struct {
	PracticeLevel PracticeLevel
	Valid         bool // Valid is true if PracticeLevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPracticeLevel) Scan(value interface{}) error {
	if value == nil {
		ns.PracticeLevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PracticeLevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPracticeLevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PracticeLevel), nil
}

type BarberBarberEvent struct {
	ID            uuid.UUID
	BeginDateTime time.Time
	EndDateTime   time.Time
	CustomerID    uuid.UUID
	BarberID      uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

type CourseCourse struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	Capacity    int32
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

type CourseMembership struct {
	CourseID        uuid.UUID
	MembershipID    uuid.UUID
	PricePerBooking sql.NullString
	IsEligible      bool
}

type CustomerDiscountUsage struct {
	CustomerID uuid.UUID
	DiscountID uuid.UUID
	UsageCount int32
	LastUsedAt sql.NullTime
}

type CustomerEnrollment struct {
	ID          uuid.UUID
	CustomerID  uuid.UUID
	EventID     uuid.UUID
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	CheckedInAt sql.NullTime
	IsCancelled bool
}

type CustomerMembershipPlan struct {
	ID               uuid.UUID
	CustomerID       uuid.UUID
	MembershipPlanID uuid.UUID
	StartDate        sql.NullTime
	RenewalDate      sql.NullTime
	Status           MembershipStatus
	CreatedAt        sql.NullTime
	UpdatedAt        sql.NullTime
}

type Discount struct {
	ID              uuid.UUID
	Name            string
	Description     sql.NullString
	DiscountPercent int32
	IsUseUnlimited  bool
	UsePerClient    sql.NullInt32
	IsActive        bool
	ValidFrom       time.Time
	ValidTo         sql.NullTime
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
}

type DiscountRestrictedMembershipPlan struct {
	DiscountID       uuid.UUID
	MembershipPlanID uuid.UUID
	CreatedAt        sql.NullTime
}

type Event struct {
	ID            uuid.UUID
	BeginDateTime time.Time
	EndDateTime   time.Time
	PracticeID    uuid.NullUUID
	CourseID      uuid.NullUUID
	GameID        uuid.NullUUID
	LocationID    uuid.UUID
	CreatedAt     sql.NullTime
	UpdatedAt     sql.NullTime
}

type EventStaff struct {
	EventID uuid.UUID
	StaffID uuid.UUID
}

type FacilityFacility struct {
	ID                 uuid.UUID
	Name               string
	Address            string
	FacilityCategoryID uuid.UUID
}

type FacilityFacilityCategory struct {
	ID   uuid.UUID
	Name string
}

type Game struct {
	ID        uuid.UUID
	Name      string
	VideoLink sql.NullString
}

type Location struct {
	ID         uuid.UUID
	Name       string
	FacilityID uuid.UUID
}

type MembershipMembership struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

type MembershipMembershipPlan struct {
	ID               uuid.UUID
	Name             string
	Price            int32
	JoiningFee       sql.NullInt32
	AutoRenew        bool
	MembershipID     uuid.UUID
	PaymentFrequency NullPaymentFrequency
	AmtPeriods       sql.NullInt32
	CreatedAt        sql.NullTime
	UpdatedAt        sql.NullTime
}

type Practice struct {
	ID                             uuid.UUID
	Name                           string
	Description                    sql.NullString
	Level                          PracticeLevel
	ShouldEmailBookingNotification sql.NullBool
	Capacity                       int32
	StartDate                      time.Time
	EndDate                        sql.NullTime
	CreatedAt                      time.Time
	UpdatedAt                      time.Time
}

type PracticeMembership struct {
	PracticeID      uuid.UUID
	MembershipID    uuid.UUID
	PricePerBooking sql.NullString
	IsEligible      bool
}

type StaffActivityLog struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	Activity   string
	OccurredAt sql.NullTime
}

type StaffRole struct {
	ID       uuid.UUID
	RoleName string
}

type UsersCustomerCredit struct {
	CustomerID uuid.UUID
	Credits    int32
}

type UsersPendingUser struct {
	ID              uuid.UUID
	FirstName       string
	LastName        string
	Email           sql.NullString
	ParentHubspotID sql.NullString
	Age             int32
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
}

type UsersStaff struct {
	ID        uuid.UUID
	IsActive  bool
	CreatedAt sql.NullTime
	UpdatedAt time.Time
	RoleID    uuid.UUID
}

type UsersUser struct {
	ID            uuid.UUID
	HubspotID     sql.NullString
	ProfilePicUrl sql.NullString
	Wins          int32
	Losses        int32
	Points        int32
	Steals        int32
	Assists       int32
	Rebounds      int32
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

type WaiverPendingUsersWaiverSigning struct {
	UserID    uuid.UUID
	WaiverID  uuid.UUID
	IsSigned  bool
	UpdatedAt time.Time
}

type WaiverWaiver struct {
	ID        uuid.UUID
	WaiverUrl string
	CreatedAt time.Time
	UpdatedAt time.Time
}

type WaiverWaiverSigning struct {
	UserID    uuid.UUID
	WaiverID  uuid.UUID
	IsSigned  bool
	UpdatedAt time.Time
}
