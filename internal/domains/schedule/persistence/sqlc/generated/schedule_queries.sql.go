// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: schedule_queries.sql

package db_schedule

import (
	"context"
	"database/sql"
	"time"

	"api/internal/custom_types"
	"github.com/google/uuid"
)

const createSchedule = `-- name: CreateSchedule :exec
INSERT INTO public.schedules (recurrence_start_at, recurrence_end_at, event_start_time, event_end_time, day,
                              location_id,
                              program_id)
VALUES ($1, $2, $3, $4, $5,
        $6, $7)
`

type CreateScheduleParams struct {
	RecurrenceStartAt time.Time                     `json:"recurrence_start_at"`
	RecurrenceEndAt   sql.NullTime                  `json:"recurrence_end_at"`
	EventStartTime    custom_types.TimeWithTimeZone `json:"event_start_time"`
	EventEndTime      custom_types.TimeWithTimeZone `json:"event_end_time"`
	Day               DayEnum                       `json:"day"`
	LocationID        uuid.UUID                     `json:"location_id"`
	ProgramID         uuid.NullUUID                 `json:"program_id"`
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) error {
	_, err := q.db.ExecContext(ctx, createSchedule,
		arg.RecurrenceStartAt,
		arg.RecurrenceEndAt,
		arg.EventStartTime,
		arg.EventEndTime,
		arg.Day,
		arg.LocationID,
		arg.ProgramID,
	)
	return err
}

const deleteSchedule = `-- name: DeleteSchedule :exec
DELETE
FROM events.events
WHERE id = $1
`

func (q *Queries) DeleteSchedule(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSchedule, id)
	return err
}

const getScheduleById = `-- name: GetScheduleById :one
SELECT schedule.id, schedule.program_id, schedule.team_id, schedule.location_id, schedule.recurrence_start_at, schedule.recurrence_end_at, schedule.day, schedule.event_start_time, schedule.event_end_time, schedule.created_at, schedule.updated_at,
       p.name        AS program_name,
       p.description AS program_description,
       p.type        AS program_type,

       l.name        AS location_name,
       l.address     AS location_address,

       t.name        AS team_name

FROM public.schedules schedule
         LEFT JOIN events.events e ON schedule.id = e.schedule_id
         LEFT JOIN program.programs p ON schedule.program_id = p.id
         JOIN location.locations l ON schedule.location_id = l.id
         LEFT JOIN athletic.teams t ON t.id = schedule.team_id
WHERE schedule.id = $1
`

type GetScheduleByIdRow struct {
	ID                 uuid.UUID                     `json:"id"`
	ProgramID          uuid.NullUUID                 `json:"program_id"`
	TeamID             uuid.NullUUID                 `json:"team_id"`
	LocationID         uuid.UUID                     `json:"location_id"`
	RecurrenceStartAt  time.Time                     `json:"recurrence_start_at"`
	RecurrenceEndAt    sql.NullTime                  `json:"recurrence_end_at"`
	Day                DayEnum                       `json:"day"`
	EventStartTime     custom_types.TimeWithTimeZone `json:"event_start_time"`
	EventEndTime       custom_types.TimeWithTimeZone `json:"event_end_time"`
	CreatedAt          time.Time                     `json:"created_at"`
	UpdatedAt          time.Time                     `json:"updated_at"`
	ProgramName        sql.NullString                `json:"program_name"`
	ProgramDescription sql.NullString                `json:"program_description"`
	ProgramType        NullProgramProgramType        `json:"program_type"`
	LocationName       string                        `json:"location_name"`
	LocationAddress    string                        `json:"location_address"`
	TeamName           sql.NullString                `json:"team_name"`
}

func (q *Queries) GetScheduleById(ctx context.Context, id uuid.UUID) (GetScheduleByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getScheduleById, id)
	var i GetScheduleByIdRow
	err := row.Scan(
		&i.ID,
		&i.ProgramID,
		&i.TeamID,
		&i.LocationID,
		&i.RecurrenceStartAt,
		&i.RecurrenceEndAt,
		&i.Day,
		&i.EventStartTime,
		&i.EventEndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProgramName,
		&i.ProgramDescription,
		&i.ProgramType,
		&i.LocationName,
		&i.LocationAddress,
		&i.TeamName,
	)
	return i, err
}

const getSchedules = `-- name: GetSchedules :many
SELECT s.id, s.program_id, s.team_id, s.location_id, s.recurrence_start_at, s.recurrence_end_at, s.day, s.event_start_time, s.event_end_time, s.created_at, s.updated_at,
       p.name        AS program_name,
       p.description AS program_description,
       p."type"      AS program_type,
       l.name        AS location_name,
       l.address     AS location_address,
       t.name        as team_name
FROM public.schedules s
         LEFT JOIN program.programs p ON s.program_id = p.id
         JOIN location.locations l ON s.location_id = l.id
         LEFT JOIN events.staff es ON s.id = es.event_id
         LEFT JOIN events.customer_enrollment ce ON s.id = ce.event_id
         LEFT JOIN athletic.teams t ON t.id = s.team_id
WHERE (
          ($1::uuid = s.program_id OR $1 IS NULL)
              AND ($2::uuid = s.location_id OR $2 IS NULL)
              AND ($3 = p.type OR $3 IS NULL)
              AND ($4::uuid IS NULL OR ce.customer_id = $4::uuid OR
                   es.staff_id = $4::uuid)
              AND ($5::uuid IS NULL OR s.team_id = $5)
          )
`

type GetSchedulesParams struct {
	ProgramID  uuid.NullUUID          `json:"program_id"`
	LocationID uuid.NullUUID          `json:"location_id"`
	Type       NullProgramProgramType `json:"type"`
	UserID     uuid.NullUUID          `json:"user_id"`
	TeamID     uuid.NullUUID          `json:"team_id"`
}

type GetSchedulesRow struct {
	ID                 uuid.UUID                     `json:"id"`
	ProgramID          uuid.NullUUID                 `json:"program_id"`
	TeamID             uuid.NullUUID                 `json:"team_id"`
	LocationID         uuid.UUID                     `json:"location_id"`
	RecurrenceStartAt  time.Time                     `json:"recurrence_start_at"`
	RecurrenceEndAt    sql.NullTime                  `json:"recurrence_end_at"`
	Day                DayEnum                       `json:"day"`
	EventStartTime     custom_types.TimeWithTimeZone `json:"event_start_time"`
	EventEndTime       custom_types.TimeWithTimeZone `json:"event_end_time"`
	CreatedAt          time.Time                     `json:"created_at"`
	UpdatedAt          time.Time                     `json:"updated_at"`
	ProgramName        sql.NullString                `json:"program_name"`
	ProgramDescription sql.NullString                `json:"program_description"`
	ProgramType        NullProgramProgramType        `json:"program_type"`
	LocationName       string                        `json:"location_name"`
	LocationAddress    string                        `json:"location_address"`
	TeamName           sql.NullString                `json:"team_name"`
}

func (q *Queries) GetSchedules(ctx context.Context, arg GetSchedulesParams) ([]GetSchedulesRow, error) {
	rows, err := q.db.QueryContext(ctx, getSchedules,
		arg.ProgramID,
		arg.LocationID,
		arg.Type,
		arg.UserID,
		arg.TeamID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSchedulesRow
	for rows.Next() {
		var i GetSchedulesRow
		if err := rows.Scan(
			&i.ID,
			&i.ProgramID,
			&i.TeamID,
			&i.LocationID,
			&i.RecurrenceStartAt,
			&i.RecurrenceEndAt,
			&i.Day,
			&i.EventStartTime,
			&i.EventEndTime,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProgramName,
			&i.ProgramDescription,
			&i.ProgramType,
			&i.LocationName,
			&i.LocationAddress,
			&i.TeamName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSchedule = `-- name: UpdateSchedule :execrows
UPDATE public.schedules
SET recurrence_start_at = $1,
    recurrence_end_at   = $2,
    location_id         = $3,
    program_id          = $4,
    event_start_time    = $5,
    event_end_time      = $6,
    day                 = $7,
    updated_at          = current_timestamp
WHERE id = $8
`

type UpdateScheduleParams struct {
	RecurrenceStartAt time.Time                     `json:"recurrence_start_at"`
	RecurrenceEndAt   sql.NullTime                  `json:"recurrence_end_at"`
	LocationID        uuid.UUID                     `json:"location_id"`
	ProgramID         uuid.NullUUID                 `json:"program_id"`
	EventStartTime    custom_types.TimeWithTimeZone `json:"event_start_time"`
	EventEndTime      custom_types.TimeWithTimeZone `json:"event_end_time"`
	Day               DayEnum                       `json:"day"`
	ID                uuid.UUID                     `json:"id"`
}

func (q *Queries) UpdateSchedule(ctx context.Context, arg UpdateScheduleParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateSchedule,
		arg.RecurrenceStartAt,
		arg.RecurrenceEndAt,
		arg.LocationID,
		arg.ProgramID,
		arg.EventStartTime,
		arg.EventEndTime,
		arg.Day,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
