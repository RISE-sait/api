// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: facility_types_queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createFacilityType = `-- name: CreateFacilityType :execrows
INSERT INTO facility_types (name) VALUES ($1)
`

func (q *Queries) CreateFacilityType(ctx context.Context, name string) (int64, error) {
	result, err := q.db.ExecContext(ctx, createFacilityType, name)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteFacilityType = `-- name: DeleteFacilityType :execrows
DELETE FROM facility_types WHERE id = $1
`

func (q *Queries) DeleteFacilityType(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteFacilityType, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllFacilityTypes = `-- name: GetAllFacilityTypes :many
SELECT id, name from facility_types
`

func (q *Queries) GetAllFacilityTypes(ctx context.Context) ([]FacilityType, error) {
	rows, err := q.db.QueryContext(ctx, getAllFacilityTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FacilityType
	for rows.Next() {
		var i FacilityType
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFacilityTypeById = `-- name: GetFacilityTypeById :one
SELECT name FROM facility_types WHERE id = $1
`

func (q *Queries) GetFacilityTypeById(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getFacilityTypeById, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const updateFacilityType = `-- name: UpdateFacilityType :execrows
UPDATE facility_types
SET name = $1
WHERE id = $2
`

type UpdateFacilityTypeParams struct {
	Name string    `json:"name"`
	ID   uuid.UUID `json:"id"`
}

func (q *Queries) UpdateFacilityType(ctx context.Context, arg UpdateFacilityTypeParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateFacilityType, arg.Name, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
