// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: course-membership.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCourseMembership = `-- name: CreateCourseMembership :execrows
INSERT INTO course_membership (course_id, membership_id, price_per_booking, is_eligible)
VALUES ($1, $2, $3, $4)
`

type CreateCourseMembershipParams struct {
	CourseID        uuid.UUID      `json:"course_id"`
	MembershipID    uuid.UUID      `json:"membership_id"`
	PricePerBooking sql.NullString `json:"price_per_booking"`
	IsEligible      bool           `json:"is_eligible"`
}

func (q *Queries) CreateCourseMembership(ctx context.Context, arg CreateCourseMembershipParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createCourseMembership,
		arg.CourseID,
		arg.MembershipID,
		arg.PricePerBooking,
		arg.IsEligible,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteCourseMembership = `-- name: DeleteCourseMembership :execrows
DELETE FROM course_membership
WHERE course_id = $1 AND membership_id = $2
`

type DeleteCourseMembershipParams struct {
	CourseID     uuid.UUID `json:"course_id"`
	MembershipID uuid.UUID `json:"membership_id"`
}

func (q *Queries) DeleteCourseMembership(ctx context.Context, arg DeleteCourseMembershipParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteCourseMembership, arg.CourseID, arg.MembershipID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllCourseMemberships = `-- name: GetAllCourseMemberships :many
SELECT course_id, membership_id, price_per_booking, is_eligible FROM course_membership
`

func (q *Queries) GetAllCourseMemberships(ctx context.Context) ([]CourseMembership, error) {
	rows, err := q.db.QueryContext(ctx, getAllCourseMemberships)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CourseMembership
	for rows.Next() {
		var i CourseMembership
		if err := rows.Scan(
			&i.CourseID,
			&i.MembershipID,
			&i.PricePerBooking,
			&i.IsEligible,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourseMembershipById = `-- name: GetCourseMembershipById :one
SELECT course_id, membership_id, price_per_booking, is_eligible FROM course_membership
WHERE course_id = $1 AND membership_id = $2
`

type GetCourseMembershipByIdParams struct {
	CourseID     uuid.UUID `json:"course_id"`
	MembershipID uuid.UUID `json:"membership_id"`
}

func (q *Queries) GetCourseMembershipById(ctx context.Context, arg GetCourseMembershipByIdParams) (CourseMembership, error) {
	row := q.db.QueryRowContext(ctx, getCourseMembershipById, arg.CourseID, arg.MembershipID)
	var i CourseMembership
	err := row.Scan(
		&i.CourseID,
		&i.MembershipID,
		&i.PricePerBooking,
		&i.IsEligible,
	)
	return i, err
}

const updateCourseMembership = `-- name: UpdateCourseMembership :execrows
UPDATE course_membership
SET price_per_booking = $3, is_eligible = $4
WHERE course_id = $1 AND membership_id = $2
`

type UpdateCourseMembershipParams struct {
	CourseID        uuid.UUID      `json:"course_id"`
	MembershipID    uuid.UUID      `json:"membership_id"`
	PricePerBooking sql.NullString `json:"price_per_booking"`
	IsEligible      bool           `json:"is_eligible"`
}

func (q *Queries) UpdateCourseMembership(ctx context.Context, arg UpdateCourseMembershipParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateCourseMembership,
		arg.CourseID,
		arg.MembershipID,
		arg.PricePerBooking,
		arg.IsEligible,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
