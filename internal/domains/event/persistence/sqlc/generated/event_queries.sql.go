// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: event_queries.sql

package db_event

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events.events (location_id, program_id, team_id, start_at, end_at, created_by, updated_by, capacity)
VALUES ($1, $2, $3, $4, $5,
        $7::uuid, $7::uuid, $6)
RETURNING id, location_id, program_id, team_id, start_at, end_at, created_by, updated_by, capacity, is_cancelled, cancellation_reason, created_at, updated_at
`

type CreateEventParams struct {
	LocationID uuid.UUID     `json:"location_id"`
	ProgramID  uuid.NullUUID `json:"program_id"`
	TeamID     uuid.NullUUID `json:"team_id"`
	StartAt    time.Time     `json:"start_at"`
	EndAt      time.Time     `json:"end_at"`
	Capacity   sql.NullInt32 `json:"capacity"`
	CreatedBy  uuid.UUID     `json:"created_by"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (EventsEvent, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.LocationID,
		arg.ProgramID,
		arg.TeamID,
		arg.StartAt,
		arg.EndAt,
		arg.Capacity,
		arg.CreatedBy,
	)
	var i EventsEvent
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.ProgramID,
		&i.TeamID,
		&i.StartAt,
		&i.EndAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Capacity,
		&i.IsCancelled,
		&i.CancellationReason,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createEvents = `-- name: CreateEvents :exec
INSERT INTO events.events
(location_id, program_id, team_id, start_at, end_at, created_by, updated_by, capacity, is_cancelled,
 cancellation_reason)
SELECT unnest($1::uuid[]),
       unnest($2::uuid[]),
       unnest($3::uuid[]),
       unnest($4::timestamptz[]),
       unnest($5::timestamptz[]),
       unnest($6::uuid[]),
       unnest($7::uuid[]),
       unnest($8::int[]),
       unnest($9::bool[]),
       unnest($10::text[])
`

type CreateEventsParams struct {
	Column1  []uuid.UUID `json:"column_1"`
	Column2  []uuid.UUID `json:"column_2"`
	Column3  []uuid.UUID `json:"column_3"`
	Column4  []time.Time `json:"column_4"`
	Column5  []time.Time `json:"column_5"`
	Column6  []uuid.UUID `json:"column_6"`
	Column7  []uuid.UUID `json:"column_7"`
	Column8  []int32     `json:"column_8"`
	Column9  []bool      `json:"column_9"`
	Column10 []string    `json:"column_10"`
}

func (q *Queries) CreateEvents(ctx context.Context, arg CreateEventsParams) error {
	_, err := q.db.ExecContext(ctx, createEvents,
		pq.Array(arg.Column1),
		pq.Array(arg.Column2),
		pq.Array(arg.Column3),
		pq.Array(arg.Column4),
		pq.Array(arg.Column5),
		pq.Array(arg.Column6),
		pq.Array(arg.Column7),
		pq.Array(arg.Column8),
		pq.Array(arg.Column9),
		pq.Array(arg.Column10),
	)
	return err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE
FROM events.events
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, id)
	return err
}

const getEventById = `-- name: GetEventById :many
SELECT e.id, e.location_id, e.program_id, e.team_id, e.start_at, e.end_at, e.created_by, e.updated_by, e.capacity, e.is_cancelled, e.cancellation_reason, e.created_at, e.updated_at,

       creator.first_name AS creator_first_name,
       creator.last_name  AS creator_last_name,

       updater.first_name AS updater_first_name,
       updater.last_name  AS updater_last_name,

       p.name             AS program_name,
       p.description      AS program_description,
       p."type"           AS program_type,
       l.name             AS location_name,
       l.address          AS location_address,
       -- Staff fields
       s.id               AS staff_id,
       sr.role_name       AS staff_role_name,
       us.email           AS staff_email,
       us.first_name      AS staff_first_name,
       us.last_name       AS staff_last_name,
       us.gender          AS staff_gender,
       us.phone           AS staff_phone,
       -- Customer fields
       uc.id              AS customer_id,
       uc.first_name      AS customer_first_name,
       uc.last_name       AS customer_last_name,
       uc.email           AS customer_email,
       uc.phone           AS customer_phone,
       uc.gender          AS customer_gender,

       ce.is_cancelled    AS customer_enrollment_is_cancelled,

       -- Team field (added missing team reference)
       t.id               AS team_id,
       t.name             AS team_name
FROM events.events e
         JOIN users.users creator ON creator.id = e.created_by
         JOIN users.users updater ON updater.id = e.updated_by
         LEFT JOIN program.programs p ON e.program_id = p.id
         JOIN location.locations l ON e.location_id = l.id
         LEFT JOIN events.staff es ON e.id = es.event_id
         LEFT JOIN staff.staff s ON es.staff_id = s.id
         LEFT JOIN staff.staff_roles sr ON s.role_id = sr.id
         LEFT JOIN users.users us ON s.id = us.id
         LEFT JOIN events.customer_enrollment ce ON e.id = ce.event_id
         LEFT JOIN users.users uc ON ce.customer_id = uc.id
         LEFT JOIN athletic.teams t ON t.id = e.team_id
WHERE e.id = $1
ORDER BY s.id, uc.id
`

type GetEventByIdRow struct {
	ID                            uuid.UUID              `json:"id"`
	LocationID                    uuid.UUID              `json:"location_id"`
	ProgramID                     uuid.NullUUID          `json:"program_id"`
	TeamID                        uuid.NullUUID          `json:"team_id"`
	StartAt                       time.Time              `json:"start_at"`
	EndAt                         time.Time              `json:"end_at"`
	CreatedBy                     uuid.UUID              `json:"created_by"`
	UpdatedBy                     uuid.UUID              `json:"updated_by"`
	Capacity                      sql.NullInt32          `json:"capacity"`
	IsCancelled                   bool                   `json:"is_cancelled"`
	CancellationReason            sql.NullString         `json:"cancellation_reason"`
	CreatedAt                     time.Time              `json:"created_at"`
	UpdatedAt                     time.Time              `json:"updated_at"`
	CreatorFirstName              string                 `json:"creator_first_name"`
	CreatorLastName               string                 `json:"creator_last_name"`
	UpdaterFirstName              string                 `json:"updater_first_name"`
	UpdaterLastName               string                 `json:"updater_last_name"`
	ProgramName                   sql.NullString         `json:"program_name"`
	ProgramDescription            sql.NullString         `json:"program_description"`
	ProgramType                   NullProgramProgramType `json:"program_type"`
	LocationName                  string                 `json:"location_name"`
	LocationAddress               string                 `json:"location_address"`
	StaffID                       uuid.NullUUID          `json:"staff_id"`
	StaffRoleName                 sql.NullString         `json:"staff_role_name"`
	StaffEmail                    sql.NullString         `json:"staff_email"`
	StaffFirstName                sql.NullString         `json:"staff_first_name"`
	StaffLastName                 sql.NullString         `json:"staff_last_name"`
	StaffGender                   sql.NullString         `json:"staff_gender"`
	StaffPhone                    sql.NullString         `json:"staff_phone"`
	CustomerID                    uuid.NullUUID          `json:"customer_id"`
	CustomerFirstName             sql.NullString         `json:"customer_first_name"`
	CustomerLastName              sql.NullString         `json:"customer_last_name"`
	CustomerEmail                 sql.NullString         `json:"customer_email"`
	CustomerPhone                 sql.NullString         `json:"customer_phone"`
	CustomerGender                sql.NullString         `json:"customer_gender"`
	CustomerEnrollmentIsCancelled sql.NullBool           `json:"customer_enrollment_is_cancelled"`
	TeamID_2                      uuid.NullUUID          `json:"team_id_2"`
	TeamName                      sql.NullString         `json:"team_name"`
}

func (q *Queries) GetEventById(ctx context.Context, id uuid.UUID) ([]GetEventByIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getEventById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventByIdRow
	for rows.Next() {
		var i GetEventByIdRow
		if err := rows.Scan(
			&i.ID,
			&i.LocationID,
			&i.ProgramID,
			&i.TeamID,
			&i.StartAt,
			&i.EndAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.Capacity,
			&i.IsCancelled,
			&i.CancellationReason,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatorFirstName,
			&i.CreatorLastName,
			&i.UpdaterFirstName,
			&i.UpdaterLastName,
			&i.ProgramName,
			&i.ProgramDescription,
			&i.ProgramType,
			&i.LocationName,
			&i.LocationAddress,
			&i.StaffID,
			&i.StaffRoleName,
			&i.StaffEmail,
			&i.StaffFirstName,
			&i.StaffLastName,
			&i.StaffGender,
			&i.StaffPhone,
			&i.CustomerID,
			&i.CustomerFirstName,
			&i.CustomerLastName,
			&i.CustomerEmail,
			&i.CustomerPhone,
			&i.CustomerGender,
			&i.CustomerEnrollmentIsCancelled,
			&i.TeamID_2,
			&i.TeamName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventCreatedBy = `-- name: GetEventCreatedBy :one
SELECT created_by
FROM events.events
WHERE id = $1
`

func (q *Queries) GetEventCreatedBy(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getEventCreatedBy, id)
	var created_by uuid.UUID
	err := row.Scan(&created_by)
	return created_by, err
}

const getEvents = `-- name: GetEvents :many
SELECT DISTINCT e.id, e.location_id, e.program_id, e.team_id, e.start_at, e.end_at, e.created_by, e.updated_by, e.capacity, e.is_cancelled, e.cancellation_reason, e.created_at, e.updated_at,

                creator.first_name AS creator_first_name,
                creator.last_name  AS creator_last_name,

                updater.first_name AS updater_first_name,
                updater.last_name  AS updater_last_name,

                p.name             AS program_name,
                p.description      AS program_description,
                p."type"           AS program_type,
                l.name             AS location_name,
                l.address          AS location_address,
                t.name             as team_name
FROM events.events e
         LEFT JOIN program.programs p ON e.program_id = p.id
         JOIN location.locations l ON e.location_id = l.id
         LEFT JOIN events.staff es ON e.id = es.event_id
         LEFT JOIN events.customer_enrollment ce ON e.id = ce.event_id
         LEFT JOIN athletic.teams t ON t.id = e.team_id
         JOIN users.users creator ON creator.id = e.created_by
         JOIN users.users updater ON updater.id = e.updated_by
WHERE (
          ($1::uuid = e.program_id OR $1 IS NULL)
              AND ($2::uuid = e.location_id OR $2 IS NULL)
              AND ($3::timestamp <= e.start_at OR $3 IS NULL)
              AND ($4::timestamp >= e.end_at OR $4 IS NULL)
              AND ($5 = p.type OR $5 IS NULL)
              AND ($6::uuid IS NULL OR ce.customer_id = $6::uuid OR
                   es.staff_id = $6::uuid)
              AND ($7::uuid IS NULL OR e.team_id = $7)
              AND ($8::uuid IS NULL OR e.created_by = $8)
              AND ($9::uuid IS NULL OR e.updated_by = $9)
              AND ($10::boolean IS NULL OR e.is_cancelled = $10)
          )
`

type GetEventsParams struct {
	ProgramID        uuid.NullUUID          `json:"program_id"`
	LocationID       uuid.NullUUID          `json:"location_id"`
	After            sql.NullTime           `json:"after"`
	Before           sql.NullTime           `json:"before"`
	Type             NullProgramProgramType `json:"type"`
	UserID           uuid.NullUUID          `json:"user_id"`
	TeamID           uuid.NullUUID          `json:"team_id"`
	CreatedBy        uuid.NullUUID          `json:"created_by"`
	UpdatedBy        uuid.NullUUID          `json:"updated_by"`
	IncludeCancelled sql.NullBool           `json:"include_cancelled"`
}

type GetEventsRow struct {
	ID                 uuid.UUID              `json:"id"`
	LocationID         uuid.UUID              `json:"location_id"`
	ProgramID          uuid.NullUUID          `json:"program_id"`
	TeamID             uuid.NullUUID          `json:"team_id"`
	StartAt            time.Time              `json:"start_at"`
	EndAt              time.Time              `json:"end_at"`
	CreatedBy          uuid.UUID              `json:"created_by"`
	UpdatedBy          uuid.UUID              `json:"updated_by"`
	Capacity           sql.NullInt32          `json:"capacity"`
	IsCancelled        bool                   `json:"is_cancelled"`
	CancellationReason sql.NullString         `json:"cancellation_reason"`
	CreatedAt          time.Time              `json:"created_at"`
	UpdatedAt          time.Time              `json:"updated_at"`
	CreatorFirstName   string                 `json:"creator_first_name"`
	CreatorLastName    string                 `json:"creator_last_name"`
	UpdaterFirstName   string                 `json:"updater_first_name"`
	UpdaterLastName    string                 `json:"updater_last_name"`
	ProgramName        sql.NullString         `json:"program_name"`
	ProgramDescription sql.NullString         `json:"program_description"`
	ProgramType        NullProgramProgramType `json:"program_type"`
	LocationName       string                 `json:"location_name"`
	LocationAddress    string                 `json:"location_address"`
	TeamName           sql.NullString         `json:"team_name"`
}

func (q *Queries) GetEvents(ctx context.Context, arg GetEventsParams) ([]GetEventsRow, error) {
	rows, err := q.db.QueryContext(ctx, getEvents,
		arg.ProgramID,
		arg.LocationID,
		arg.After,
		arg.Before,
		arg.Type,
		arg.UserID,
		arg.TeamID,
		arg.CreatedBy,
		arg.UpdatedBy,
		arg.IncludeCancelled,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventsRow
	for rows.Next() {
		var i GetEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.LocationID,
			&i.ProgramID,
			&i.TeamID,
			&i.StartAt,
			&i.EndAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.Capacity,
			&i.IsCancelled,
			&i.CancellationReason,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatorFirstName,
			&i.CreatorLastName,
			&i.UpdaterFirstName,
			&i.UpdaterLastName,
			&i.ProgramName,
			&i.ProgramDescription,
			&i.ProgramType,
			&i.LocationName,
			&i.LocationAddress,
			&i.TeamName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events.events
SET start_at            = $1,
    end_at              = $2,
    location_id         = $3,
    program_id          = $4,
    team_id             = $5,
    is_cancelled        = $6,
    cancellation_reason = $7,
    capacity            = $8,
    updated_at          = current_timestamp,
    updated_by          = $10::uuid
WHERE id = $9
RETURNING id, location_id, program_id, team_id, start_at, end_at, created_by, updated_by, capacity, is_cancelled, cancellation_reason, created_at, updated_at
`

type UpdateEventParams struct {
	StartAt            time.Time      `json:"start_at"`
	EndAt              time.Time      `json:"end_at"`
	LocationID         uuid.UUID      `json:"location_id"`
	ProgramID          uuid.NullUUID  `json:"program_id"`
	TeamID             uuid.NullUUID  `json:"team_id"`
	IsCancelled        bool           `json:"is_cancelled"`
	CancellationReason sql.NullString `json:"cancellation_reason"`
	Capacity           sql.NullInt32  `json:"capacity"`
	ID                 uuid.UUID      `json:"id"`
	UpdatedBy          uuid.UUID      `json:"updated_by"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (EventsEvent, error) {
	row := q.db.QueryRowContext(ctx, updateEvent,
		arg.StartAt,
		arg.EndAt,
		arg.LocationID,
		arg.ProgramID,
		arg.TeamID,
		arg.IsCancelled,
		arg.CancellationReason,
		arg.Capacity,
		arg.ID,
		arg.UpdatedBy,
	)
	var i EventsEvent
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.ProgramID,
		&i.TeamID,
		&i.StartAt,
		&i.EndAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Capacity,
		&i.IsCancelled,
		&i.CancellationReason,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
