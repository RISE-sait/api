// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: general.sql

package db_seed

import (
	"context"

	"github.com/lib/pq"
)

const insertCourses = `-- name: InsertCourses :exec
INSERT INTO courses (name, description)
VALUES (unnest($1::text[]),
        unnest($2::text[]))
RETURNING id
`

type InsertCoursesParams struct {
	NameArray        []string `json:"name_array"`
	DescriptionArray []string `json:"description_array"`
}

func (q *Queries) InsertCourses(ctx context.Context, arg InsertCoursesParams) error {
	_, err := q.db.ExecContext(ctx, insertCourses, pq.Array(arg.NameArray), pq.Array(arg.DescriptionArray))
	return err
}

const insertGames = `-- name: InsertGames :exec
INSERT INTO games (name)
VALUES (unnest($1::text[]))
RETURNING id
`

func (q *Queries) InsertGames(ctx context.Context, nameArray []string) error {
	_, err := q.db.ExecContext(ctx, insertGames, pq.Array(nameArray))
	return err
}

const insertLocations = `-- name: InsertLocations :exec
INSERT INTO location.locations (name, address)
VALUES (unnest($1::text[]), unnest($2::text[]))
RETURNING id
`

type InsertLocationsParams struct {
	NameArray    []string `json:"name_array"`
	AddressArray []string `json:"address_array"`
}

func (q *Queries) InsertLocations(ctx context.Context, arg InsertLocationsParams) error {
	_, err := q.db.ExecContext(ctx, insertLocations, pq.Array(arg.NameArray), pq.Array(arg.AddressArray))
	return err
}

const insertPractices = `-- name: InsertPractices :exec
INSERT INTO practices (name, description, level)
VALUES (unnest($1::text[]),
        unnest($2::text[]),
        unnest($3::practice_level[]))
RETURNING id
`

type InsertPracticesParams struct {
	NameArray        []string        `json:"name_array"`
	DescriptionArray []string        `json:"description_array"`
	LevelArray       []PracticeLevel `json:"level_array"`
}

func (q *Queries) InsertPractices(ctx context.Context, arg InsertPracticesParams) error {
	_, err := q.db.ExecContext(ctx, insertPractices, pq.Array(arg.NameArray), pq.Array(arg.DescriptionArray), pq.Array(arg.LevelArray))
	return err
}

const insertWaivers = `-- name: InsertWaivers :exec
INSERT INTO waiver.waiver(waiver_url, waiver_name)
VALUES (
        'https://www.youtube.com/', 'youtube'),
        (
        'https://www.youtube.com/watch?v=5GTFt8JNwHU','video'
       )
`

func (q *Queries) InsertWaivers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, insertWaivers)
	return err
}
