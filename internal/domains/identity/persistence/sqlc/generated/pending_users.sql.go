// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pending_users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPendingUser = `-- name: CreatePendingUser :one
INSERT INTO users.pending_users (first_name, last_name, email, phone, parent_hubspot_id, age, has_sms_consent,
                                 has_marketing_email_consent, is_parent, alpha_2_country_code)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, first_name, last_name, email, parent_hubspot_id, age, created_at, updated_at, phone, has_marketing_email_consent, has_sms_consent, is_parent, alpha_2_country_code
`

type CreatePendingUserParams struct {
	FirstName                string         `json:"first_name"`
	LastName                 string         `json:"last_name"`
	Email                    sql.NullString `json:"email"`
	Phone                    sql.NullString `json:"phone"`
	ParentHubspotID          sql.NullString `json:"parent_hubspot_id"`
	Age                      int32          `json:"age"`
	HasSmsConsent            bool           `json:"has_sms_consent"`
	HasMarketingEmailConsent bool           `json:"has_marketing_email_consent"`
	IsParent                 bool           `json:"is_parent"`
	Alpha2CountryCode        sql.NullString `json:"alpha_2_country_code"`
}

func (q *Queries) CreatePendingUser(ctx context.Context, arg CreatePendingUserParams) (UsersPendingUser, error) {
	row := q.db.QueryRowContext(ctx, createPendingUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.ParentHubspotID,
		arg.Age,
		arg.HasSmsConsent,
		arg.HasMarketingEmailConsent,
		arg.IsParent,
		arg.Alpha2CountryCode,
	)
	var i UsersPendingUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.ParentHubspotID,
		&i.Age,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Phone,
		&i.HasMarketingEmailConsent,
		&i.HasSmsConsent,
		&i.IsParent,
		&i.Alpha2CountryCode,
	)
	return i, err
}

const deletePendingUser = `-- name: DeletePendingUser :execrows
DELETE FROM users.pending_users WHERE id = $1
`

func (q *Queries) DeletePendingUser(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deletePendingUser, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getPendingUserByEmail = `-- name: GetPendingUserByEmail :one
SELECT id, first_name, last_name, email, parent_hubspot_id, age, created_at, updated_at, phone, has_marketing_email_consent, has_sms_consent, is_parent, alpha_2_country_code FROM users.pending_users WHERE email = $1
`

func (q *Queries) GetPendingUserByEmail(ctx context.Context, email sql.NullString) (UsersPendingUser, error) {
	row := q.db.QueryRowContext(ctx, getPendingUserByEmail, email)
	var i UsersPendingUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.ParentHubspotID,
		&i.Age,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Phone,
		&i.HasMarketingEmailConsent,
		&i.HasSmsConsent,
		&i.IsParent,
		&i.Alpha2CountryCode,
	)
	return i, err
}
