// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: facility_queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createFacility = `-- name: CreateFacility :execrows
INSERT INTO facilities (name, location, facility_type_id)
VALUES ($1, $2, $3)
`

type CreateFacilityParams struct {
	Name           string    `json:"name"`
	Location       string    `json:"location"`
	FacilityTypeID uuid.UUID `json:"facility_type_id"`
}

func (q *Queries) CreateFacility(ctx context.Context, arg CreateFacilityParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createFacility, arg.Name, arg.Location, arg.FacilityTypeID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteFacility = `-- name: DeleteFacility :execrows
DELETE FROM facilities WHERE id = $1
`

func (q *Queries) DeleteFacility(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteFacility, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllFacilities = `-- name: GetAllFacilities :many
SELECT f.id, f.name, f.location, ft.name  as facility_type FROM facilities f JOIN facility_types ft ON f.facility_type_id = ft.id
`

type GetAllFacilitiesRow struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	Location     string    `json:"location"`
	FacilityType string    `json:"facility_type"`
}

func (q *Queries) GetAllFacilities(ctx context.Context) ([]GetAllFacilitiesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllFacilities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllFacilitiesRow
	for rows.Next() {
		var i GetAllFacilitiesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.FacilityType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFacilityById = `-- name: GetFacilityById :one
SELECT f.id, f.name, f.location, ft.name as facility_type FROM facilities f JOIN facility_types ft ON f.facility_type_id = ft.id WHERE f.id = $1
`

type GetFacilityByIdRow struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	Location     string    `json:"location"`
	FacilityType string    `json:"facility_type"`
}

func (q *Queries) GetFacilityById(ctx context.Context, id uuid.UUID) (GetFacilityByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getFacilityById, id)
	var i GetFacilityByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.FacilityType,
	)
	return i, err
}

const updateFacility = `-- name: UpdateFacility :execrows
UPDATE facilities
SET name = $1, location = $2, facility_type_id = $3
WHERE id = $4
`

type UpdateFacilityParams struct {
	Name           string    `json:"name"`
	Location       string    `json:"location"`
	FacilityTypeID uuid.UUID `json:"facility_type_id"`
	ID             uuid.UUID `json:"id"`
}

func (q *Queries) UpdateFacility(ctx context.Context, arg UpdateFacilityParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateFacility,
		arg.Name,
		arg.Location,
		arg.FacilityTypeID,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
