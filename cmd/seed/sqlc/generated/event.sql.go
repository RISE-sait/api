// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: event.sql

package db_seed

import (
	"context"
	"time"

	"api/internal/custom_types"
	"github.com/google/uuid"
	"github.com/lib/pq"
)

const insertCustomersEnrollments = `-- name: InsertCustomersEnrollments :many
WITH prepared_data AS (SELECT unnest($1::uuid[])          AS customer_id,
                              unnest($2::uuid[])             AS event_id,
                              unnest($3::timestamptz[]) AS raw_checked_in_at,
                              unnest($4::bool[])         AS is_cancelled)
INSERT
INTO events.customer_enrollment(customer_id, event_id, checked_in_at, is_cancelled)
SELECT customer_id,
       event_id,
       NULLIF(raw_checked_in_at, '0001-01-01 00:00:00 UTC') AS checked_in_at,
       is_cancelled
FROM prepared_data
RETURNING id
`

type InsertCustomersEnrollmentsParams struct {
	CustomerIDArray  []uuid.UUID `json:"customer_id_array"`
	EventIDArray     []uuid.UUID `json:"event_id_array"`
	CheckedInAtArray []time.Time `json:"checked_in_at_array"`
	IsCancelledArray []bool      `json:"is_cancelled_array"`
}

func (q *Queries) InsertCustomersEnrollments(ctx context.Context, arg InsertCustomersEnrollmentsParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, insertCustomersEnrollments,
		pq.Array(arg.CustomerIDArray),
		pq.Array(arg.EventIDArray),
		pq.Array(arg.CheckedInAtArray),
		pq.Array(arg.IsCancelledArray),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertEvents = `-- name: InsertEvents :many
WITH events_data AS (SELECT unnest($1::timestamptz[]) as program_start_at,
                            unnest($2::timestamptz[])   as program_end_at,
                            unnest($3::timetz[]) AS event_start_time,
                            unnest($4::timetz[])   AS event_end_time,
                            unnest($5::day_enum[])                 AS day,
                            unnest($6::text[])           AS practice_name,
                            unnest($7::text[])             AS course_name,
                            unnest($8::text[])               AS game_name,
                            unnest($9::text[])           as location_name)
INSERT
INTO events.events (program_start_at, program_end_at, event_start_time, event_end_time, day, practice_id, course_id,
                    game_id, location_id)
SELECT e.program_start_at,
       e.program_end_at,
       e.event_start_time,
       e.event_end_time,
       e.day,
       p.id AS practice_id,
       c.id AS course_id,
       g.id AS game_id,
       l.id AS location_id
FROM events_data e
         LEFT JOIN LATERAL (SELECT id FROM public.practices WHERE name = e.practice_name) p ON TRUE
         LEFT JOIN LATERAL (SELECT id FROM courses WHERE name = e.course_name) c ON TRUE
         LEFT JOIN LATERAL (SELECT id FROM public.games WHERE name = e.game_name) g ON TRUE
         LEFT JOIN LATERAL (SELECT id FROM location.locations WHERE name = e.location_name) l ON TRUE
RETURNING id
`

type InsertEventsParams struct {
	ProgramStartAtArray []time.Time                     `json:"program_start_at_array"`
	ProgramEndAtArray   []time.Time                     `json:"program_end_at_array"`
	EventStartTimeArray []custom_types.TimeWithTimeZone `json:"event_start_time_array"`
	EventEndTimeArray   []custom_types.TimeWithTimeZone `json:"event_end_time_array"`
	DayArray            []DayEnum                       `json:"day_array"`
	PracticeNameArray   []string                        `json:"practice_name_array"`
	CourseNameArray     []string                        `json:"course_name_array"`
	GameNameArray       []string                        `json:"game_name_array"`
	LocationNameArray   []string                        `json:"location_name_array"`
}

func (q *Queries) InsertEvents(ctx context.Context, arg InsertEventsParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, insertEvents,
		pq.Array(arg.ProgramStartAtArray),
		pq.Array(arg.ProgramEndAtArray),
		pq.Array(arg.EventStartTimeArray),
		pq.Array(arg.EventEndTimeArray),
		pq.Array(arg.DayArray),
		pq.Array(arg.PracticeNameArray),
		pq.Array(arg.CourseNameArray),
		pq.Array(arg.GameNameArray),
		pq.Array(arg.LocationNameArray),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
