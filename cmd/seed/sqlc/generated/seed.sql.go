// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: seed.sql

package db_seed

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const insertClients = `-- name: InsertClients :exec
WITH prepared_data AS (
    SELECT
        unnest($1::text[]) AS country_alpha2_code,
        unnest($2::text[]) AS first_name,
        unnest($3::text[]) AS last_name,
        unnest($4::int[]) AS age,
        unnest(
                ARRAY(
                        SELECT CASE
                                   WHEN parent_id = '00000000-0000-0000-0000-000000000000' THEN NULL
                                   ELSE parent_id
                                   END
                        FROM unnest($5::uuid[]) AS parent_id
                )
        ) AS parent_id,
        unnest($6::text[]) AS phone,
        unnest($7::text[]) AS email,
        unnest($8::boolean[]) AS has_marketing_email_consent,
        unnest($9::boolean[]) AS has_sms_consent
)
INSERT INTO users.users (
    country_alpha2_code,
    first_name,
    last_name,
    age,
    parent_id,
    phone,
    email,
    has_marketing_email_consent,
    has_sms_consent
)
SELECT
    country_alpha2_code,
    first_name,
    last_name,
    age,
    parent_id,
    phone,
    email,
    has_marketing_email_consent,
    has_sms_consent
FROM prepared_data
`

type InsertClientsParams struct {
	CountryAlpha2CodeArray        []string    `json:"country_alpha2_code_array"`
	FirstNameArray                []string    `json:"first_name_array"`
	LastNameArray                 []string    `json:"last_name_array"`
	AgeArray                      []int32     `json:"age_array"`
	ParentIDArray                 []uuid.UUID `json:"parent_id_array"`
	PhoneArray                    []string    `json:"phone_array"`
	EmailArray                    []string    `json:"email_array"`
	HasMarketingEmailConsentArray []bool      `json:"has_marketing_email_consent_array"`
	HasSmsConsentArray            []bool      `json:"has_sms_consent_array"`
}

func (q *Queries) InsertClients(ctx context.Context, arg InsertClientsParams) error {
	_, err := q.db.ExecContext(ctx, insertClients,
		pq.Array(arg.CountryAlpha2CodeArray),
		pq.Array(arg.FirstNameArray),
		pq.Array(arg.LastNameArray),
		pq.Array(arg.AgeArray),
		pq.Array(arg.ParentIDArray),
		pq.Array(arg.PhoneArray),
		pq.Array(arg.EmailArray),
		pq.Array(arg.HasMarketingEmailConsentArray),
		pq.Array(arg.HasSmsConsentArray),
	)
	return err
}

const insertLocations = `-- name: InsertLocations :exec
INSERT INTO location.locations (name, address)
VALUES (unnest($1::text[]), unnest($2::text[]))
`

type InsertLocationsParams struct {
	NameArray    []string `json:"name_array"`
	AddressArray []string `json:"address_array"`
}

func (q *Queries) InsertLocations(ctx context.Context, arg InsertLocationsParams) error {
	_, err := q.db.ExecContext(ctx, insertLocations, pq.Array(arg.NameArray), pq.Array(arg.AddressArray))
	return err
}

const insertMembershipPlans = `-- name: InsertMembershipPlans :exec
INSERT INTO membership.membership_plans (name, price, joining_fee, auto_renew, membership_id, payment_frequency,
                                         amt_periods)
SELECT name,
       price,
       joining_fee,
       auto_renew,
       (SELECT id FROM membership.memberships m WHERE m.name = membership_name),
       payment_frequency,
       amt_periods
FROM unnest($1::text[]) WITH ORDINALITY AS n(name, ord)
         JOIN
     unnest($2::numeric[]) WITH ORDINALITY AS p(price, ord) ON n.ord = p.ord
         JOIN
     unnest($3::numeric[]) WITH ORDINALITY AS j(joining_fee, ord) ON n.ord = j.ord
         JOIN
     unnest($4::boolean[]) WITH ORDINALITY AS a(auto_renew, ord) ON n.ord = a.ord
         JOIN
     unnest($5::text[]) WITH ORDINALITY AS m(membership_name, ord) ON n.ord = m.ord
         JOIN
     unnest($6::payment_frequency[]) WITH ORDINALITY AS f(payment_frequency, ord) ON n.ord = f.ord
         JOIN
     unnest($7::int[]) WITH ORDINALITY AS ap(amt_periods, ord) ON n.ord = ap.ord
`

type InsertMembershipPlansParams struct {
	NameArray             []string           `json:"name_array"`
	PriceArray            []string           `json:"price_array"`
	JoiningFeeArray       []string           `json:"joining_fee_array"`
	AutoRenewArray        []bool             `json:"auto_renew_array"`
	MembershipNameArray   []string           `json:"membership_name_array"`
	PaymentFrequencyArray []PaymentFrequency `json:"payment_frequency_array"`
	AmtPeriodsArray       []int32            `json:"amt_periods_array"`
}

func (q *Queries) InsertMembershipPlans(ctx context.Context, arg InsertMembershipPlansParams) error {
	_, err := q.db.ExecContext(ctx, insertMembershipPlans,
		pq.Array(arg.NameArray),
		pq.Array(arg.PriceArray),
		pq.Array(arg.JoiningFeeArray),
		pq.Array(arg.AutoRenewArray),
		pq.Array(arg.MembershipNameArray),
		pq.Array(arg.PaymentFrequencyArray),
		pq.Array(arg.AmtPeriodsArray),
	)
	return err
}

const insertMemberships = `-- name: InsertMemberships :exec
INSERT INTO membership.memberships (name, description)
VALUES (unnest($1::text[]), unnest($2::text[]))
`

type InsertMembershipsParams struct {
	NameArray        []string `json:"name_array"`
	DescriptionArray []string `json:"description_array"`
}

func (q *Queries) InsertMemberships(ctx context.Context, arg InsertMembershipsParams) error {
	_, err := q.db.ExecContext(ctx, insertMemberships, pq.Array(arg.NameArray), pq.Array(arg.DescriptionArray))
	return err
}

const insertPractices = `-- name: InsertPractices :exec
INSERT INTO public.practices (name, description, level, capacity)
VALUES (unnest($1::text[]),
        unnest($2::text[]),
        unnest($3::practice_level[]),
        unnest($4::int[]))
`

type InsertPracticesParams struct {
	NameArray        []string        `json:"name_array"`
	DescriptionArray []string        `json:"description_array"`
	LevelArray       []PracticeLevel `json:"level_array"`
	CapacityArray    []int32         `json:"capacity_array"`
}

func (q *Queries) InsertPractices(ctx context.Context, arg InsertPracticesParams) error {
	_, err := q.db.ExecContext(ctx, insertPractices,
		pq.Array(arg.NameArray),
		pq.Array(arg.DescriptionArray),
		pq.Array(arg.LevelArray),
		pq.Array(arg.CapacityArray),
	)
	return err
}
