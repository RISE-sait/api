// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: memberships.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createMembership = `-- name: CreateMembership :execrows
INSERT INTO memberships (name, description, start_date, end_date)
VALUES ($1, $2, $3, $4)
`

type CreateMembershipParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	StartDate   time.Time      `json:"start_date"`
	EndDate     time.Time      `json:"end_date"`
}

func (q *Queries) CreateMembership(ctx context.Context, arg CreateMembershipParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createMembership,
		arg.Name,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteMembership = `-- name: DeleteMembership :execrows
DELETE FROM memberships WHERE id = $1
`

func (q *Queries) DeleteMembership(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteMembership, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllMemberships = `-- name: GetAllMemberships :many
SELECT id, name, description, start_date, end_date, created_at, updated_at FROM memberships
`

func (q *Queries) GetAllMemberships(ctx context.Context) ([]Membership, error) {
	rows, err := q.db.QueryContext(ctx, getAllMemberships)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Membership
	for rows.Next() {
		var i Membership
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMembershipById = `-- name: GetMembershipById :one
SELECT id, name, description, start_date, end_date, created_at, updated_at FROM memberships WHERE id = $1
`

func (q *Queries) GetMembershipById(ctx context.Context, id uuid.UUID) (Membership, error) {
	row := q.db.QueryRowContext(ctx, getMembershipById, id)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const isMembershipIDExist = `-- name: IsMembershipIDExist :one
SELECT EXISTS (SELECT 1 FROM memberships WHERE id = $1) AS exists
`

func (q *Queries) IsMembershipIDExist(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, isMembershipIDExist, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateMembership = `-- name: UpdateMembership :execrows
UPDATE memberships
SET name = $1, description = $2, start_date = $3, end_date = $4
WHERE id = $5
`

type UpdateMembershipParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	StartDate   time.Time      `json:"start_date"`
	EndDate     time.Time      `json:"end_date"`
	ID          uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateMembership(ctx context.Context, arg UpdateMembershipParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateMembership,
		arg.Name,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
