// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const assignStaffToEvent = `-- name: AssignStaffToEvent :execrows
INSERT INTO event_staff (event_id, staff_id)
VALUES ($1, $2)
`

type AssignStaffToEventParams struct {
	EventID uuid.UUID `json:"event_id"`
	StaffID uuid.UUID `json:"staff_id"`
}

func (q *Queries) AssignStaffToEvent(ctx context.Context, arg AssignStaffToEventParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, assignStaffToEvent, arg.EventID, arg.StaffID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getStaffsAssignedToEvent = `-- name: GetStaffsAssignedToEvent :many

SELECT s.id, s.is_active, s.created_at, s.updated_at, s.role_id
FROM users.staff s
JOIN event_staff ON s.id = event_staff.staff_id
WHERE event_id = $1
`

// (begin_time >= $1 OR $1::text LIKE '%00:00:00%')
// AND (end_time <= $2 OR $2::text LIKE '%00:00:00%')
// (facility_id = $1 OR $1 = '00000000-0000-0000-0000-000000000000')
// AND (practice_id = $2 or $2 IS NULL);
func (q *Queries) GetStaffsAssignedToEvent(ctx context.Context, eventID uuid.UUID) ([]UsersStaff, error) {
	rows, err := q.db.QueryContext(ctx, getStaffsAssignedToEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersStaff
	for rows.Next() {
		var i UsersStaff
		if err := rows.Scan(
			&i.ID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unassignStaffFomEvent = `-- name: UnassignStaffFomEvent :execrows
DELETE FROM event_staff where staff_id = $1
and event_id = $2
`

type UnassignStaffFomEventParams struct {
	StaffID uuid.UUID `json:"staff_id"`
	EventID uuid.UUID `json:"event_id"`
}

func (q *Queries) UnassignStaffFomEvent(ctx context.Context, arg UnassignStaffFomEventParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, unassignStaffFomEvent, arg.StaffID, arg.EventID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
