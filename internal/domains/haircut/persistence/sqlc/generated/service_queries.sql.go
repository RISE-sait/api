// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: service_queries.sql

package db_haircut

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const createHaircutService = `-- name: CreateHaircutService :execrows
INSERT INTO haircut.haircut_services (name, description, price, duration_in_min)
VALUES ($1, $2, $3, $4)
`

type CreateHaircutServiceParams struct {
	Name          string          `json:"name"`
	Description   sql.NullString  `json:"description"`
	Price         decimal.Decimal `json:"price"`
	DurationInMin int32           `json:"duration_in_min"`
}

func (q *Queries) CreateHaircutService(ctx context.Context, arg CreateHaircutServiceParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createHaircutService,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.DurationInMin,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteHaircutService = `-- name: DeleteHaircutService :execrows
DELETE
FROM haircut.haircut_services
WHERE id = $1
`

func (q *Queries) DeleteHaircutService(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteHaircutService, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getHaircutServices = `-- name: GetHaircutServices :many
SELECT id, name, description, price, duration_in_min, created_at, updated_at
FROM haircut.haircut_services
`

func (q *Queries) GetHaircutServices(ctx context.Context) ([]HaircutHaircutService, error) {
	rows, err := q.db.QueryContext(ctx, getHaircutServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HaircutHaircutService
	for rows.Next() {
		var i HaircutHaircutService
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.DurationInMin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHaircutService = `-- name: UpdateHaircutService :execrows
UPDATE haircut.haircut_services
SET name            = $1,
    description     = $2,
    duration_in_min = $3,
    price           = $4,
    updated_at      = current_timestamp
WHERE id = $5
`

type UpdateHaircutServiceParams struct {
	Name          string          `json:"name"`
	Description   sql.NullString  `json:"description"`
	DurationInMin int32           `json:"duration_in_min"`
	Price         decimal.Decimal `json:"price"`
	ID            uuid.UUID       `json:"id"`
}

func (q *Queries) UpdateHaircutService(ctx context.Context, arg UpdateHaircutServiceParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateHaircutService,
		arg.Name,
		arg.Description,
		arg.DurationInMin,
		arg.Price,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
