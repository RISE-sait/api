// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customer_queries.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getCustomersForEvent = `-- name: GetCustomersForEvent :many
SELECT cu.user_id as customer_id, 
       oi.name,
       u.email,
       m.name as membership_name,
       cm.renewal_date as membership_renewal_date, 
       COUNT(*) FILTER (WHERE ce.checkedinat IS NOT NULL) AS attendance
FROM customers cu
JOIN users u ON cu.user_id = u.id
JOIN user_optional_info oi ON u.id = oi.id
JOIN customer_events ce ON cu.user_id = ce.customer_id
JOIN customer_memberships cm 
    ON cu.user_id = cm.customer_id
    AND cm.renewal_date = (
        SELECT MAX(cm2.renewal_date) 
        FROM customer_memberships cm2
        WHERE cm2.customer_id = cu.user_id
    ) 
JOIN memberships m ON cm.membership_id = m.id
WHERE (ce.event_id = $1 OR $1 = '00000000-0000-0000-0000-000000000000')
GROUP BY cu.user_id, oi.name, u.email, m.name, cm.renewal_date
`

type GetCustomersForEventRow struct {
	CustomerID            uuid.UUID      `json:"customer_id"`
	Name                  sql.NullString `json:"name"`
	Email                 string         `json:"email"`
	MembershipName        string         `json:"membership_name"`
	MembershipRenewalDate sql.NullTime   `json:"membership_renewal_date"`
	Attendance            int64          `json:"attendance"`
}

func (q *Queries) GetCustomersForEvent(ctx context.Context, eventID uuid.UUID) ([]GetCustomersForEventRow, error) {
	rows, err := q.db.QueryContext(ctx, getCustomersForEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCustomersForEventRow
	for rows.Next() {
		var i GetCustomersForEventRow
		if err := rows.Scan(
			&i.CustomerID,
			&i.Name,
			&i.Email,
			&i.MembershipName,
			&i.MembershipRenewalDate,
			&i.Attendance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
