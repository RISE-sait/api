// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_optional_info.sql

package db

import (
	"context"
	"database/sql"
)

const createUserOptionalInfo = `-- name: CreateUserOptionalInfo :execrows
INSERT INTO user_optional_info (id, first_name, last_name, phone, hashed_password) 
VALUES (
    (SELECT id FROM users WHERE email = $1),
    $2,
    $3,
    $4,
    $5
    )
`

type CreateUserOptionalInfoParams struct {
	Email          string         `json:"email"`
	FirstName      sql.NullString `json:"first_name"`
	LastName       sql.NullString `json:"last_name"`
	Phone          sql.NullString `json:"phone"`
	HashedPassword sql.NullString `json:"hashed_password"`
}

func (q *Queries) CreateUserOptionalInfo(ctx context.Context, arg CreateUserOptionalInfoParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUserOptionalInfo,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
		arg.HashedPassword,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getUserByEmailPassword = `-- name: GetUserByEmailPassword :one
SELECT id, first_name, last_name, phone, hashed_password FROM user_optional_info WHERE id = (SELECT id FROM users WHERE email = $1) and hashed_password = $2
`

type GetUserByEmailPasswordParams struct {
	Email          string         `json:"email"`
	HashedPassword sql.NullString `json:"hashed_password"`
}

func (q *Queries) GetUserByEmailPassword(ctx context.Context, arg GetUserByEmailPasswordParams) (UserOptionalInfo, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailPassword, arg.Email, arg.HashedPassword)
	var i UserOptionalInfo
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.HashedPassword,
	)
	return i, err
}
