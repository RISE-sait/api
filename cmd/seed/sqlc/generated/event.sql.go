// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: event.sql

package db_seed

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const insertCustomersEnrollments = `-- name: InsertCustomersEnrollments :many
WITH prepared_data AS (SELECT unnest($1::uuid[])          AS customer_id,
                              unnest($2::uuid[])             AS event_id,
                              unnest($3::timestamptz[]) AS raw_checked_in_at)
INSERT
INTO events.customer_enrollment(customer_id, event_id, checked_in_at)
SELECT customer_id,
       event_id,
       NULLIF(raw_checked_in_at, '0001-01-01 00:00:00 UTC') AS checked_in_at
FROM prepared_data
RETURNING id
`

type InsertCustomersEnrollmentsParams struct {
	CustomerIDArray  []uuid.UUID `json:"customer_id_array"`
	EventIDArray     []uuid.UUID `json:"event_id_array"`
	CheckedInAtArray []time.Time `json:"checked_in_at_array"`
}

func (q *Queries) InsertCustomersEnrollments(ctx context.Context, arg InsertCustomersEnrollmentsParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, insertCustomersEnrollments, pq.Array(arg.CustomerIDArray), pq.Array(arg.EventIDArray), pq.Array(arg.CheckedInAtArray))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertEvents = `-- name: InsertEvents :many
WITH events_data AS (
    SELECT 
        unnest($1::timestamptz[])        AS start_at,
        unnest($2::timestamptz[])          AS end_at,
        unnest($3::varchar[])        AS program_name,
        unnest($4::varchar[])       AS location_name,
        unnest($5::varchar[])    AS created_by_email,
        unnest($6::varchar[])    AS updated_by_email
)
INSERT INTO events.events (
    start_at, end_at, program_id, location_id, created_by, updated_by
)
SELECT 
    e.start_at,
    e.end_at,
    p.id,
    l.id,
    creator.id,
    updater.id
FROM events_data e
JOIN program.programs p 
  ON p.type = LOWER(e.program_name)::program.program_type
JOIN users.users creator 
  ON creator.email = e.created_by_email
JOIN users.users updater 
  ON updater.email = e.updated_by_email
JOIN location.locations l 
  ON l.name = e.location_name
ON CONFLICT DO NOTHING
RETURNING id
`

type InsertEventsParams struct {
	StartAtArray        []time.Time `json:"start_at_array"`
	EndAtArray          []time.Time `json:"end_at_array"`
	ProgramNameArray    []string    `json:"program_name_array"`
	LocationNameArray   []string    `json:"location_name_array"`
	CreatedByEmailArray []string    `json:"created_by_email_array"`
	UpdatedByEmailArray []string    `json:"updated_by_email_array"`
}

func (q *Queries) InsertEvents(ctx context.Context, arg InsertEventsParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, insertEvents,
		pq.Array(arg.StartAtArray),
		pq.Array(arg.EndAtArray),
		pq.Array(arg.ProgramNameArray),
		pq.Array(arg.LocationNameArray),
		pq.Array(arg.CreatedByEmailArray),
		pq.Array(arg.UpdatedByEmailArray),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertEventsStaff = `-- name: InsertEventsStaff :exec
WITH prepared_data AS (SELECT unnest($1::uuid[]) AS event_id,
                              unnest($2::uuid[]) AS staff_id)
INSERT
INTO events.staff(event_id, staff_id)
SELECT event_id,
       staff_id
FROM prepared_data
`

type InsertEventsStaffParams struct {
	EventIDArray []uuid.UUID `json:"event_id_array"`
	StaffIDArray []uuid.UUID `json:"staff_id_array"`
}

func (q *Queries) InsertEventsStaff(ctx context.Context, arg InsertEventsStaffParams) error {
	_, err := q.db.ExecContext(ctx, insertEventsStaff, pq.Array(arg.EventIDArray), pq.Array(arg.StaffIDArray))
	return err
}
