// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: activities.sql

package db_payment

import (
	"context"

	"github.com/google/uuid"
)

const getEventIsExist = `-- name: GetEventIsExist :one
SELECT EXISTS(SELECT 1 FROM events.events WHERE id = $1)
`

func (q *Queries) GetEventIsExist(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, getEventIsExist, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getEventRegistrationPriceIdForCustomer = `-- name: GetEventRegistrationPriceIdForCustomer :one
SELECT f.stripe_price_id
FROM program.fees f
WHERE f.membership_id = (SELECT mp.membership_id
                         FROM users.customer_membership_plans cmp
                                  LEFT JOIN membership.membership_plans mp ON mp.id = cmp.membership_plan_id
                                  LEFT JOIN membership.memberships m ON m.id = mp.membership_id
                         WHERE customer_id = $1
                           AND status = 'active'
                         ORDER BY cmp.start_date DESC
                         LIMIT 1)
  AND pay_per_event = true
  AND f.program_id = (SELECT p.id
                      FROM events.events e LEFT JOIN program.programs p ON p.id = e.program_id
                      WHERE e.id = $2
                        AND e.start_at > current_timestamp)
`

type GetEventRegistrationPriceIdForCustomerParams struct {
	CustomerID uuid.UUID `json:"customer_id"`
	EventID    uuid.UUID `json:"event_id"`
}

func (q *Queries) GetEventRegistrationPriceIdForCustomer(ctx context.Context, arg GetEventRegistrationPriceIdForCustomerParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getEventRegistrationPriceIdForCustomer, arg.CustomerID, arg.EventID)
	var stripe_price_id string
	err := row.Scan(&stripe_price_id)
	return stripe_price_id, err
}

const getProgram = `-- name: GetProgram :one
SELECT id, name
FROM program.programs
WHERE id = $1
`

type GetProgramRow struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) GetProgram(ctx context.Context, id uuid.UUID) (GetProgramRow, error) {
	row := q.db.QueryRowContext(ctx, getProgram, id)
	var i GetProgramRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getProgramIdByStripePriceId = `-- name: GetProgramIdByStripePriceId :one
SELECT program_id
FROM program.fees
WHERE stripe_price_id = $1
`

func (q *Queries) GetProgramIdByStripePriceId(ctx context.Context, stripePriceID string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getProgramIdByStripePriceId, stripePriceID)
	var program_id uuid.UUID
	err := row.Scan(&program_id)
	return program_id, err
}

const getProgramRegistrationPriceIdForCustomer = `-- name: GetProgramRegistrationPriceIdForCustomer :one
SELECT f.stripe_price_id
FROM program.fees f
WHERE f.membership_id = (SELECT mp.membership_id
                         FROM users.customer_membership_plans cmp
                                  LEFT JOIN membership.membership_plans mp ON mp.id = cmp.membership_plan_id
                                  LEFT JOIN membership.memberships m ON m.id = mp.membership_id
                         WHERE customer_id = $1
                           AND status = 'active'
                         ORDER BY cmp.start_date DESC
                         LIMIT 1)
  AND pay_per_event = false
  AND f.program_id = $2
`

type GetProgramRegistrationPriceIdForCustomerParams struct {
	CustomerID uuid.UUID `json:"customer_id"`
	ProgramID  uuid.UUID `json:"program_id"`
}

func (q *Queries) GetProgramRegistrationPriceIdForCustomer(ctx context.Context, arg GetProgramRegistrationPriceIdForCustomerParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getProgramRegistrationPriceIdForCustomer, arg.CustomerID, arg.ProgramID)
	var stripe_price_id string
	err := row.Scan(&stripe_price_id)
	return stripe_price_id, err
}
