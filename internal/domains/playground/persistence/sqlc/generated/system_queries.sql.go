// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: system_queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createSystem = `-- name: CreateSystem :one
INSERT INTO playground.systems (name)
VALUES ($1)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateSystem(ctx context.Context, name string) (PlaygroundSystem, error) {
	row := q.db.QueryRowContext(ctx, createSystem, name)
	var i PlaygroundSystem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSystem = `-- name: DeleteSystem :execrows
DELETE FROM playground.systems WHERE id = $1
`

func (q *Queries) DeleteSystem(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteSystem, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getSystems = `-- name: GetSystems :many
SELECT id, name, created_at, updated_at FROM playground.systems ORDER BY name
`

func (q *Queries) GetSystems(ctx context.Context) ([]PlaygroundSystem, error) {
	rows, err := q.db.QueryContext(ctx, getSystems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlaygroundSystem
	for rows.Next() {
		var i PlaygroundSystem
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSystem = `-- name: UpdateSystem :one
UPDATE playground.systems
SET name = $1,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $2
RETURNING id, name, created_at, updated_at
`

type UpdateSystemParams struct {
	Name string    `json:"name"`
	ID   uuid.UUID `json:"id"`
}

func (q *Queries) UpdateSystem(ctx context.Context, arg UpdateSystemParams) (PlaygroundSystem, error) {
	row := q.db.QueryRowContext(ctx, updateSystem, arg.Name, arg.ID)
	var i PlaygroundSystem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
