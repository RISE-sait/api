// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: purchases.sql

package db_payment

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const createCustomerMembershipPlan = `-- name: CreateCustomerMembershipPlan :exec
INSERT INTO customer_membership_plans (customer_id, membership_plan_id, status, start_date, renewal_date)
VALUES ($1, $2, $3, $4, $5)
`

type CreateCustomerMembershipPlanParams struct {
	CustomerID       uuid.UUID        `json:"customer_id"`
	MembershipPlanID uuid.UUID        `json:"membership_plan_id"`
	Status           MembershipStatus `json:"status"`
	StartDate        time.Time        `json:"start_date"`
	RenewalDate      sql.NullTime     `json:"renewal_date"`
}

func (q *Queries) CreateCustomerMembershipPlan(ctx context.Context, arg CreateCustomerMembershipPlanParams) error {
	_, err := q.db.ExecContext(ctx, createCustomerMembershipPlan,
		arg.CustomerID,
		arg.MembershipPlanID,
		arg.Status,
		arg.StartDate,
		arg.RenewalDate,
	)
	return err
}

const getCustomerHasActiveMembershipPlan = `-- name: GetCustomerHasActiveMembershipPlan :one
SELECT EXISTS(SELECT 1
               FROM public.customer_membership_plans
               WHERE customer_id = $1
                 AND status = 'active')
`

func (q *Queries) GetCustomerHasActiveMembershipPlan(ctx context.Context, customerID uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, getCustomerHasActiveMembershipPlan, customerID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getMembershipPlanJoiningRequirements = `-- name: GetMembershipPlanJoiningRequirements :one
SELECT id, name, price, joining_fee, auto_renew, membership_id, payment_frequency, amt_periods, created_at, updated_at
FROM membership.membership_plans
WHERE id = $1
`

func (q *Queries) GetMembershipPlanJoiningRequirements(ctx context.Context, id uuid.UUID) (MembershipMembershipPlan, error) {
	row := q.db.QueryRowContext(ctx, getMembershipPlanJoiningRequirements, id)
	var i MembershipMembershipPlan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.JoiningFee,
		&i.AutoRenew,
		&i.MembershipID,
		&i.PaymentFrequency,
		&i.AmtPeriods,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaygPrice = `-- name: GetPaygPrice :one
SELECT payg_price FROM program.programs WHERE id = $1
`

func (q *Queries) GetPaygPrice(ctx context.Context, id uuid.UUID) (decimal.NullDecimal, error) {
	row := q.db.QueryRowContext(ctx, getPaygPrice, id)
	var payg_price decimal.NullDecimal
	err := row.Scan(&payg_price)
	return payg_price, err
}

const getProgram = `-- name: GetProgram :one
SELECT id, name FROM program.programs WHERE id = $1
`

type GetProgramRow struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) GetProgram(ctx context.Context, id uuid.UUID) (GetProgramRow, error) {
	row := q.db.QueryRowContext(ctx, getProgram, id)
	var i GetProgramRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getProgramRegisterInfoForCustomer = `-- name: GetProgramRegisterInfoForCustomer :one
SELECT pm.price_per_booking
FROM program.programs p
         LEFT JOIN public.program_membership pm ON pm.program_id = p.id
         LEFT JOIN membership.membership_plans mp ON mp.membership_id = pm.membership_id
         LEFT JOIN public.customer_membership_plans cmp_active
                   ON cmp_active.membership_plan_id = mp.id
WHERE p.id = $1
  AND cmp_active.customer_id = $2
  AND cmp_active.status = 'active'
GROUP BY pm.price_per_booking, p.name
`

type GetProgramRegisterInfoForCustomerParams struct {
	ProgramID  uuid.UUID `json:"program_id"`
	CustomerID uuid.UUID `json:"customer_id"`
}

func (q *Queries) GetProgramRegisterInfoForCustomer(ctx context.Context, arg GetProgramRegisterInfoForCustomerParams) (decimal.NullDecimal, error) {
	row := q.db.QueryRowContext(ctx, getProgramRegisterInfoForCustomer, arg.ProgramID, arg.CustomerID)
	var price_per_booking decimal.NullDecimal
	err := row.Scan(&price_per_booking)
	return price_per_booking, err
}

const isCustomerExist = `-- name: IsCustomerExist :one
SELECT EXISTS(SELECT 1 FROM users.users WHERE id = $1)
`

func (q *Queries) IsCustomerExist(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, isCustomerExist, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
