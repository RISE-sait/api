// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: plans.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createMembershipPlan = `-- name: CreateMembershipPlan :execrows
INSERT INTO membership_plans (membership_id, name, price, payment_frequency, amt_periods)
VALUES ($1, $2, $3, $4, $5)
`

type CreateMembershipPlanParams struct {
	MembershipID     uuid.UUID            `json:"membership_id"`
	Name             string               `json:"name"`
	Price            int64                `json:"price"`
	PaymentFrequency NullPaymentFrequency `json:"payment_frequency"`
	AmtPeriods       sql.NullInt32        `json:"amt_periods"`
}

func (q *Queries) CreateMembershipPlan(ctx context.Context, arg CreateMembershipPlanParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createMembershipPlan,
		arg.MembershipID,
		arg.Name,
		arg.Price,
		arg.PaymentFrequency,
		arg.AmtPeriods,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteMembershipPlan = `-- name: DeleteMembershipPlan :execrows
DELETE FROM membership_plans WHERE membership_id = $1 AND id = $2
`

type DeleteMembershipPlanParams struct {
	MembershipID uuid.UUID `json:"membership_id"`
	ID           uuid.UUID `json:"id"`
}

func (q *Queries) DeleteMembershipPlan(ctx context.Context, arg DeleteMembershipPlanParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteMembershipPlan, arg.MembershipID, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getMembershipPlansByMembershipId = `-- name: GetMembershipPlansByMembershipId :many
SELECT id, name, price, membership_id, payment_frequency, amt_periods, created_at, updated_at 
FROM membership_plans
WHERE 
    membership_id = $1
`

func (q *Queries) GetMembershipPlansByMembershipId(ctx context.Context, membershipID uuid.UUID) ([]MembershipPlan, error) {
	rows, err := q.db.QueryContext(ctx, getMembershipPlansByMembershipId, membershipID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MembershipPlan
	for rows.Next() {
		var i MembershipPlan
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.MembershipID,
			&i.PaymentFrequency,
			&i.AmtPeriods,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMembershipPlan = `-- name: UpdateMembershipPlan :execrows
UPDATE membership_plans
SET name = $1, price = $2, payment_frequency = $3, amt_periods = $4
WHERE membership_id = $5 AND id = $6
`

type UpdateMembershipPlanParams struct {
	Name             string               `json:"name"`
	Price            int64                `json:"price"`
	PaymentFrequency NullPaymentFrequency `json:"payment_frequency"`
	AmtPeriods       sql.NullInt32        `json:"amt_periods"`
	MembershipID     uuid.UUID            `json:"membership_id"`
	ID               uuid.UUID            `json:"id"`
}

func (q *Queries) UpdateMembershipPlan(ctx context.Context, arg UpdateMembershipPlanParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateMembershipPlan,
		arg.Name,
		arg.Price,
		arg.PaymentFrequency,
		arg.AmtPeriods,
		arg.MembershipID,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
