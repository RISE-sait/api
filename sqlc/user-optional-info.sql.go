// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user-optional-info.sql

package db

import (
	"context"
	"database/sql"
)

const createUserOptionalInfo = `-- name: CreateUserOptionalInfo :execrows
INSERT INTO user_optional_info (id, name, hashed_password)
VALUES ((SELECT id FROM users WHERE email = $1), $2, $3)
`

type CreateUserOptionalInfoParams struct {
	Email          string         `json:"email"`
	Name           sql.NullString `json:"name"`
	HashedPassword sql.NullString `json:"hashed_password"`
}

func (q *Queries) CreateUserOptionalInfo(ctx context.Context, arg CreateUserOptionalInfoParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUserOptionalInfo, arg.Email, arg.Name, arg.HashedPassword)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteUserOptionalInfo = `-- name: DeleteUserOptionalInfo :execrows
DELETE FROM user_optional_info WHERE id = (SELECT id FROM users WHERE email = $1)
`

func (q *Queries) DeleteUserOptionalInfo(ctx context.Context, email string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteUserOptionalInfo, email)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getUserOptionalInfo = `-- name: GetUserOptionalInfo :one
SELECT id, name, hashed_password FROM user_optional_info WHERE id = (SELECT id FROM users WHERE email = $1) and hashed_password = $2
`

type GetUserOptionalInfoParams struct {
	Email          string         `json:"email"`
	HashedPassword sql.NullString `json:"hashed_password"`
}

func (q *Queries) GetUserOptionalInfo(ctx context.Context, arg GetUserOptionalInfoParams) (UserOptionalInfo, error) {
	row := q.db.QueryRowContext(ctx, getUserOptionalInfo, arg.Email, arg.HashedPassword)
	var i UserOptionalInfo
	err := row.Scan(&i.ID, &i.Name, &i.HashedPassword)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :execrows
UPDATE user_optional_info
SET hashed_password = $1
WHERE id = (SELECT id FROM users WHERE email = $2)
`

type UpdateUserPasswordParams struct {
	HashedPassword sql.NullString `json:"hashed_password"`
	Email          string         `json:"email"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateUserPassword, arg.HashedPassword, arg.Email)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateUsername = `-- name: UpdateUsername :execrows
UPDATE user_optional_info
SET name = $1
WHERE id = (SELECT id FROM users WHERE email = $2)
`

type UpdateUsernameParams struct {
	Name  sql.NullString `json:"name"`
	Email string         `json:"email"`
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateUsername, arg.Name, arg.Email)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
