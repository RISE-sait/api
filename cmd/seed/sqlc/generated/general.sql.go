// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: general.sql

package db_seed

import (
	"context"
	"time"

	"api/internal/custom_types"
	"github.com/google/uuid"
	"github.com/lib/pq"
)

const insertCourses = `-- name: InsertCourses :exec
WITH prepared_data as (SELECT unnest($1::text[]) as name,
        unnest($2::text[]) as description,
        unnest($3::program.program_level[]) as level)
INSERT INTO program.programs (name, description, type, level)
SELECT name,
       description,
       'course',
       level
FROM prepared_data
`

type InsertCoursesParams struct {
	NameArray        []string              `json:"name_array"`
	DescriptionArray []string              `json:"description_array"`
	LevelArray       []ProgramProgramLevel `json:"level_array"`
}

func (q *Queries) InsertCourses(ctx context.Context, arg InsertCoursesParams) error {
	_, err := q.db.ExecContext(ctx, insertCourses, pq.Array(arg.NameArray), pq.Array(arg.DescriptionArray), pq.Array(arg.LevelArray))
	return err
}

const insertCustomersEnrollments = `-- name: InsertCustomersEnrollments :many
WITH prepared_data AS (SELECT unnest($1::uuid[])          AS customer_id,
                              unnest($2::uuid[])             AS event_id,
                              unnest($3::timestamptz[]) AS raw_checked_in_at,
                              unnest($4::bool[])         AS is_cancelled)
INSERT
INTO events.customer_enrollment(customer_id, event_id, checked_in_at, is_cancelled)
SELECT customer_id,
       event_id,
       NULLIF(raw_checked_in_at, '0001-01-01 00:00:00 UTC') AS checked_in_at,
       is_cancelled
FROM prepared_data
RETURNING id
`

type InsertCustomersEnrollmentsParams struct {
	CustomerIDArray  []uuid.UUID `json:"customer_id_array"`
	EventIDArray     []uuid.UUID `json:"event_id_array"`
	CheckedInAtArray []time.Time `json:"checked_in_at_array"`
	IsCancelledArray []bool      `json:"is_cancelled_array"`
}

func (q *Queries) InsertCustomersEnrollments(ctx context.Context, arg InsertCustomersEnrollmentsParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, insertCustomersEnrollments,
		pq.Array(arg.CustomerIDArray),
		pq.Array(arg.EventIDArray),
		pq.Array(arg.CheckedInAtArray),
		pq.Array(arg.IsCancelledArray),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertEvents = `-- name: InsertEvents :many
WITH events_data AS (SELECT unnest($1::timestamptz[]) as program_start_at,
                            unnest($2::timestamptz[])   as program_end_at,
                            unnest($3::timetz[]) AS event_start_time,
                            unnest($4::timetz[])   AS event_end_time,
                            unnest($5::day_enum[])                 AS day,
                            unnest($6::text[])           AS program_name,
                            unnest($7::text[])           as location_name)
INSERT
INTO events.events (program_start_at, program_end_at, event_start_time, event_end_time, day, program_id, location_id)
SELECT e.program_start_at,
       e.program_end_at,
       e.event_start_time,
       e.event_end_time,
       e.day,
       p.id AS program_id,
       l.id AS location_id
FROM events_data e
         LEFT JOIN LATERAL (SELECT id FROM program.programs p WHERE p.name = e.program_name) p ON TRUE
         LEFT JOIN LATERAL (SELECT id FROM location.locations WHERE name = e.location_name) l ON TRUE
RETURNING id
`

type InsertEventsParams struct {
	ProgramStartAtArray []time.Time                     `json:"program_start_at_array"`
	ProgramEndAtArray   []time.Time                     `json:"program_end_at_array"`
	EventStartTimeArray []custom_types.TimeWithTimeZone `json:"event_start_time_array"`
	EventEndTimeArray   []custom_types.TimeWithTimeZone `json:"event_end_time_array"`
	DayArray            []DayEnum                       `json:"day_array"`
	ProgramNameArray    []string                        `json:"program_name_array"`
	LocationNameArray   []string                        `json:"location_name_array"`
}

func (q *Queries) InsertEvents(ctx context.Context, arg InsertEventsParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, insertEvents,
		pq.Array(arg.ProgramStartAtArray),
		pq.Array(arg.ProgramEndAtArray),
		pq.Array(arg.EventStartTimeArray),
		pq.Array(arg.EventEndTimeArray),
		pq.Array(arg.DayArray),
		pq.Array(arg.ProgramNameArray),
		pq.Array(arg.LocationNameArray),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertGames = `-- name: InsertGames :exec
WITH prepared_data as (
        SELECT unnest($5::text[]) as name,
        unnest($6::text[]) as description,
        unnest($7::program.program_level[]) as level),
game_ids AS (
    INSERT INTO program.programs (name, description, type, level)
    SELECT name, description, 'game', level
    FROM prepared_data
    RETURNING id
)
INSERT INTO public.games (id, win_team, lose_team, win_score, lose_score)
VALUES (unnest(ARRAY(SELECT id FROM game_ids)), unnest($1::uuid[]), unnest($2::uuid[]), unnest($3::int[]), unnest($4::int[]))
`

type InsertGamesParams struct {
	WinTeamArray     []uuid.UUID           `json:"win_team_array"`
	LoseTeamArray    []uuid.UUID           `json:"lose_team_array"`
	WinScoreArray    []int32               `json:"win_score_array"`
	LoseScoreArray   []int32               `json:"lose_score_array"`
	NameArray        []string              `json:"name_array"`
	DescriptionArray []string              `json:"description_array"`
	LevelArray       []ProgramProgramLevel `json:"level_array"`
}

func (q *Queries) InsertGames(ctx context.Context, arg InsertGamesParams) error {
	_, err := q.db.ExecContext(ctx, insertGames,
		pq.Array(arg.WinTeamArray),
		pq.Array(arg.LoseTeamArray),
		pq.Array(arg.WinScoreArray),
		pq.Array(arg.LoseScoreArray),
		pq.Array(arg.NameArray),
		pq.Array(arg.DescriptionArray),
		pq.Array(arg.LevelArray),
	)
	return err
}

const insertLocations = `-- name: InsertLocations :exec
INSERT INTO location.locations (name, address)
VALUES (unnest($1::text[]), unnest($2::text[]))
RETURNING id
`

type InsertLocationsParams struct {
	NameArray    []string `json:"name_array"`
	AddressArray []string `json:"address_array"`
}

func (q *Queries) InsertLocations(ctx context.Context, arg InsertLocationsParams) error {
	_, err := q.db.ExecContext(ctx, insertLocations, pq.Array(arg.NameArray), pq.Array(arg.AddressArray))
	return err
}

const insertPractices = `-- name: InsertPractices :exec
WITH prepared_data as (
        SELECT unnest($1::text[]) as name,
        unnest($2::text[]) as description,
        unnest($3::program.program_level[]) as level)
INSERT INTO program.programs (name, description, type, level)
SELECT name,
       description,
       'practice',
       level
FROM prepared_data
`

type InsertPracticesParams struct {
	NameArray        []string              `json:"name_array"`
	DescriptionArray []string              `json:"description_array"`
	LevelArray       []ProgramProgramLevel `json:"level_array"`
}

func (q *Queries) InsertPractices(ctx context.Context, arg InsertPracticesParams) error {
	_, err := q.db.ExecContext(ctx, insertPractices, pq.Array(arg.NameArray), pq.Array(arg.DescriptionArray), pq.Array(arg.LevelArray))
	return err
}

const insertTeams = `-- name: InsertTeams :many
WITH prepared_data AS (SELECT unnest($1::text[])          AS coach,
                              unnest($2::int[])             AS capacity,
                              unnest($3::text[]) AS name)
INSERT
INTO athletic.teams(capacity, coach_id, name)
SELECT capacity, u.id, name
FROM prepared_data
JOIN users.users u ON u.email = coach
RETURNING id
`

type InsertTeamsParams struct {
	CoachEmailArray []string `json:"coach_email_array"`
	CapacityArray   []int32  `json:"capacity_array"`
	NameArray       []string `json:"name_array"`
}

func (q *Queries) InsertTeams(ctx context.Context, arg InsertTeamsParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, insertTeams, pq.Array(arg.CoachEmailArray), pq.Array(arg.CapacityArray), pq.Array(arg.NameArray))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
