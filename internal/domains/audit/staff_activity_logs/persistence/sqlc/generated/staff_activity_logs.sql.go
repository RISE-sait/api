// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: staff_activity_logs.sql

package db_audit

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getStaffActivityLogs = `-- name: GetStaffActivityLogs :many
SELECT sal.id, sal.staff_id, sal.activity_description, sal.created_at,
       u.first_name, u.last_name, u.email
FROM audit.staff_activity_logs sal
JOIN staff.staff s ON sal.staff_id = s.id
JOIN users.users u ON s.id = u.id
WHERE
    ($3::uuid IS NULL OR sal.staff_id = $3::uuid)
  AND (
    $4::text IS NULL
        OR sal.activity_description ILIKE '%' || $4::text || '%'
    )
ORDER BY sal.created_at DESC
LIMIT $1 OFFSET $2
`

type GetStaffActivityLogsParams struct {
	Limit             int32          `json:"limit"`
	Offset            int32          `json:"offset"`
	StaffID           uuid.NullUUID  `json:"staff_id"`
	SearchDescription sql.NullString `json:"search_description"`
}

type GetStaffActivityLogsRow struct {
	ID                  uuid.UUID      `json:"id"`
	StaffID             uuid.UUID      `json:"staff_id"`
	ActivityDescription string         `json:"activity_description"`
	CreatedAt           time.Time      `json:"created_at"`
	FirstName           string         `json:"first_name"`
	LastName            string         `json:"last_name"`
	Email               sql.NullString `json:"email"`
}

func (q *Queries) GetStaffActivityLogs(ctx context.Context, arg GetStaffActivityLogsParams) ([]GetStaffActivityLogsRow, error) {
	rows, err := q.db.QueryContext(ctx, getStaffActivityLogs,
		arg.Limit,
		arg.Offset,
		arg.StaffID,
		arg.SearchDescription,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStaffActivityLogsRow
	for rows.Next() {
		var i GetStaffActivityLogsRow
		if err := rows.Scan(
			&i.ID,
			&i.StaffID,
			&i.ActivityDescription,
			&i.CreatedAt,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertStaffActivity = `-- name: InsertStaffActivity :exec
INSERT INTO audit.staff_activity_logs (staff_id, activity_description)
VALUES ($1, $2)
`

type InsertStaffActivityParams struct {
	StaffID             uuid.UUID `json:"staff_id"`
	ActivityDescription string    `json:"activity_description"`
}

func (q *Queries) InsertStaffActivity(ctx context.Context, arg InsertStaffActivityParams) error {
	_, err := q.db.ExecContext(ctx, insertStaffActivity, arg.StaffID, arg.ActivityDescription)
	return err
}
