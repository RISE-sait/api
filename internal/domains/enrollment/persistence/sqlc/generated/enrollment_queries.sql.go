// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: enrollment_queries.sql

package db_event

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const enrollCustomerInEvent = `-- name: EnrollCustomerInEvent :exec
INSERT INTO events.customer_enrollment (customer_id, event_id)
VALUES ($1, $2)
`

type EnrollCustomerInEventParams struct {
	CustomerID uuid.UUID `json:"customer_id"`
	EventID    uuid.UUID `json:"event_id"`
}

func (q *Queries) EnrollCustomerInEvent(ctx context.Context, arg EnrollCustomerInEventParams) error {
	_, err := q.db.ExecContext(ctx, enrollCustomerInEvent, arg.CustomerID, arg.EventID)
	return err
}

const enrollCustomerInMembershipPlan = `-- name: EnrollCustomerInMembershipPlan :exec
INSERT INTO users.customer_membership_plans (customer_id, membership_plan_id, status, start_date, renewal_date)
VALUES ($1, $2, $3, $4, $5)
`

type EnrollCustomerInMembershipPlanParams struct {
	CustomerID       uuid.UUID                  `json:"customer_id"`
	MembershipPlanID uuid.UUID                  `json:"membership_plan_id"`
	Status           MembershipMembershipStatus `json:"status"`
	StartDate        time.Time                  `json:"start_date"`
	RenewalDate      sql.NullTime               `json:"renewal_date"`
}

func (q *Queries) EnrollCustomerInMembershipPlan(ctx context.Context, arg EnrollCustomerInMembershipPlanParams) error {
	_, err := q.db.ExecContext(ctx, enrollCustomerInMembershipPlan,
		arg.CustomerID,
		arg.MembershipPlanID,
		arg.Status,
		arg.StartDate,
		arg.RenewalDate,
	)
	return err
}

const enrollCustomerInProgramEvents = `-- name: EnrollCustomerInProgramEvents :exec
WITH eligible_events AS (SELECT e.id
                         FROM events.events e
                         WHERE e.program_id = $1
                           AND e.start_at >= current_timestamp
                           AND NOT EXISTS (SELECT 1
                                           FROM events.customer_enrollment ce
                                           WHERE ce.customer_id = $2
                                             AND ce.event_id = e.id)),
     event_inserts as (
         INSERT INTO events.customer_enrollment (customer_id, event_id)
             SELECT $2, id FROM eligible_events)
INSERT
INTO program.customer_enrollment(customer_id, program_id, is_cancelled)
VALUES ($2, $1, false)
`

type EnrollCustomerInProgramEventsParams struct {
	ProgramID  uuid.UUID `json:"program_id"`
	CustomerID uuid.UUID `json:"customer_id"`
}

func (q *Queries) EnrollCustomerInProgramEvents(ctx context.Context, arg EnrollCustomerInProgramEventsParams) error {
	_, err := q.db.ExecContext(ctx, enrollCustomerInProgramEvents, arg.ProgramID, arg.CustomerID)
	return err
}

const getEventIsFull = `-- name: GetEventIsFull :one
SELECT COUNT(ce.customer_id) >= COALESCE(e.capacity, p.capacity, t.capacity)::boolean AS is_full
FROM events.events e
         LEFT JOIN program.programs p ON e.program_id = p.id
         LEFT JOIN athletic.teams t ON e.team_id = t.id
LEFT JOIN events.customer_enrollment ce ON e.id = ce.event_id
WHERE e.id = $1
GROUP BY e.id, e.capacity, p.capacity, t.capacity
`

func (q *Queries) GetEventIsFull(ctx context.Context, eventID uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, getEventIsFull, eventID)
	var is_full bool
	err := row.Scan(&is_full)
	return is_full, err
}

const unEnrollCustomer = `-- name: UnEnrollCustomer :execrows
UPDATE events.customer_enrollment
SET is_cancelled = true
WHERE customer_id = $1
  AND event_id = $2
`

type UnEnrollCustomerParams struct {
	CustomerID uuid.UUID `json:"customer_id"`
	EventID    uuid.UUID `json:"event_id"`
}

func (q *Queries) UnEnrollCustomer(ctx context.Context, arg UnEnrollCustomerParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, unEnrollCustomer, arg.CustomerID, arg.EventID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
