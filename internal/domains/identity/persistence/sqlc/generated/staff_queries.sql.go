// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: staff_queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createStaff = `-- name: CreateStaff :execrows
INSERT INTO staff (id, role_id, is_active) VALUES ((SELECT id from users WHERE email = $1), 
(SELECT id from staff_roles where role_name = $2), $3)
`

type CreateStaffParams struct {
	Email    string `json:"email"`
	RoleName string `json:"role_name"`
	IsActive bool   `json:"is_active"`
}

func (q *Queries) CreateStaff(ctx context.Context, arg CreateStaffParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createStaff, arg.Email, arg.RoleName, arg.IsActive)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getStaffByEmail = `-- name: GetStaffByEmail :one
SELECT oi.name, u.email, s.is_active, s.created_at, s.updated_at, sr.role_name FROM staff s
JOIN users u ON s.id = u.id
JOIN user_optional_info oi ON oi.id = u.id
JOIN staff_roles sr ON s.role_id = sr.id
WHERE u.email = $1
`

type GetStaffByEmailRow struct {
	Name      sql.NullString `json:"name"`
	Email     string         `json:"email"`
	IsActive  bool           `json:"is_active"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
	RoleName  string         `json:"role_name"`
}

func (q *Queries) GetStaffByEmail(ctx context.Context, email string) (GetStaffByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getStaffByEmail, email)
	var i GetStaffByEmailRow
	err := row.Scan(
		&i.Name,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoleName,
	)
	return i, err
}

const getStaffRoles = `-- name: GetStaffRoles :many
SELECT id, role_name FROM staff_roles
`

func (q *Queries) GetStaffRoles(ctx context.Context) ([]StaffRole, error) {
	rows, err := q.db.QueryContext(ctx, getStaffRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StaffRole
	for rows.Next() {
		var i StaffRole
		if err := rows.Scan(&i.ID, &i.RoleName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
