// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: event_queries.sql

package event_db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createEvent = `-- name: CreateEvent :exec
INSERT INTO events.events (schedule_id, start_at, end_at, created_by, updated_by, capacity)
VALUES ($1, $2, $3,
        $5::uuid, $5::uuid, $4)
`

type CreateEventParams struct {
	ScheduleID uuid.NullUUID `json:"schedule_id"`
	StartAt    time.Time     `json:"start_at"`
	EndAt      time.Time     `json:"end_at"`
	Capacity   sql.NullInt32 `json:"capacity"`
	CreatedBy  uuid.UUID     `json:"created_by"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.ExecContext(ctx, createEvent,
		arg.ScheduleID,
		arg.StartAt,
		arg.EndAt,
		arg.Capacity,
		arg.CreatedBy,
	)
	return err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE
FROM events.events
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, id)
	return err
}

const getEventById = `-- name: GetEventById :many
SELECT e.id, e.schedule_id, e.location_id, e.start_at, e.end_at, e.created_by, e.updated_by, e.capacity, e.created_at, e.updated_at,
       coalesce(e.capacity, p.capacity, t.capacity) AS capacity,

    p.id AS program_id,
       p.name          AS program_name,
       p.description   AS program_description,
       p."type"        AS program_type,

       l.id as location_id,
       l.name          AS location_name,
       l.address       AS location_address,

       -- Staff fields
       s.id            AS staff_id,
       sr.role_name    AS staff_role_name,
       us.email        AS staff_email,
       us.first_name   AS staff_first_name,
       us.last_name    AS staff_last_name,
       us.gender       AS staff_gender,
       us.phone        AS staff_phone,

       -- Customer fields
       uc.id           AS customer_id,
       uc.first_name   AS customer_first_name,
       uc.last_name    AS customer_last_name,
       uc.email        AS customer_email,
       uc.phone        AS customer_phone,
       uc.gender       AS customer_gender,

       -- Team field (added missing team reference)
       t.id            AS team_id,
       t.name          AS team_name,

       creator.id AS creator_id,
       creator.first_name AS creator_first_name,
       creator.last_name AS creator_last_name,
       creator.email AS creator_email,

       updater.id AS updater_id,
       updater.first_name AS updater_first_name,
       updater.last_name AS updater_last_name,
       updater.email AS updater_email
FROM events.events e
         LEFT JOIN public.schedules schedule ON e.schedule_id = schedule.id
         LEFT JOIN program.programs p ON schedule.program_id = p.id
         INNER JOIN location.locations l ON coalesce(e.location_id, schedule.location_id) = l.id
         LEFT JOIN events.staff es ON e.id = es.event_id
         LEFT JOIN staff.staff s ON es.staff_id = s.id
         LEFT JOIN staff.staff_roles sr ON s.role_id = sr.id
         LEFT JOIN users.users us ON s.id = us.id
         LEFT JOIN events.customer_enrollment ce ON e.id = ce.event_id
         LEFT JOIN users.users uc ON ce.customer_id = uc.id
         LEFT JOIN athletic.teams t ON t.id = schedule.team_id
         JOIN users.users creator ON creator.id = e.created_by
         JOIN users.users updater ON updater.id = e.updated_by
WHERE e.id = $1
ORDER BY s.id, uc.id
`

type GetEventByIdRow struct {
	ID                 uuid.UUID              `json:"id"`
	ScheduleID         uuid.NullUUID          `json:"schedule_id"`
	LocationID         uuid.NullUUID          `json:"location_id"`
	StartAt            time.Time              `json:"start_at"`
	EndAt              time.Time              `json:"end_at"`
	CreatedBy          uuid.UUID              `json:"created_by"`
	UpdatedBy          uuid.UUID              `json:"updated_by"`
	Capacity           sql.NullInt32          `json:"capacity"`
	CreatedAt          time.Time              `json:"created_at"`
	UpdatedAt          time.Time              `json:"updated_at"`
	Capacity_2         int32                  `json:"capacity_2"`
	ProgramID          uuid.NullUUID          `json:"program_id"`
	ProgramName        sql.NullString         `json:"program_name"`
	ProgramDescription sql.NullString         `json:"program_description"`
	ProgramType        NullProgramProgramType `json:"program_type"`
	LocationID_2       uuid.UUID              `json:"location_id_2"`
	LocationName       string                 `json:"location_name"`
	LocationAddress    string                 `json:"location_address"`
	StaffID            uuid.NullUUID          `json:"staff_id"`
	StaffRoleName      sql.NullString         `json:"staff_role_name"`
	StaffEmail         sql.NullString         `json:"staff_email"`
	StaffFirstName     sql.NullString         `json:"staff_first_name"`
	StaffLastName      sql.NullString         `json:"staff_last_name"`
	StaffGender        sql.NullString         `json:"staff_gender"`
	StaffPhone         sql.NullString         `json:"staff_phone"`
	CustomerID         uuid.NullUUID          `json:"customer_id"`
	CustomerFirstName  sql.NullString         `json:"customer_first_name"`
	CustomerLastName   sql.NullString         `json:"customer_last_name"`
	CustomerEmail      sql.NullString         `json:"customer_email"`
	CustomerPhone      sql.NullString         `json:"customer_phone"`
	CustomerGender     sql.NullString         `json:"customer_gender"`
	TeamID             uuid.NullUUID          `json:"team_id"`
	TeamName           sql.NullString         `json:"team_name"`
	CreatorID          uuid.UUID              `json:"creator_id"`
	CreatorFirstName   string                 `json:"creator_first_name"`
	CreatorLastName    string                 `json:"creator_last_name"`
	CreatorEmail       sql.NullString         `json:"creator_email"`
	UpdaterID          uuid.UUID              `json:"updater_id"`
	UpdaterFirstName   string                 `json:"updater_first_name"`
	UpdaterLastName    string                 `json:"updater_last_name"`
	UpdaterEmail       sql.NullString         `json:"updater_email"`
}

func (q *Queries) GetEventById(ctx context.Context, id uuid.UUID) ([]GetEventByIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getEventById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventByIdRow
	for rows.Next() {
		var i GetEventByIdRow
		if err := rows.Scan(
			&i.ID,
			&i.ScheduleID,
			&i.LocationID,
			&i.StartAt,
			&i.EndAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.Capacity,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Capacity_2,
			&i.ProgramID,
			&i.ProgramName,
			&i.ProgramDescription,
			&i.ProgramType,
			&i.LocationID_2,
			&i.LocationName,
			&i.LocationAddress,
			&i.StaffID,
			&i.StaffRoleName,
			&i.StaffEmail,
			&i.StaffFirstName,
			&i.StaffLastName,
			&i.StaffGender,
			&i.StaffPhone,
			&i.CustomerID,
			&i.CustomerFirstName,
			&i.CustomerLastName,
			&i.CustomerEmail,
			&i.CustomerPhone,
			&i.CustomerGender,
			&i.TeamID,
			&i.TeamName,
			&i.CreatorID,
			&i.CreatorFirstName,
			&i.CreatorLastName,
			&i.CreatorEmail,
			&i.UpdaterID,
			&i.UpdaterFirstName,
			&i.UpdaterLastName,
			&i.UpdaterEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventCreatedBy = `-- name: GetEventCreatedBy :one
SELECT created_by
FROM events.events
WHERE id = $1
`

func (q *Queries) GetEventCreatedBy(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getEventCreatedBy, id)
	var created_by uuid.UUID
	err := row.Scan(&created_by)
	return created_by, err
}

const getEvents = `-- name: GetEvents :many
SELECT distinct e.id, e.id, e.schedule_id, e.location_id, e.start_at, e.end_at, e.created_by, e.updated_by, e.capacity, e.created_at, e.updated_at,
                coalesce(e.capacity, p.capacity, t.capacity) AS capacity,

                p.id AS program_id,
                p.name        AS program_name,
                p.description AS program_description,
                p."type"      AS program_type,

                l.name        AS location_name,
                l.address     AS location_address,

                t.id        as team_id,
                t.name        as team_name,

                creator.id AS creator_id,
                creator.first_name AS creator_first_name,
                creator.last_name AS creator_last_name,
                creator.email AS creator_email,

                updater.id AS updater_id,
                updater.first_name AS updater_first_name,
                updater.last_name AS updater_last_name,
                updater.email AS updater_email

FROM events.events e
    LEFT JOIN public.schedules s ON e.schedule_id = s.id
         LEFT JOIN program.programs p ON s.program_id = p.id
    INNER JOIN location.locations l ON coalesce(e.location_id, s.location_id) = l.id
         LEFT JOIN events.staff es ON e.id = es.event_id
         LEFT JOIN events.customer_enrollment ce ON e.id = ce.event_id
         LEFT JOIN athletic.teams t ON t.id = s.team_id
    JOIN users.users creator ON creator.id = e.created_by
    JOIN users.users updater ON updater.id = e.updated_by

WHERE (
          ($1::uuid = s.program_id OR $1 IS NULL)
              AND ($2::uuid = s.location_id OR $2 IS NULL)
              AND ( e.start_at > $3::timestamp OR $3 IS NULL)
              AND (e.end_at < $4::timestamp OR $4 IS NULL)
              AND ($5 = p.type OR $5 IS NULL)
              AND ($6::uuid IS NULL OR ce.customer_id = $6 OR
                   es.staff_id = $6::uuid)
              AND ($7::uuid IS NULL OR s.team_id = $7)
              AND ($8::uuid IS NULL OR e.created_by = $8)
              AND ($9::uuid IS NULL OR e.updated_by = $9)
          )
`

type GetEventsParams struct {
	ProgramID  uuid.NullUUID          `json:"program_id"`
	LocationID uuid.NullUUID          `json:"location_id"`
	After      sql.NullTime           `json:"after"`
	Before     sql.NullTime           `json:"before"`
	Type       NullProgramProgramType `json:"type"`
	UserID     uuid.NullUUID          `json:"user_id"`
	TeamID     uuid.NullUUID          `json:"team_id"`
	CreatedBy  uuid.NullUUID          `json:"created_by"`
	UpdatedBy  uuid.NullUUID          `json:"updated_by"`
}

type GetEventsRow struct {
	ID                 uuid.UUID              `json:"id"`
	ID_2               uuid.UUID              `json:"id_2"`
	ScheduleID         uuid.NullUUID          `json:"schedule_id"`
	LocationID         uuid.NullUUID          `json:"location_id"`
	StartAt            time.Time              `json:"start_at"`
	EndAt              time.Time              `json:"end_at"`
	CreatedBy          uuid.UUID              `json:"created_by"`
	UpdatedBy          uuid.UUID              `json:"updated_by"`
	Capacity           sql.NullInt32          `json:"capacity"`
	CreatedAt          time.Time              `json:"created_at"`
	UpdatedAt          time.Time              `json:"updated_at"`
	Capacity_2         int32                  `json:"capacity_2"`
	ProgramID          uuid.NullUUID          `json:"program_id"`
	ProgramName        sql.NullString         `json:"program_name"`
	ProgramDescription sql.NullString         `json:"program_description"`
	ProgramType        NullProgramProgramType `json:"program_type"`
	LocationName       string                 `json:"location_name"`
	LocationAddress    string                 `json:"location_address"`
	TeamID             uuid.NullUUID          `json:"team_id"`
	TeamName           sql.NullString         `json:"team_name"`
	CreatorID          uuid.UUID              `json:"creator_id"`
	CreatorFirstName   string                 `json:"creator_first_name"`
	CreatorLastName    string                 `json:"creator_last_name"`
	CreatorEmail       sql.NullString         `json:"creator_email"`
	UpdaterID          uuid.UUID              `json:"updater_id"`
	UpdaterFirstName   string                 `json:"updater_first_name"`
	UpdaterLastName    string                 `json:"updater_last_name"`
	UpdaterEmail       sql.NullString         `json:"updater_email"`
}

func (q *Queries) GetEvents(ctx context.Context, arg GetEventsParams) ([]GetEventsRow, error) {
	rows, err := q.db.QueryContext(ctx, getEvents,
		arg.ProgramID,
		arg.LocationID,
		arg.After,
		arg.Before,
		arg.Type,
		arg.UserID,
		arg.TeamID,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventsRow
	for rows.Next() {
		var i GetEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.ID_2,
			&i.ScheduleID,
			&i.LocationID,
			&i.StartAt,
			&i.EndAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.Capacity,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Capacity_2,
			&i.ProgramID,
			&i.ProgramName,
			&i.ProgramDescription,
			&i.ProgramType,
			&i.LocationName,
			&i.LocationAddress,
			&i.TeamID,
			&i.TeamName,
			&i.CreatorID,
			&i.CreatorFirstName,
			&i.CreatorLastName,
			&i.CreatorEmail,
			&i.UpdaterID,
			&i.UpdaterFirstName,
			&i.UpdaterLastName,
			&i.UpdaterEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :exec
UPDATE events.events
SET start_at = $1,
    end_at = $2,
    schedule_id = $3,
    capacity = $4,
    updated_by = $6::uuid
WHERE id = $5
`

type UpdateEventParams struct {
	StartAt    time.Time     `json:"start_at"`
	EndAt      time.Time     `json:"end_at"`
	ScheduleID uuid.NullUUID `json:"schedule_id"`
	Capacity   sql.NullInt32 `json:"capacity"`
	ID         uuid.UUID     `json:"id"`
	UpdatedBy  uuid.UUID     `json:"updated_by"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) error {
	_, err := q.db.ExecContext(ctx, updateEvent,
		arg.StartAt,
		arg.EndAt,
		arg.ScheduleID,
		arg.Capacity,
		arg.ID,
		arg.UpdatedBy,
	)
	return err
}
