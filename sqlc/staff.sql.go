// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: staff.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createStaff = `-- name: CreateStaff :execrows
INSERT INTO staff (id, created_at, role,updated_at, is_active)
VALUES ((SELECT id FROM users WHERE email = $1), CURRENT_TIMESTAMP, $2, CURRENT_TIMESTAMP, $3)
`

type CreateStaffParams struct {
	Email    string        `json:"email"`
	Role     StaffRoleEnum `json:"role"`
	IsActive bool          `json:"is_active"`
}

func (q *Queries) CreateStaff(ctx context.Context, arg CreateStaffParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createStaff, arg.Email, arg.Role, arg.IsActive)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteStaff = `-- name: DeleteStaff :execrows
DELETE FROM staff WHERE id = (SELECT id FROM users WHERE email = $1)
`

func (q *Queries) DeleteStaff(ctx context.Context, email string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteStaff, email)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllStaff = `-- name: GetAllStaff :many
SELECT id, is_active, created_at, updated_at, role FROM staff
`

func (q *Queries) GetAllStaff(ctx context.Context) ([]Staff, error) {
	rows, err := q.db.QueryContext(ctx, getAllStaff)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Staff
	for rows.Next() {
		var i Staff
		if err := rows.Scan(
			&i.ID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStaffByEmail = `-- name: GetStaffByEmail :one
SELECT oi.name, u.email, s.is_active, s.created_at, s.updated_at, s.role FROM staff s 
JOIN users u ON s.id = u.id 
JOIN user_optional_info oi ON oi.id = u.id WHERE u.email = $1
`

type GetStaffByEmailRow struct {
	Name      sql.NullString `json:"name"`
	Email     string         `json:"email"`
	IsActive  bool           `json:"is_active"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
	Role      StaffRoleEnum  `json:"role"`
}

func (q *Queries) GetStaffByEmail(ctx context.Context, email string) (GetStaffByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getStaffByEmail, email)
	var i GetStaffByEmailRow
	err := row.Scan(
		&i.Name,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Role,
	)
	return i, err
}

const updateStaff = `-- name: UpdateStaff :execrows
UPDATE staff
SET 
    is_active = $1, 
    role = $2, 
    updated_at = CURRENT_TIMESTAMP
WHERE id = (SELECT id FROM users WHERE email = $3)
`

type UpdateStaffParams struct {
	IsActive bool          `json:"is_active"`
	Role     StaffRoleEnum `json:"role"`
	Email    string        `json:"email"`
}

func (q *Queries) UpdateStaff(ctx context.Context, arg UpdateStaffParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateStaff, arg.IsActive, arg.Role, arg.Email)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
