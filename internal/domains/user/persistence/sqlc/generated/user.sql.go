// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db_user

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const updateUserInfo = `-- name: UpdateUserInfo :execrows
UPDATE users.users
SET
    first_name = $2,
    last_name = $3,
    email = $4,
    phone = $5,
    dob = $6,
    country_alpha2_code = $7,
    has_marketing_email_consent = $8,
    has_sms_consent = $9,
    gender = $10,
    parent_id = $1,
    updated_at = current_timestamp
WHERE id = $11
`

type UpdateUserInfoParams struct {
	ParentID                 uuid.NullUUID  `json:"parent_id"`
	FirstName                string         `json:"first_name"`
	LastName                 string         `json:"last_name"`
	Email                    sql.NullString `json:"email"`
	Phone                    sql.NullString `json:"phone"`
	Dob                      time.Time      `json:"dob"`
	CountryAlpha2Code        string         `json:"country_alpha2_code"`
	HasMarketingEmailConsent bool           `json:"has_marketing_email_consent"`
	HasSmsConsent            bool           `json:"has_sms_consent"`
	Gender                   sql.NullString `json:"gender"`
	ID                       uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateUserInfo(ctx context.Context, arg UpdateUserInfoParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateUserInfo,
		arg.ParentID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.Dob,
		arg.CountryAlpha2Code,
		arg.HasMarketingEmailConsent,
		arg.HasSmsConsent,
		arg.Gender,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
