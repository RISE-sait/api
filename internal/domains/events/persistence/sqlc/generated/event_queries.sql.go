// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: event_queries.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createEvent = `-- name: CreateEvent :execrows
INSERT INTO events (begin_time, end_time, facility_id, course_id, day)
VALUES ($1, $2, $3, $4, $5)
`

type CreateEventParams struct {
	BeginTime  time.Time     `json:"begin_time"`
	EndTime    time.Time     `json:"end_time"`
	FacilityID uuid.UUID     `json:"facility_id"`
	CourseID   uuid.NullUUID `json:"course_id"`
	Day        DayEnum       `json:"day"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createEvent,
		arg.BeginTime,
		arg.EndTime,
		arg.FacilityID,
		arg.CourseID,
		arg.Day,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteEvent = `-- name: DeleteEvent :execrows
DELETE FROM events WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteEvent, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getEventById = `-- name: GetEventById :one
SELECT e.id, begin_time, end_time, e.day, c.name as course, f.name as facility
FROM events e
JOIN courses c ON c.id = e.course_id
JOIN facilities f ON f.id = e.facility_id
WHERE e.id = $1
`

type GetEventByIdRow struct {
	ID        uuid.UUID `json:"id"`
	BeginTime time.Time `json:"begin_time"`
	EndTime   time.Time `json:"end_time"`
	Day       DayEnum   `json:"day"`
	Course    string    `json:"course"`
	Facility  string    `json:"facility"`
}

func (q *Queries) GetEventById(ctx context.Context, id uuid.UUID) (GetEventByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getEventById, id)
	var i GetEventByIdRow
	err := row.Scan(
		&i.ID,
		&i.BeginTime,
		&i.EndTime,
		&i.Day,
		&i.Course,
		&i.Facility,
	)
	return i, err
}

const getEvents = `-- name: GetEvents :many
SELECT e.id, 
       begin_time, 
       end_time, 
       e.day, 
       c.name as course, 
       f.name as facility
FROM events e
JOIN courses c ON c.id = e.course_id
JOIN facilities f ON f.id = e.facility_id
WHERE 
    (begin_time >= $1 OR $1::text LIKE '%00:00:00%')
    AND (end_time <= $2 OR $2::text LIKE '%00:00:00%')
    AND (facility_id = $3 OR $3 = '00000000-0000-0000-0000-000000000000')
    AND (course_id = $4 or $4 IS NULL)
`

type GetEventsParams struct {
	BeginTime  time.Time     `json:"begin_time"`
	EndTime    time.Time     `json:"end_time"`
	FacilityID uuid.UUID     `json:"facility_id"`
	CourseID   uuid.NullUUID `json:"course_id"`
}

type GetEventsRow struct {
	ID        uuid.UUID `json:"id"`
	BeginTime time.Time `json:"begin_time"`
	EndTime   time.Time `json:"end_time"`
	Day       DayEnum   `json:"day"`
	Course    string    `json:"course"`
	Facility  string    `json:"facility"`
}

func (q *Queries) GetEvents(ctx context.Context, arg GetEventsParams) ([]GetEventsRow, error) {
	rows, err := q.db.QueryContext(ctx, getEvents,
		arg.BeginTime,
		arg.EndTime,
		arg.FacilityID,
		arg.CourseID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventsRow
	for rows.Next() {
		var i GetEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.BeginTime,
			&i.EndTime,
			&i.Day,
			&i.Course,
			&i.Facility,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :execrows
UPDATE events e
SET begin_time = $1, end_time = $2, facility_id = $3, course_id = $4, day = $5
WHERE e.id = $6
`

type UpdateEventParams struct {
	BeginTime  time.Time     `json:"begin_time"`
	EndTime    time.Time     `json:"end_time"`
	FacilityID uuid.UUID     `json:"facility_id"`
	CourseID   uuid.NullUUID `json:"course_id"`
	Day        DayEnum       `json:"day"`
	ID         uuid.UUID     `json:"id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateEvent,
		arg.BeginTime,
		arg.EndTime,
		arg.FacilityID,
		arg.CourseID,
		arg.Day,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
