// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customer.sql

package db_user

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getAthlete = `-- name: GetAthlete :one
SELECT id, profile_pic_url, wins, losses, points, steals, assists, rebounds, created_at, updated_at FROM users.athletes
WHERE id = $1
`

func (q *Queries) GetAthlete(ctx context.Context, id uuid.UUID) (UsersAthlete, error) {
	row := q.db.QueryRowContext(ctx, getAthlete, id)
	var i UsersAthlete
	err := row.Scan(
		&i.ID,
		&i.ProfilePicUrl,
		&i.Wins,
		&i.Losses,
		&i.Points,
		&i.Steals,
		&i.Assists,
		&i.Rebounds,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomers = `-- name: GetCustomers :many
SELECT id, hubspot_id, created_at, updated_at FROM users.users
WHERE
    hubspot_id = ANY($1::text[]) OR $1 IS NULL
`

func (q *Queries) GetCustomers(ctx context.Context, hubspotIds []string) ([]UsersUser, error) {
	rows, err := q.db.QueryContext(ctx, getCustomers, pq.Array(hubspotIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUser
	for rows.Next() {
		var i UsersUser
		if err := rows.Scan(
			&i.ID,
			&i.HubspotID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMembershipPlansByCustomer = `-- name: GetMembershipPlansByCustomer :many
SELECT cmp.id, cmp.customer_id, cmp.membership_plan_id, cmp.start_date, cmp.renewal_date, cmp.status, cmp.created_at, cmp.updated_at, m.name as membership_name
FROM public.customer_membership_plans cmp
         JOIN membership.membership_plans mp ON cmp.membership_plan_id = mp.id
         JOIN membership.memberships m ON m.id = mp.membership_id
WHERE cmp.customer_id = $1
`

type GetMembershipPlansByCustomerRow struct {
	ID               uuid.UUID        `json:"id"`
	CustomerID       uuid.UUID        `json:"customer_id"`
	MembershipPlanID uuid.UUID        `json:"membership_plan_id"`
	StartDate        time.Time        `json:"start_date"`
	RenewalDate      sql.NullTime     `json:"renewal_date"`
	Status           MembershipStatus `json:"status"`
	CreatedAt        time.Time        `json:"created_at"`
	UpdatedAt        time.Time        `json:"updated_at"`
	MembershipName   string           `json:"membership_name"`
}

func (q *Queries) GetMembershipPlansByCustomer(ctx context.Context, customerID uuid.UUID) ([]GetMembershipPlansByCustomerRow, error) {
	rows, err := q.db.QueryContext(ctx, getMembershipPlansByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMembershipPlansByCustomerRow
	for rows.Next() {
		var i GetMembershipPlansByCustomerRow
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.MembershipPlanID,
			&i.StartDate,
			&i.RenewalDate,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MembershipName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAthleteStats = `-- name: UpdateAthleteStats :execrows
UPDATE users.athletes
SET
    wins = COALESCE($1, wins),
    losses = COALESCE($2, losses),
    points = COALESCE($3, points),
    steals = COALESCE($4, steals),
    assists = COALESCE($5, assists),
    rebounds = COALESCE($6, rebounds),
    updated_at = NOW()
WHERE id = $7
`

type UpdateAthleteStatsParams struct {
	Wins     sql.NullInt32 `json:"wins"`
	Losses   sql.NullInt32 `json:"losses"`
	Points   sql.NullInt32 `json:"points"`
	Steals   sql.NullInt32 `json:"steals"`
	Assists  sql.NullInt32 `json:"assists"`
	Rebounds sql.NullInt32 `json:"rebounds"`
	ID       uuid.UUID     `json:"id"`
}

func (q *Queries) UpdateAthleteStats(ctx context.Context, arg UpdateAthleteStatsParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateAthleteStats,
		arg.Wins,
		arg.Losses,
		arg.Points,
		arg.Steals,
		arg.Assists,
		arg.Rebounds,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
