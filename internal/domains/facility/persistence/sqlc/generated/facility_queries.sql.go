// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: facility_queries.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFacility = `-- name: CreateFacility :one
WITH inserted_facility AS (
    INSERT INTO facility.facilities (name, address, facility_category_id)
    VALUES ($1, $2, $3)
    RETURNING id, name, address, facility_category_id
)
SELECT f.id, f.name, f.address, f.facility_category_id, fc.name AS facility_category_name
FROM inserted_facility f
JOIN facility.facility_categories fc ON f.facility_category_id = fc.id
`

type CreateFacilityParams struct {
	Name               string    `json:"name"`
	Address            string    `json:"address"`
	FacilityCategoryID uuid.UUID `json:"facility_category_id"`
}

type CreateFacilityRow struct {
	ID                   uuid.UUID `json:"id"`
	Name                 string    `json:"name"`
	Address              string    `json:"address"`
	FacilityCategoryID   uuid.UUID `json:"facility_category_id"`
	FacilityCategoryName string    `json:"facility_category_name"`
}

func (q *Queries) CreateFacility(ctx context.Context, arg CreateFacilityParams) (CreateFacilityRow, error) {
	row := q.db.QueryRowContext(ctx, createFacility, arg.Name, arg.Address, arg.FacilityCategoryID)
	var i CreateFacilityRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.FacilityCategoryID,
		&i.FacilityCategoryName,
	)
	return i, err
}

const deleteFacility = `-- name: DeleteFacility :execrows
DELETE FROM facility.facilities WHERE id = $1
`

func (q *Queries) DeleteFacility(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteFacility, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getFacilities = `-- name: GetFacilities :many
SELECT f.id, f.name, f.address, f.facility_category_id,  fc.name as facility_category_name
FROM facility.facilities f JOIN facility.facility_categories fc ON f.facility_category_id = fc.id
WHERE (f.name ILIKE '%' || $1 || '%' OR $1 IS NULL)
`

type GetFacilitiesRow struct {
	ID                   uuid.UUID `json:"id"`
	Name                 string    `json:"name"`
	Address              string    `json:"address"`
	FacilityCategoryID   uuid.UUID `json:"facility_category_id"`
	FacilityCategoryName string    `json:"facility_category_name"`
}

func (q *Queries) GetFacilities(ctx context.Context, facilityName sql.NullString) ([]GetFacilitiesRow, error) {
	rows, err := q.db.QueryContext(ctx, getFacilities, facilityName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFacilitiesRow
	for rows.Next() {
		var i GetFacilitiesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.FacilityCategoryID,
			&i.FacilityCategoryName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFacilityById = `-- name: GetFacilityById :one
SELECT f.id, f.name, f.address, f.facility_category_id, fc.name as facility_category_name
FROM facility.facilities f JOIN facility.facility_categories fc ON f.facility_category_id = fc.id WHERE f.id = $1
`

type GetFacilityByIdRow struct {
	ID                   uuid.UUID `json:"id"`
	Name                 string    `json:"name"`
	Address              string    `json:"address"`
	FacilityCategoryID   uuid.UUID `json:"facility_category_id"`
	FacilityCategoryName string    `json:"facility_category_name"`
}

func (q *Queries) GetFacilityById(ctx context.Context, id uuid.UUID) (GetFacilityByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getFacilityById, id)
	var i GetFacilityByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.FacilityCategoryID,
		&i.FacilityCategoryName,
	)
	return i, err
}

const updateFacility = `-- name: UpdateFacility :execrows
WITH updated as (
    UPDATE facility.facilities f
    SET name = $1, address = $2, facility_category_id = $3
    WHERE f.id = $4
    RETURNING id, name, address, facility_category_id
)
SELECT f.id, f.name, f.address, f.facility_category_id, fc.name as facility_category_name
FROM updated f
JOIN facility.facility_categories fc ON f.facility_category_id = fc.id
`

type UpdateFacilityParams struct {
	Name               string    `json:"name"`
	Address            string    `json:"address"`
	FacilityCategoryID uuid.UUID `json:"facility_category_id"`
	ID                 uuid.UUID `json:"id"`
}

func (q *Queries) UpdateFacility(ctx context.Context, arg UpdateFacilityParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateFacility,
		arg.Name,
		arg.Address,
		arg.FacilityCategoryID,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
