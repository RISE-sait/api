// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: child_accounts.sql

package db

import (
	"context"
	"database/sql"
)

const createPendingChildAccount = `-- name: CreatePendingChildAccount :execrows
INSERT INTO pending_child_accounts (user_email, parent_email, password ) VALUES ($1, $2, $3)
`

type CreatePendingChildAccountParams struct {
	UserEmail   string         `json:"user_email"`
	ParentEmail string         `json:"parent_email"`
	Password    sql.NullString `json:"password"`
}

func (q *Queries) CreatePendingChildAccount(ctx context.Context, arg CreatePendingChildAccountParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createPendingChildAccount, arg.UserEmail, arg.ParentEmail, arg.Password)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deletePendingChildAccount = `-- name: DeletePendingChildAccount :execrows
DELETE FROM pending_child_accounts WHERE user_email = $1
`

func (q *Queries) DeletePendingChildAccount(ctx context.Context, userEmail string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deletePendingChildAccount, userEmail)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getPendingChildAccountByChildEmail = `-- name: GetPendingChildAccountByChildEmail :one
SELECT id, parent_email, user_email, password, created_at from pending_child_accounts WHERE user_email = $1
`

func (q *Queries) GetPendingChildAccountByChildEmail(ctx context.Context, userEmail string) (PendingChildAccount, error) {
	row := q.db.QueryRowContext(ctx, getPendingChildAccountByChildEmail, userEmail)
	var i PendingChildAccount
	err := row.Scan(
		&i.ID,
		&i.ParentEmail,
		&i.UserEmail,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}
