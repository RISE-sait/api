// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: game_queries.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createGame = `-- name: CreateGame :exec
INSERT INTO game.games (
  id, home_team_id, away_team_id, home_score, away_score, start_time,
  end_time, location_id, status
) VALUES (
  gen_random_uuid(), $1, $2, $3, $4, $5, $6, $7, $8
)
`

type CreateGameParams struct {
	HomeTeamID uuid.UUID      `json:"home_team_id"`
	AwayTeamID uuid.UUID      `json:"away_team_id"`
	HomeScore  sql.NullInt32  `json:"home_score"`
	AwayScore  sql.NullInt32  `json:"away_score"`
	StartTime  time.Time      `json:"start_time"`
	EndTime    sql.NullTime   `json:"end_time"`
	LocationID uuid.UUID      `json:"location_id"`
	Status     sql.NullString `json:"status"`
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) error {
	_, err := q.db.ExecContext(ctx, createGame,
		arg.HomeTeamID,
		arg.AwayTeamID,
		arg.HomeScore,
		arg.AwayScore,
		arg.StartTime,
		arg.EndTime,
		arg.LocationID,
		arg.Status,
	)
	return err
}

const deleteGame = `-- name: DeleteGame :execrows
DELETE FROM game.games
WHERE id = $1
`

func (q *Queries) DeleteGame(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteGame, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getGameById = `-- name: GetGameById :one
SELECT 
    g.id,
    g.home_team_id,
    ht.name AS home_team_name,
    g.away_team_id,
    at.name AS away_team_name,
    g.home_score,
    g.away_score,
    g.start_time,
    g.end_time,
    g.location_id,
    loc.name AS location_name,
    g.status,
    g.created_at,
    g.updated_at
FROM game.games g
JOIN athletic.teams ht ON g.home_team_id = ht.id
JOIN athletic.teams at ON g.away_team_id = at.id
JOIN location.locations loc ON g.location_id = loc.id
WHERE g.id = $1
`

type GetGameByIdRow struct {
	ID           uuid.UUID      `json:"id"`
	HomeTeamID   uuid.UUID      `json:"home_team_id"`
	HomeTeamName string         `json:"home_team_name"`
	AwayTeamID   uuid.UUID      `json:"away_team_id"`
	AwayTeamName string         `json:"away_team_name"`
	HomeScore    sql.NullInt32  `json:"home_score"`
	AwayScore    sql.NullInt32  `json:"away_score"`
	StartTime    time.Time      `json:"start_time"`
	EndTime      sql.NullTime   `json:"end_time"`
	LocationID   uuid.UUID      `json:"location_id"`
	LocationName string         `json:"location_name"`
	Status       sql.NullString `json:"status"`
	CreatedAt    sql.NullTime   `json:"created_at"`
	UpdatedAt    sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetGameById(ctx context.Context, id uuid.UUID) (GetGameByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getGameById, id)
	var i GetGameByIdRow
	err := row.Scan(
		&i.ID,
		&i.HomeTeamID,
		&i.HomeTeamName,
		&i.AwayTeamID,
		&i.AwayTeamName,
		&i.HomeScore,
		&i.AwayScore,
		&i.StartTime,
		&i.EndTime,
		&i.LocationID,
		&i.LocationName,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGames = `-- name: GetGames :many
SELECT 
    g.id,
    g.home_team_id,
    ht.name AS home_team_name,
    g.away_team_id,
    at.name AS away_team_name,
    g.home_score,
    g.away_score,
    g.start_time,
    g.end_time,
    g.location_id,
    loc.name AS location_name,
    g.status,
    g.created_at,
    g.updated_at
FROM game.games g
JOIN athletic.teams ht ON g.home_team_id = ht.id
JOIN athletic.teams at ON g.away_team_id = at.id
JOIN location.locations loc ON g.location_id = loc.id
ORDER BY g.start_time DESC
`

type GetGamesRow struct {
	ID           uuid.UUID      `json:"id"`
	HomeTeamID   uuid.UUID      `json:"home_team_id"`
	HomeTeamName string         `json:"home_team_name"`
	AwayTeamID   uuid.UUID      `json:"away_team_id"`
	AwayTeamName string         `json:"away_team_name"`
	HomeScore    sql.NullInt32  `json:"home_score"`
	AwayScore    sql.NullInt32  `json:"away_score"`
	StartTime    time.Time      `json:"start_time"`
	EndTime      sql.NullTime   `json:"end_time"`
	LocationID   uuid.UUID      `json:"location_id"`
	LocationName string         `json:"location_name"`
	Status       sql.NullString `json:"status"`
	CreatedAt    sql.NullTime   `json:"created_at"`
	UpdatedAt    sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetGames(ctx context.Context) ([]GetGamesRow, error) {
	rows, err := q.db.QueryContext(ctx, getGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGamesRow
	for rows.Next() {
		var i GetGamesRow
		if err := rows.Scan(
			&i.ID,
			&i.HomeTeamID,
			&i.HomeTeamName,
			&i.AwayTeamID,
			&i.AwayTeamName,
			&i.HomeScore,
			&i.AwayScore,
			&i.StartTime,
			&i.EndTime,
			&i.LocationID,
			&i.LocationName,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGame = `-- name: UpdateGame :execrows
UPDATE game.games
SET home_score = $2,
    away_score = $3,
    start_time = $4,
    end_time = $5,
    location_id = $6,
    status = $7,
    updated_at = now()
WHERE id = $1
`

type UpdateGameParams struct {
	ID         uuid.UUID      `json:"id"`
	HomeScore  sql.NullInt32  `json:"home_score"`
	AwayScore  sql.NullInt32  `json:"away_score"`
	StartTime  time.Time      `json:"start_time"`
	EndTime    sql.NullTime   `json:"end_time"`
	LocationID uuid.UUID      `json:"location_id"`
	Status     sql.NullString `json:"status"`
}

func (q *Queries) UpdateGame(ctx context.Context, arg UpdateGameParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateGame,
		arg.ID,
		arg.HomeScore,
		arg.AwayScore,
		arg.StartTime,
		arg.EndTime,
		arg.LocationID,
		arg.Status,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
