// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: team_queries.sql

package db_team

import (
	"context"

	"github.com/google/uuid"
)

const createTeam = `-- name: CreateTeam :exec
INSERT INTO athletic.teams (name, capacity, coach_id)
VALUES ($1, $2, $3)
`

type CreateTeamParams struct {
	Name     string        `json:"name"`
	Capacity int32         `json:"capacity"`
	CoachID  uuid.NullUUID `json:"coach_id"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) error {
	_, err := q.db.ExecContext(ctx, createTeam, arg.Name, arg.Capacity, arg.CoachID)
	return err
}

const deleteTeam = `-- name: DeleteTeam :execrows
DELETE
FROM athletic.teams
WHERE id = $1
`

func (q *Queries) DeleteTeam(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteTeam, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getTeamById = `-- name: GetTeamById :one
SELECT id, name, capacity, created_at, updated_at, coach_id
FROM athletic.teams
WHERE id = $1
`

func (q *Queries) GetTeamById(ctx context.Context, id uuid.UUID) (AthleticTeam, error) {
	row := q.db.QueryRowContext(ctx, getTeamById, id)
	var i AthleticTeam
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Capacity,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CoachID,
	)
	return i, err
}

const getTeams = `-- name: GetTeams :many
SELECT id, name, capacity, created_at, updated_at, coach_id
FROM athletic.teams
`

func (q *Queries) GetTeams(ctx context.Context) ([]AthleticTeam, error) {
	rows, err := q.db.QueryContext(ctx, getTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AthleticTeam
	for rows.Next() {
		var i AthleticTeam
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Capacity,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CoachID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTeam = `-- name: UpdateTeam :execrows
UPDATE athletic.teams
SET name       = $1,
    coach_id   = $2,
    capacity   = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $4
`

type UpdateTeamParams struct {
	Name     string        `json:"name"`
	CoachID  uuid.NullUUID `json:"coach_id"`
	Capacity int32         `json:"capacity"`
	ID       uuid.UUID     `json:"id"`
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateTeam,
		arg.Name,
		arg.CoachID,
		arg.Capacity,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
