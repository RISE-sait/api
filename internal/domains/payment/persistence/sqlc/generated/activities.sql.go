// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: activities.sql

package db_payment

import (
	"context"

	"github.com/google/uuid"
)

const getEventIdByStripePriceId = `-- name: GetEventIdByStripePriceId :one
SELECT e.id
FROM events.events e
         LEFT JOIN program.programs p ON e.program_id = p.id
         LEFT JOIN program.fees f ON p.id = f.program_id
WHERE f.stripe_price_id = $1
`

func (q *Queries) GetEventIdByStripePriceId(ctx context.Context, stripePriceID string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getEventIdByStripePriceId, stripePriceID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getProgramIdByStripePriceId = `-- name: GetProgramIdByStripePriceId :one
SELECT program_id
FROM program.fees
WHERE stripe_price_id = $1
`

func (q *Queries) GetProgramIdByStripePriceId(ctx context.Context, stripePriceID string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getProgramIdByStripePriceId, stripePriceID)
	var program_id uuid.UUID
	err := row.Scan(&program_id)
	return program_id, err
}

const getRegistrationPriceIdForCustomer = `-- name: GetRegistrationPriceIdForCustomer :one
SELECT f.stripe_price_id, p.pay_per_event
FROM program.fees f
         JOIN program.programs p ON p.id = f.program_id
WHERE f.membership_id = (SELECT mp.membership_id
                         FROM users.customer_membership_plans cmp
                                  LEFT JOIN membership.membership_plans mp ON mp.id = cmp.membership_plan_id
                                  LEFT JOIN membership.memberships m ON m.id = mp.membership_id
                         WHERE customer_id = $1
                           AND status = 'active'
                         ORDER BY cmp.start_date DESC
                         LIMIT 1)
  AND f.program_id = $2
`

type GetRegistrationPriceIdForCustomerParams struct {
	CustomerID uuid.UUID `json:"customer_id"`
	ProgramID  uuid.UUID `json:"program_id"`
}

type GetRegistrationPriceIdForCustomerRow struct {
	StripePriceID string `json:"stripe_price_id"`
	PayPerEvent   bool   `json:"pay_per_event"`
}

func (q *Queries) GetRegistrationPriceIdForCustomer(ctx context.Context, arg GetRegistrationPriceIdForCustomerParams) (GetRegistrationPriceIdForCustomerRow, error) {
	row := q.db.QueryRowContext(ctx, getRegistrationPriceIdForCustomer, arg.CustomerID, arg.ProgramID)
	var i GetRegistrationPriceIdForCustomerRow
	err := row.Scan(&i.StripePriceID, &i.PayPerEvent)
	return i, err
}
