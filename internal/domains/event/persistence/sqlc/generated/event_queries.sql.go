// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: event_queries.sql

package db_event

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createEvents = `-- name: CreateEvents :execrows
WITH unnested_data AS (SELECT unnest($1::uuid[])                AS location_id,
                              unnest($2::uuid[])                 AS program_id,
                              unnest($3::uuid[]) AS court_id,
                              unnest($4::uuid[])                    AS team_id,
                              unnest($5::timestamptz[])       AS start_at,
                              unnest($6::timestamptz[])         AS end_at,
                              unnest($7::bool[]) AS is_date_time_modified,
                              unnest($8::uuid[])              AS recurrence_id,
                              unnest($9::uuid[])              AS created_by,
                              unnest($10::bool[])          AS is_cancelled,
                              unnest($11::text[])        AS cancellation_reason)
INSERT
INTO events.events (location_id,
                    court_id,
                    program_id,
                    team_id,
                    start_at,
                    end_at,
                    is_date_time_modified,
                    recurrence_id,
                    created_by,
                    updated_by,
                    is_cancelled,
                    cancellation_reason)
SELECT location_id,
        NULLIF(court_id, '00000000-0000-0000-0000-000000000000'::uuid),
       program_id,
       NULLIF(team_id, '00000000-0000-0000-0000-000000000000'::uuid),
       start_at,
       end_at,
       is_date_time_modified,
       NULLIF(recurrence_id, '00000000-0000-0000-0000-000000000000'::uuid),
       created_by,
       created_by,
       is_cancelled,
       NULLIF(cancellation_reason, '')
FROM unnested_data
ON CONFLICT ON CONSTRAINT no_overlapping_events
    DO NOTHING
`

type CreateEventsParams struct {
	LocationIds             []uuid.UUID `json:"location_ids"`
	ProgramIds              []uuid.UUID `json:"program_ids"`
	CourtIds                []uuid.UUID `json:"court_ids"`
	TeamIds                 []uuid.UUID `json:"team_ids"`
	StartAtArray            []time.Time `json:"start_at_array"`
	EndAtArray              []time.Time `json:"end_at_array"`
	IsDateTimeModifiedArray []bool      `json:"is_date_time_modified_array"`
	RecurrenceIds           []uuid.UUID `json:"recurrence_ids"`
	CreatedByIds            []uuid.UUID `json:"created_by_ids"`
	IsCancelledArray        []bool      `json:"is_cancelled_array"`
	CancellationReasons     []string    `json:"cancellation_reasons"`
}

func (q *Queries) CreateEvents(ctx context.Context, arg CreateEventsParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createEvents,
		pq.Array(arg.LocationIds),
		pq.Array(arg.ProgramIds),
		pq.Array(arg.CourtIds),
		pq.Array(arg.TeamIds),
		pq.Array(arg.StartAtArray),
		pq.Array(arg.EndAtArray),
		pq.Array(arg.IsDateTimeModifiedArray),
		pq.Array(arg.RecurrenceIds),
		pq.Array(arg.CreatedByIds),
		pq.Array(arg.IsCancelledArray),
		pq.Array(arg.CancellationReasons),
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteEventsByIds = `-- name: DeleteEventsByIds :exec
DELETE
FROM events.events
WHERE id = ANY ($1::uuid[])
`

func (q *Queries) DeleteEventsByIds(ctx context.Context, ids []uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEventsByIds, pq.Array(ids))
	return err
}

const getEventById = `-- name: GetEventById :one
SELECT e.id, e.location_id, e.program_id, e.team_id, e.start_at, e.end_at, e.created_by, e.updated_by, e.is_cancelled, e.cancellation_reason, e.created_at, e.updated_at, e.is_date_time_modified, e.recurrence_id, e.court_id,

       creator.first_name AS creator_first_name,
       creator.last_name  AS creator_last_name,

       updater.first_name AS updater_first_name,
       updater.last_name  AS updater_last_name,

       p.name             AS program_name,
       p.description      AS program_description,
       p."type"           AS program_type,
       l.name             AS location_name,
       l.address          AS location_address,
       c.name             AS court_name,
       t.name             AS team_name
FROM events.events e
         JOIN users.users creator ON creator.id = e.created_by
         JOIN users.users updater ON updater.id = e.updated_by
         JOIN program.programs p ON e.program_id = p.id
         JOIN location.locations l ON e.location_id = l.id
         LEFT JOIN location.courts c ON e.court_id = c.id
         LEFT JOIN athletic.teams t ON t.id = e.team_id
WHERE e.id = $1
`

type GetEventByIdRow struct {
	ID                 uuid.UUID          `json:"id"`
	LocationID         uuid.UUID          `json:"location_id"`
	ProgramID          uuid.UUID          `json:"program_id"`
	TeamID             uuid.NullUUID      `json:"team_id"`
	StartAt            time.Time          `json:"start_at"`
	EndAt              time.Time          `json:"end_at"`
	CreatedBy          uuid.UUID          `json:"created_by"`
	UpdatedBy          uuid.UUID          `json:"updated_by"`
	IsCancelled        bool               `json:"is_cancelled"`
	CancellationReason sql.NullString     `json:"cancellation_reason"`
	CreatedAt          time.Time          `json:"created_at"`
	UpdatedAt          time.Time          `json:"updated_at"`
	IsDateTimeModified bool               `json:"is_date_time_modified"`
	RecurrenceID       uuid.NullUUID      `json:"recurrence_id"`
	CourtID            uuid.NullUUID      `json:"court_id"`
	CreatorFirstName   string             `json:"creator_first_name"`
	CreatorLastName    string             `json:"creator_last_name"`
	UpdaterFirstName   string             `json:"updater_first_name"`
	UpdaterLastName    string             `json:"updater_last_name"`
	ProgramName        string             `json:"program_name"`
	ProgramDescription string             `json:"program_description"`
	ProgramType        ProgramProgramType `json:"program_type"`
	LocationName       string             `json:"location_name"`
	LocationAddress    string             `json:"location_address"`
	CourtName          sql.NullString     `json:"court_name"`
	TeamName           sql.NullString     `json:"team_name"`
}

func (q *Queries) GetEventById(ctx context.Context, id uuid.UUID) (GetEventByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getEventById, id)
	var i GetEventByIdRow
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.ProgramID,
		&i.TeamID,
		&i.StartAt,
		&i.EndAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.IsCancelled,
		&i.CancellationReason,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDateTimeModified,
		&i.RecurrenceID,
		&i.CourtID,
		&i.CreatorFirstName,
		&i.CreatorLastName,
		&i.UpdaterFirstName,
		&i.UpdaterLastName,
		&i.ProgramName,
		&i.ProgramDescription,
		&i.ProgramType,
		&i.LocationName,
		&i.LocationAddress,
		&i.CourtName,
		&i.TeamName,
	)
	return i, err
}

const getEventCustomers = `-- name: GetEventCustomers :many
SELECT u.id            AS customer_id,
       u.first_name    AS customer_first_name,
       u.last_name     AS customer_last_name,
       u.email         AS customer_email,
       u.phone         AS customer_phone,
       u.gender        AS customer_gender,

       ce.is_cancelled AS customer_enrollment_is_cancelled

FROM events.customer_enrollment ce
         JOIN users.users u ON ce.customer_id = u.id
WHERE ce.event_id = $1
`

type GetEventCustomersRow struct {
	CustomerID                    uuid.UUID      `json:"customer_id"`
	CustomerFirstName             string         `json:"customer_first_name"`
	CustomerLastName              string         `json:"customer_last_name"`
	CustomerEmail                 sql.NullString `json:"customer_email"`
	CustomerPhone                 sql.NullString `json:"customer_phone"`
	CustomerGender                sql.NullString `json:"customer_gender"`
	CustomerEnrollmentIsCancelled bool           `json:"customer_enrollment_is_cancelled"`
}

func (q *Queries) GetEventCustomers(ctx context.Context, eventID uuid.UUID) ([]GetEventCustomersRow, error) {
	rows, err := q.db.QueryContext(ctx, getEventCustomers, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventCustomersRow
	for rows.Next() {
		var i GetEventCustomersRow
		if err := rows.Scan(
			&i.CustomerID,
			&i.CustomerFirstName,
			&i.CustomerLastName,
			&i.CustomerEmail,
			&i.CustomerPhone,
			&i.CustomerGender,
			&i.CustomerEnrollmentIsCancelled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventStaffs = `-- name: GetEventStaffs :many
SELECT s.id         AS staff_id,
       sr.role_name AS staff_role_name,
       u.email      AS staff_email,
       u.first_name AS staff_first_name,
       u.last_name  AS staff_last_name,
       u.gender     AS staff_gender,
       u.phone      AS staff_phone
FROM events.staff es
         JOIN staff.staff s ON es.staff_id = s.id
         JOIN staff.staff_roles sr ON s.role_id = sr.id
         JOIN users.users u ON s.id = u.id
WHERE es.event_id = $1
`

type GetEventStaffsRow struct {
	StaffID        uuid.UUID      `json:"staff_id"`
	StaffRoleName  string         `json:"staff_role_name"`
	StaffEmail     sql.NullString `json:"staff_email"`
	StaffFirstName string         `json:"staff_first_name"`
	StaffLastName  string         `json:"staff_last_name"`
	StaffGender    sql.NullString `json:"staff_gender"`
	StaffPhone     sql.NullString `json:"staff_phone"`
}

func (q *Queries) GetEventStaffs(ctx context.Context, eventID uuid.UUID) ([]GetEventStaffsRow, error) {
	rows, err := q.db.QueryContext(ctx, getEventStaffs, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventStaffsRow
	for rows.Next() {
		var i GetEventStaffsRow
		if err := rows.Scan(
			&i.StaffID,
			&i.StaffRoleName,
			&i.StaffEmail,
			&i.StaffFirstName,
			&i.StaffLastName,
			&i.StaffGender,
			&i.StaffPhone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEvents = `-- name: GetEvents :many
SELECT DISTINCT e.id, e.location_id, e.program_id, e.team_id, e.start_at, e.end_at, e.created_by, e.updated_by, e.is_cancelled, e.cancellation_reason, e.created_at, e.updated_at, e.is_date_time_modified, e.recurrence_id, e.court_id,

                creator.first_name AS creator_first_name,
                creator.last_name  AS creator_last_name,

                updater.first_name AS updater_first_name,
                updater.last_name  AS updater_last_name,

                p.name             AS program_name,
                p.description      AS program_description,
                p."type"           AS program_type,
                l.name             AS location_name,
                l.address          AS location_address,
                c.name             AS court_name,
                t.name             as team_name
FROM events.events e
         JOIN program.programs p ON e.program_id = p.id
         JOIN location.locations l ON e.location_id = l.id
         LEFT JOIN location.courts c ON e.court_id = c.id
         LEFT JOIN events.staff es ON e.id = es.event_id
         LEFT JOIN events.customer_enrollment ce ON e.id = ce.event_id
         LEFT JOIN athletic.teams t ON t.id = e.team_id
         JOIN users.users creator ON creator.id = e.created_by
         JOIN users.users updater ON updater.id = e.updated_by
WHERE (
          ($1::uuid = e.program_id OR $1 IS NULL)
              AND ($2::uuid = e.location_id OR $2 IS NULL)
              AND ($3::uuid = e.court_id OR $3 IS NULL)
              AND ($4::timestamp <= e.start_at OR $4 IS NULL)
              AND ($5::timestamp >= e.end_at OR $5 IS NULL)
              AND ($6 = p.type OR $6 IS NULL)
              AND ($7::uuid IS NULL OR ce.customer_id = $7::uuid OR
                   es.staff_id = $7::uuid)
              AND ($8::uuid IS NULL OR e.team_id = $8)
              AND ($9::uuid IS NULL OR e.created_by = $9)
              AND ($10::uuid IS NULL OR e.updated_by = $10)
              AND ($11::boolean IS NULL OR e.is_cancelled = $11)
          )
          OFFSET $12 LIMIT $13
`

type GetEventsParams struct {
	ProgramID        uuid.NullUUID          `json:"program_id"`
	LocationID       uuid.NullUUID          `json:"location_id"`
	CourtID          uuid.NullUUID          `json:"court_id"`
	After            sql.NullTime           `json:"after"`
	Before           sql.NullTime           `json:"before"`
	Type             NullProgramProgramType `json:"type"`
	ParticipantID    uuid.NullUUID          `json:"participant_id"`
	TeamID           uuid.NullUUID          `json:"team_id"`
	CreatedBy        uuid.NullUUID          `json:"created_by"`
	UpdatedBy        uuid.NullUUID          `json:"updated_by"`
	IncludeCancelled sql.NullBool           `json:"include_cancelled"`
	Offset           sql.NullInt32          `json:"offset"`
	Limit            sql.NullInt32          `json:"limit"`
}

type GetEventsRow struct {
	ID                 uuid.UUID          `json:"id"`
	LocationID         uuid.UUID          `json:"location_id"`
	ProgramID          uuid.UUID          `json:"program_id"`
	TeamID             uuid.NullUUID      `json:"team_id"`
	StartAt            time.Time          `json:"start_at"`
	EndAt              time.Time          `json:"end_at"`
	CreatedBy          uuid.UUID          `json:"created_by"`
	UpdatedBy          uuid.UUID          `json:"updated_by"`
	IsCancelled        bool               `json:"is_cancelled"`
	CancellationReason sql.NullString     `json:"cancellation_reason"`
	CreatedAt          time.Time          `json:"created_at"`
	UpdatedAt          time.Time          `json:"updated_at"`
	IsDateTimeModified bool               `json:"is_date_time_modified"`
	RecurrenceID       uuid.NullUUID      `json:"recurrence_id"`
	CourtID            uuid.NullUUID      `json:"court_id"`
	CreatorFirstName   string             `json:"creator_first_name"`
	CreatorLastName    string             `json:"creator_last_name"`
	UpdaterFirstName   string             `json:"updater_first_name"`
	UpdaterLastName    string             `json:"updater_last_name"`
	ProgramName        string             `json:"program_name"`
	ProgramDescription string             `json:"program_description"`
	ProgramType        ProgramProgramType `json:"program_type"`
	LocationName       string             `json:"location_name"`
	LocationAddress    string             `json:"location_address"`
	CourtName          sql.NullString     `json:"court_name"`
	TeamName           sql.NullString     `json:"team_name"`
}

func (q *Queries) GetEvents(ctx context.Context, arg GetEventsParams) ([]GetEventsRow, error) {
	rows, err := q.db.QueryContext(ctx, getEvents,
		arg.ProgramID,
		arg.LocationID,
		arg.CourtID,
		arg.After,
		arg.Before,
		arg.Type,
		arg.ParticipantID,
		arg.TeamID,
		arg.CreatedBy,
		arg.UpdatedBy,
		arg.IncludeCancelled,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventsRow
	for rows.Next() {
		var i GetEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.LocationID,
			&i.ProgramID,
			&i.TeamID,
			&i.StartAt,
			&i.EndAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.IsCancelled,
			&i.CancellationReason,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDateTimeModified,
			&i.RecurrenceID,
			&i.CourtID,
			&i.CreatorFirstName,
			&i.CreatorLastName,
			&i.UpdaterFirstName,
			&i.UpdaterLastName,
			&i.ProgramName,
			&i.ProgramDescription,
			&i.ProgramType,
			&i.LocationName,
			&i.LocationAddress,
			&i.CourtName,
			&i.TeamName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events.events
SET start_at              = $1,
    end_at                = $2,
    location_id           = $3,
    program_id            = $4,
    court_id              = $5,
    team_id               = $6,
    is_cancelled          = $7,
    cancellation_reason   = $8,
    updated_at            = current_timestamp,
    updated_by            = $10::uuid,
    is_date_time_modified = (
        recurrence_id IS NOT NULL
        )
WHERE id = $9
RETURNING id, location_id, program_id, team_id, start_at, end_at, created_by, updated_by, is_cancelled, cancellation_reason, created_at, updated_at, is_date_time_modified, recurrence_id, court_id
`

type UpdateEventParams struct {
	StartAt            time.Time      `json:"start_at"`
	EndAt              time.Time      `json:"end_at"`
	LocationID         uuid.UUID      `json:"location_id"`
	ProgramID          uuid.UUID      `json:"program_id"`
	CourtID            uuid.NullUUID  `json:"court_id"`
	TeamID             uuid.NullUUID  `json:"team_id"`
	IsCancelled        bool           `json:"is_cancelled"`
	CancellationReason sql.NullString `json:"cancellation_reason"`
	ID                 uuid.UUID      `json:"id"`
	UpdatedBy          uuid.UUID      `json:"updated_by"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (EventsEvent, error) {
	row := q.db.QueryRowContext(ctx, updateEvent,
		arg.StartAt,
		arg.EndAt,
		arg.LocationID,
		arg.ProgramID,
		arg.CourtID,
		arg.TeamID,
		arg.IsCancelled,
		arg.CancellationReason,
		arg.ID,
		arg.UpdatedBy,
	)
	var i EventsEvent
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.ProgramID,
		&i.TeamID,
		&i.StartAt,
		&i.EndAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.IsCancelled,
		&i.CancellationReason,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDateTimeModified,
		&i.RecurrenceID,
		&i.CourtID,
	)
	return i, err
}
