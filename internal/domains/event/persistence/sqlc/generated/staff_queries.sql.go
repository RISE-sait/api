// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: staff_queries.sql

package event_db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const assignStaffToEvent = `-- name: AssignStaffToEvent :execrows
INSERT INTO staff (event_id, staff_id)
VALUES ($1, $2)
`

type AssignStaffToEventParams struct {
	EventID uuid.UUID `json:"event_id"`
	StaffID uuid.UUID `json:"staff_id"`
}

func (q *Queries) AssignStaffToEvent(ctx context.Context, arg AssignStaffToEventParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, assignStaffToEvent, arg.EventID, arg.StaffID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getStaffsAssignedToEvent = `-- name: GetStaffsAssignedToEvent :many
SELECT s.id, s.is_active, s.created_at, s.updated_at, s.role_id, sr.role_name, u.hubspot_id
FROM users.staff s
         JOIN users.staff_roles sr ON s.role_id = sr.id
         JOIN users.users u ON u.id = s.id
         JOIN staff ON s.id = staff.staff_id
WHERE event_id = $1
`

type GetStaffsAssignedToEventRow struct {
	ID        uuid.UUID      `json:"id"`
	IsActive  bool           `json:"is_active"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
	RoleID    uuid.UUID      `json:"role_id"`
	RoleName  string         `json:"role_name"`
	HubspotID sql.NullString `json:"hubspot_id"`
}

func (q *Queries) GetStaffsAssignedToEvent(ctx context.Context, eventID uuid.UUID) ([]GetStaffsAssignedToEventRow, error) {
	rows, err := q.db.QueryContext(ctx, getStaffsAssignedToEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStaffsAssignedToEventRow
	for rows.Next() {
		var i GetStaffsAssignedToEventRow
		if err := rows.Scan(
			&i.ID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RoleID,
			&i.RoleName,
			&i.HubspotID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unassignStaffFromEvent = `-- name: UnassignStaffFromEvent :execrows
DELETE FROM staff where staff_id = $1
                          and event_id = $2
`

type UnassignStaffFromEventParams struct {
	StaffID uuid.UUID `json:"staff_id"`
	EventID uuid.UUID `json:"event_id"`
}

func (q *Queries) UnassignStaffFromEvent(ctx context.Context, arg UnassignStaffFromEventParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, unassignStaffFromEvent, arg.StaffID, arg.EventID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
