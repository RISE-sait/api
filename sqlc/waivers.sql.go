// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: waivers.sql

package db

import (
	"context"
)

const getAllUniqueWaiverDocs = `-- name: GetAllUniqueWaiverDocs :many
SELECT DISTINCT ON (document_link) id, email, document_link, is_signed, created_at, updated_at
FROM waivers
`

func (q *Queries) GetAllUniqueWaiverDocs(ctx context.Context) ([]Waiver, error) {
	rows, err := q.db.QueryContext(ctx, getAllUniqueWaiverDocs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Waiver
	for rows.Next() {
		var i Waiver
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.DocumentLink,
			&i.IsSigned,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWaiverByEmailAndDocLink = `-- name: GetWaiverByEmailAndDocLink :one
SELECT id, email, document_link, is_signed, created_at, updated_at
FROM waivers
WHERE email = $1
AND document_link = $2
`

type GetWaiverByEmailAndDocLinkParams struct {
	Email        string `json:"email"`
	DocumentLink string `json:"document_link"`
}

func (q *Queries) GetWaiverByEmailAndDocLink(ctx context.Context, arg GetWaiverByEmailAndDocLinkParams) (Waiver, error) {
	row := q.db.QueryRowContext(ctx, getWaiverByEmailAndDocLink, arg.Email, arg.DocumentLink)
	var i Waiver
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DocumentLink,
		&i.IsSigned,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateWaiverSignedStatusByEmail = `-- name: UpdateWaiverSignedStatusByEmail :execrows
UPDATE waivers
SET is_signed = $2, updated_at = CURRENT_TIMESTAMP
WHERE email = $1
`

type UpdateWaiverSignedStatusByEmailParams struct {
	Email    string `json:"email"`
	IsSigned bool   `json:"is_signed"`
}

func (q *Queries) UpdateWaiverSignedStatusByEmail(ctx context.Context, arg UpdateWaiverSignedStatusByEmailParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateWaiverSignedStatusByEmail, arg.Email, arg.IsSigned)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
