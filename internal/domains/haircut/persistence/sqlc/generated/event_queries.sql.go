// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: event_queries.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBarberEvent = `-- name: CreateBarberEvent :one
INSERT INTO barber.barber_events (begin_date_time, end_date_time, barber_id, customer_id)
VALUES ($1, $2, $3, $4)
RETURNING id, begin_date_time, end_date_time, customer_id, barber_id, created_at, updated_at
`

type CreateBarberEventParams struct {
	BeginDateTime time.Time `json:"begin_date_time"`
	EndDateTime   time.Time `json:"end_date_time"`
	BarberID      uuid.UUID `json:"barber_id"`
	CustomerID    uuid.UUID `json:"customer_id"`
}

func (q *Queries) CreateBarberEvent(ctx context.Context, arg CreateBarberEventParams) (BarberBarberEvent, error) {
	row := q.db.QueryRowContext(ctx, createBarberEvent,
		arg.BeginDateTime,
		arg.EndDateTime,
		arg.BarberID,
		arg.CustomerID,
	)
	var i BarberBarberEvent
	err := row.Scan(
		&i.ID,
		&i.BeginDateTime,
		&i.EndDateTime,
		&i.CustomerID,
		&i.BarberID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :execrows
DELETE FROM barber.barber_events
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteEvent, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getBarberEvents = `-- name: GetBarberEvents :many
SELECT id, begin_date_time, end_date_time, customer_id, barber_id, created_at, updated_at
FROM barber.barber_events
WHERE
    (barber_id = $1 OR $1 IS NULL) -- Filter by barber_id
  AND (customer_id = $2 OR $2 IS NULL)
`

type GetBarberEventsParams struct {
	BarberID   uuid.NullUUID `json:"barber_id"`
	CustomerID uuid.NullUUID `json:"customer_id"`
}

func (q *Queries) GetBarberEvents(ctx context.Context, arg GetBarberEventsParams) ([]BarberBarberEvent, error) {
	rows, err := q.db.QueryContext(ctx, getBarberEvents, arg.BarberID, arg.CustomerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BarberBarberEvent
	for rows.Next() {
		var i BarberBarberEvent
		if err := rows.Scan(
			&i.ID,
			&i.BeginDateTime,
			&i.EndDateTime,
			&i.CustomerID,
			&i.BarberID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventById = `-- name: GetEventById :one
SELECT id, begin_date_time, end_date_time, customer_id, barber_id, created_at, updated_at
FROM barber.barber_events
WHERE id = $1
`

func (q *Queries) GetEventById(ctx context.Context, id uuid.UUID) (BarberBarberEvent, error) {
	row := q.db.QueryRowContext(ctx, getEventById, id)
	var i BarberBarberEvent
	err := row.Scan(
		&i.ID,
		&i.BeginDateTime,
		&i.EndDateTime,
		&i.CustomerID,
		&i.BarberID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE barber.barber_events
SET
    begin_date_time = $1,
    end_date_time = $2,
    barber_id = $3,
    customer_id = $4
WHERE id = $5
RETURNING id, begin_date_time, end_date_time, customer_id, barber_id, created_at, updated_at
`

type UpdateEventParams struct {
	BeginDateTime time.Time `json:"begin_date_time"`
	EndDateTime   time.Time `json:"end_date_time"`
	BarberID      uuid.UUID `json:"barber_id"`
	CustomerID    uuid.UUID `json:"customer_id"`
	ID            uuid.UUID `json:"id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (BarberBarberEvent, error) {
	row := q.db.QueryRowContext(ctx, updateEvent,
		arg.BeginDateTime,
		arg.EndDateTime,
		arg.BarberID,
		arg.CustomerID,
		arg.ID,
	)
	var i BarberBarberEvent
	err := row.Scan(
		&i.ID,
		&i.BeginDateTime,
		&i.EndDateTime,
		&i.CustomerID,
		&i.BarberID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
