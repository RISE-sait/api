// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type AuditAuditStatus string

const (
	AuditAuditStatusPENDING   AuditAuditStatus = "PENDING"
	AuditAuditStatusCOMPLETED AuditAuditStatus = "COMPLETED"
	AuditAuditStatusFAILED    AuditAuditStatus = "FAILED"
)

func (e *AuditAuditStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuditAuditStatus(s)
	case string:
		*e = AuditAuditStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AuditAuditStatus: %T", src)
	}
	return nil
}

type NullAuditAuditStatus struct {
	AuditAuditStatus AuditAuditStatus `json:"audit_audit_status"`
	Valid            bool             `json:"valid"` // Valid is true if AuditAuditStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuditAuditStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AuditAuditStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuditAuditStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuditAuditStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuditAuditStatus), nil
}

type MembershipMembershipStatus string

const (
	MembershipMembershipStatusActive   MembershipMembershipStatus = "active"
	MembershipMembershipStatusInactive MembershipMembershipStatus = "inactive"
	MembershipMembershipStatusCanceled MembershipMembershipStatus = "canceled"
	MembershipMembershipStatusExpired  MembershipMembershipStatus = "expired"
)

func (e *MembershipMembershipStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MembershipMembershipStatus(s)
	case string:
		*e = MembershipMembershipStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for MembershipMembershipStatus: %T", src)
	}
	return nil
}

type NullMembershipMembershipStatus struct {
	MembershipMembershipStatus MembershipMembershipStatus `json:"membership_membership_status"`
	Valid                      bool                       `json:"valid"` // Valid is true if MembershipMembershipStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMembershipMembershipStatus) Scan(value interface{}) error {
	if value == nil {
		ns.MembershipMembershipStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MembershipMembershipStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMembershipMembershipStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MembershipMembershipStatus), nil
}

type PaymentStatus string

const (
	PaymentStatusPending PaymentStatus = "pending"
	PaymentStatusPaid    PaymentStatus = "paid"
	PaymentStatusFailed  PaymentStatus = "failed"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus `json:"payment_status"`
	Valid         bool          `json:"valid"` // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

type ProgramProgramLevel string

const (
	ProgramProgramLevelBeginner     ProgramProgramLevel = "beginner"
	ProgramProgramLevelIntermediate ProgramProgramLevel = "intermediate"
	ProgramProgramLevelAdvanced     ProgramProgramLevel = "advanced"
	ProgramProgramLevelAll          ProgramProgramLevel = "all"
)

func (e *ProgramProgramLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProgramProgramLevel(s)
	case string:
		*e = ProgramProgramLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for ProgramProgramLevel: %T", src)
	}
	return nil
}

type NullProgramProgramLevel struct {
	ProgramProgramLevel ProgramProgramLevel `json:"program_program_level"`
	Valid               bool                `json:"valid"` // Valid is true if ProgramProgramLevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProgramProgramLevel) Scan(value interface{}) error {
	if value == nil {
		ns.ProgramProgramLevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProgramProgramLevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProgramProgramLevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProgramProgramLevel), nil
}

type ProgramProgramType string

const (
	ProgramProgramTypePractice ProgramProgramType = "practice"
	ProgramProgramTypeCourse   ProgramProgramType = "course"
	ProgramProgramTypeOther    ProgramProgramType = "other"
)

func (e *ProgramProgramType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProgramProgramType(s)
	case string:
		*e = ProgramProgramType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProgramProgramType: %T", src)
	}
	return nil
}

type NullProgramProgramType struct {
	ProgramProgramType ProgramProgramType `json:"program_program_type"`
	Valid              bool               `json:"valid"` // Valid is true if ProgramProgramType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProgramProgramType) Scan(value interface{}) error {
	if value == nil {
		ns.ProgramProgramType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProgramProgramType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProgramProgramType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProgramProgramType), nil
}

type AthleticAthlete struct {
	ID        uuid.UUID     `json:"id"`
	Wins      int32         `json:"wins"`
	Losses    int32         `json:"losses"`
	Points    int32         `json:"points"`
	Steals    int32         `json:"steals"`
	Assists   int32         `json:"assists"`
	Rebounds  int32         `json:"rebounds"`
	CreatedAt time.Time     `json:"created_at"`
	UpdatedAt time.Time     `json:"updated_at"`
	TeamID    uuid.NullUUID `json:"team_id"`
}

type AthleticCoachStat struct {
	ID        uuid.UUID `json:"id"`
	Wins      int32     `json:"wins"`
	Losses    int32     `json:"losses"`
	CoachID   uuid.UUID `json:"coach_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type AthleticTeam struct {
	ID        uuid.UUID      `json:"id"`
	Name      string         `json:"name"`
	Capacity  int32          `json:"capacity"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
	CoachID   uuid.NullUUID  `json:"coach_id"`
	LogoUrl   sql.NullString `json:"logo_url"`
}

type AuditOutbox struct {
	ID           uuid.UUID        `json:"id"`
	SqlStatement string           `json:"sql_statement"`
	Status       AuditAuditStatus `json:"status"`
	CreatedAt    time.Time        `json:"created_at"`
}

type AuditStaffActivityLog struct {
	ID                  uuid.UUID `json:"id"`
	StaffID             uuid.UUID `json:"staff_id"`
	ActivityDescription string    `json:"activity_description"`
	CreatedAt           time.Time `json:"created_at"`
}

type EventsAttendance struct {
	ID          uuid.UUID    `json:"id"`
	EventID     uuid.UUID    `json:"event_id"`
	UserID      uuid.UUID    `json:"user_id"`
	CheckInTime sql.NullTime `json:"check_in_time"`
}

type EventsCustomerEnrollment struct {
	ID               uuid.UUID     `json:"id"`
	CustomerID       uuid.UUID     `json:"customer_id"`
	EventID          uuid.UUID     `json:"event_id"`
	CreatedAt        time.Time     `json:"created_at"`
	UpdatedAt        time.Time     `json:"updated_at"`
	CheckedInAt      sql.NullTime  `json:"checked_in_at"`
	IsCancelled      bool          `json:"is_cancelled"`
	PaymentStatus    PaymentStatus `json:"payment_status"`
	PaymentExpiredAt sql.NullTime  `json:"payment_expired_at"`
}

type EventsEvent struct {
	ID                 uuid.UUID      `json:"id"`
	LocationID         uuid.UUID      `json:"location_id"`
	ProgramID          uuid.UUID      `json:"program_id"`
	TeamID             uuid.NullUUID  `json:"team_id"`
	StartAt            time.Time      `json:"start_at"`
	EndAt              time.Time      `json:"end_at"`
	CreatedBy          uuid.UUID      `json:"created_by"`
	UpdatedBy          uuid.UUID      `json:"updated_by"`
	IsCancelled        bool           `json:"is_cancelled"`
	CancellationReason sql.NullString `json:"cancellation_reason"`
	CreatedAt          time.Time      `json:"created_at"`
	UpdatedAt          time.Time      `json:"updated_at"`
	IsDateTimeModified bool           `json:"is_date_time_modified"`
	RecurrenceID       uuid.NullUUID  `json:"recurrence_id"`
}

type EventsStaff struct {
	EventID uuid.UUID `json:"event_id"`
	StaffID uuid.UUID `json:"staff_id"`
}

type GameGame struct {
	ID         uuid.UUID      `json:"id"`
	HomeTeamID uuid.UUID      `json:"home_team_id"`
	AwayTeamID uuid.UUID      `json:"away_team_id"`
	HomeScore  sql.NullInt32  `json:"home_score"`
	AwayScore  sql.NullInt32  `json:"away_score"`
	StartTime  time.Time      `json:"start_time"`
	EndTime    sql.NullTime   `json:"end_time"`
	LocationID uuid.UUID      `json:"location_id"`
	Status     sql.NullString `json:"status"`
	CreatedAt  sql.NullTime   `json:"created_at"`
	UpdatedAt  sql.NullTime   `json:"updated_at"`
}

type HaircutBarberService struct {
	ID        uuid.UUID `json:"id"`
	BarberID  uuid.UUID `json:"barber_id"`
	ServiceID uuid.UUID `json:"service_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type HaircutEvent struct {
	ID            uuid.UUID `json:"id"`
	BeginDateTime time.Time `json:"begin_date_time"`
	EndDateTime   time.Time `json:"end_date_time"`
	CustomerID    uuid.UUID `json:"customer_id"`
	BarberID      uuid.UUID `json:"barber_id"`
	ServiceTypeID uuid.UUID `json:"service_type_id"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
}

type HaircutHaircutService struct {
	ID            uuid.UUID      `json:"id"`
	Name          string         `json:"name"`
	Description   sql.NullString `json:"description"`
	Price         string         `json:"price"`
	DurationInMin int32          `json:"duration_in_min"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
}

type LocationLocation struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Address   string    `json:"address"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type MembershipMembership struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Benefits    string    `json:"benefits"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

type MembershipMembershipPlan struct {
	ID                 uuid.UUID      `json:"id"`
	Name               string         `json:"name"`
	StripePriceID      string         `json:"stripe_price_id"`
	StripeJoiningFeeID sql.NullString `json:"stripe_joining_fee_id"`
	MembershipID       uuid.UUID      `json:"membership_id"`
	AmtPeriods         sql.NullInt32  `json:"amt_periods"`
	CreatedAt          time.Time      `json:"created_at"`
	UpdatedAt          time.Time      `json:"updated_at"`
	UnitAmount         sql.NullInt32  `json:"unit_amount"`
	Currency           sql.NullString `json:"currency"`
	Interval           sql.NullString `json:"interval"`
}

type ProgramCustomerEnrollment struct {
	ID               uuid.UUID     `json:"id"`
	CustomerID       uuid.UUID     `json:"customer_id"`
	ProgramID        uuid.UUID     `json:"program_id"`
	CreatedAt        time.Time     `json:"created_at"`
	UpdatedAt        time.Time     `json:"updated_at"`
	IsCancelled      bool          `json:"is_cancelled"`
	PaymentStatus    PaymentStatus `json:"payment_status"`
	PaymentExpiredAt sql.NullTime  `json:"payment_expired_at"`
}

type ProgramFee struct {
	ProgramID     uuid.UUID     `json:"program_id"`
	MembershipID  uuid.NullUUID `json:"membership_id"`
	StripePriceID string        `json:"stripe_price_id"`
	CreatedAt     time.Time     `json:"created_at"`
	UpdatedAt     time.Time     `json:"updated_at"`
}

type ProgramGame struct {
	ID        uuid.UUID `json:"id"`
	WinTeam   uuid.UUID `json:"win_team"`
	LoseTeam  uuid.UUID `json:"lose_team"`
	WinScore  int32     `json:"win_score"`
	LoseScore int32     `json:"lose_score"`
}

type ProgramProgram struct {
	ID          uuid.UUID           `json:"id"`
	Name        string              `json:"name"`
	Description string              `json:"description"`
	Level       ProgramProgramLevel `json:"level"`
	Type        ProgramProgramType  `json:"type"`
	Capacity    sql.NullInt32       `json:"capacity"`
	CreatedAt   time.Time           `json:"created_at"`
	UpdatedAt   time.Time           `json:"updated_at"`
	PayPerEvent bool                `json:"pay_per_event"`
}

type StaffPendingStaff struct {
	ID                uuid.UUID      `json:"id"`
	FirstName         string         `json:"first_name"`
	LastName          string         `json:"last_name"`
	Email             string         `json:"email"`
	Gender            sql.NullString `json:"gender"`
	Phone             sql.NullString `json:"phone"`
	CountryAlpha2Code string         `json:"country_alpha2_code"`
	RoleID            uuid.UUID      `json:"role_id"`
	CreatedAt         sql.NullTime   `json:"created_at"`
	UpdatedAt         sql.NullTime   `json:"updated_at"`
	Dob               time.Time      `json:"dob"`
}

type StaffStaff struct {
	ID        uuid.UUID `json:"id"`
	IsActive  bool      `json:"is_active"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	RoleID    uuid.UUID `json:"role_id"`
}

type StaffStaffRole struct {
	ID        uuid.UUID `json:"id"`
	RoleName  string    `json:"role_name"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type UsersCustomerCredit struct {
	CustomerID uuid.UUID `json:"customer_id"`
	Credits    int32     `json:"credits"`
}

type UsersCustomerMembershipPlan struct {
	ID               uuid.UUID                  `json:"id"`
	CustomerID       uuid.UUID                  `json:"customer_id"`
	MembershipPlanID uuid.UUID                  `json:"membership_plan_id"`
	StartDate        time.Time                  `json:"start_date"`
	RenewalDate      sql.NullTime               `json:"renewal_date"`
	Status           MembershipMembershipStatus `json:"status"`
	CreatedAt        time.Time                  `json:"created_at"`
	UpdatedAt        time.Time                  `json:"updated_at"`
}

type UsersUser struct {
	ID                       uuid.UUID      `json:"id"`
	HubspotID                sql.NullString `json:"hubspot_id"`
	CountryAlpha2Code        string         `json:"country_alpha2_code"`
	Gender                   sql.NullString `json:"gender"`
	FirstName                string         `json:"first_name"`
	LastName                 string         `json:"last_name"`
	ParentID                 uuid.NullUUID  `json:"parent_id"`
	Phone                    sql.NullString `json:"phone"`
	Email                    sql.NullString `json:"email"`
	HasMarketingEmailConsent bool           `json:"has_marketing_email_consent"`
	HasSmsConsent            bool           `json:"has_sms_consent"`
	CreatedAt                time.Time      `json:"created_at"`
	UpdatedAt                time.Time      `json:"updated_at"`
	Dob                      time.Time      `json:"dob"`
}

type WaiverWaiver struct {
	ID         uuid.UUID `json:"id"`
	WaiverUrl  string    `json:"waiver_url"`
	WaiverName string    `json:"waiver_name"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

type WaiverWaiverSigning struct {
	UserID    uuid.UUID `json:"user_id"`
	WaiverID  uuid.UUID `json:"waiver_id"`
	IsSigned  bool      `json:"is_signed"`
	UpdatedAt time.Time `json:"updated_at"`
}
