// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: staff_queries.sql

package db_identity

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const approveStaff = `-- name: ApproveStaff :one
WITH approved_staff as (SELECT id, first_name, last_name, email, gender, age, phone, country_alpha2_code, role_id, created_at, updated_at
                                                FROM staff.pending_staff ps
                                                WHERE ps.id = $1),
         u AS (
                 INSERT INTO users.users (country_alpha2_code, gender, first_name, last_name, age, 
                                                                  parent_id, phone, email, has_sms_consent, has_marketing_email_consent)
                         SELECT 
                                         aps.country_alpha2_code,
                                         aps.gender,
                                         aps.first_name,
                                         aps.last_name,
                                         aps.age,
                                         NULL,
                                         aps.phone,
                                         aps.email,
                                         false,
                                         false
                                                
                         FROM approved_staff aps
                         RETURNING id
                                ),
         s AS (
                INSERT INTO staff.staff (id, role_id, is_active)
                VALUES (
                                (SELECT u.id FROM u),
                                (SELECT aps2.role_id from approved_staff aps2),
                                true
                )
                RETURNING id, is_active, created_at, updated_at, role_id
         ),
         d AS (
                DELETE FROM staff.pending_staff
                WHERE id = $1
         )
SELECT id, is_active, created_at, updated_at, role_id FROM s
`

type ApproveStaffRow struct {
	ID        uuid.UUID `json:"id"`
	IsActive  bool      `json:"is_active"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	RoleID    uuid.UUID `json:"role_id"`
}

func (q *Queries) ApproveStaff(ctx context.Context, id uuid.UUID) (ApproveStaffRow, error) {
	row := q.db.QueryRowContext(ctx, approveStaff, id)
	var i ApproveStaffRow
	err := row.Scan(
		&i.ID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoleID,
	)
	return i, err
}

const createPendingStaff = `-- name: CreatePendingStaff :one
INSERT INTO staff.pending_staff(first_name, last_name, email, gender, age, phone, country_alpha2_code, role_id)
VALUES ($1, $2, $3, $4, $5, $6, $7,
        (SELECT id FROM staff.staff_roles WHERE role_name = $8))
RETURNING id, first_name, last_name, email, gender, age, phone, country_alpha2_code, role_id, created_at, updated_at
`

type CreatePendingStaffParams struct {
	FirstName         string         `json:"first_name"`
	LastName          string         `json:"last_name"`
	Email             string         `json:"email"`
	Gender            sql.NullString `json:"gender"`
	Age               int32          `json:"age"`
	Phone             sql.NullString `json:"phone"`
	CountryAlpha2Code string         `json:"country_alpha2_code"`
	RoleName          string         `json:"role_name"`
}

func (q *Queries) CreatePendingStaff(ctx context.Context, arg CreatePendingStaffParams) (StaffPendingStaff, error) {
	row := q.db.QueryRowContext(ctx, createPendingStaff,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Gender,
		arg.Age,
		arg.Phone,
		arg.CountryAlpha2Code,
		arg.RoleName,
	)
	var i StaffPendingStaff
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Gender,
		&i.Age,
		&i.Phone,
		&i.CountryAlpha2Code,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStaffById = `-- name: GetStaffById :one
SELECT s.id, s.is_active, s.created_at, s.updated_at, s.role_id, sr.role_name, u.hubspot_id
FROM staff.staff s
         JOIN users.users u ON s.id = u.id
         JOIN staff.staff_roles sr ON s.role_id = sr.id
WHERE u.id = $1
`

type GetStaffByIdRow struct {
	ID        uuid.UUID      `json:"id"`
	IsActive  bool           `json:"is_active"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
	RoleID    uuid.UUID      `json:"role_id"`
	RoleName  string         `json:"role_name"`
	HubspotID sql.NullString `json:"hubspot_id"`
}

func (q *Queries) GetStaffById(ctx context.Context, id uuid.UUID) (GetStaffByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getStaffById, id)
	var i GetStaffByIdRow
	err := row.Scan(
		&i.ID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoleID,
		&i.RoleName,
		&i.HubspotID,
	)
	return i, err
}

const getStaffRoles = `-- name: GetStaffRoles :many
SELECT id, role_name, created_at, updated_at
FROM staff.staff_roles
`

func (q *Queries) GetStaffRoles(ctx context.Context) ([]StaffStaffRole, error) {
	rows, err := q.db.QueryContext(ctx, getStaffRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StaffStaffRole
	for rows.Next() {
		var i StaffStaffRole
		if err := rows.Scan(
			&i.ID,
			&i.RoleName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
