// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: plans.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createMembershipPlan = `-- name: CreateMembershipPlan :one
INSERT INTO membership.membership_plans (membership_id, name, stripe_joining_fee_id, stripe_price_id, amt_periods)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, stripe_price_id, stripe_joining_fee_id, membership_id, amt_periods, created_at, updated_at
`

type CreateMembershipPlanParams struct {
	MembershipID       uuid.UUID      `json:"membership_id"`
	Name               string         `json:"name"`
	StripeJoiningFeeID sql.NullString `json:"stripe_joining_fee_id"`
	StripePriceID      string         `json:"stripe_price_id"`
	AmtPeriods         sql.NullInt32  `json:"amt_periods"`
}

func (q *Queries) CreateMembershipPlan(ctx context.Context, arg CreateMembershipPlanParams) (MembershipMembershipPlan, error) {
	row := q.db.QueryRowContext(ctx, createMembershipPlan,
		arg.MembershipID,
		arg.Name,
		arg.StripeJoiningFeeID,
		arg.StripePriceID,
		arg.AmtPeriods,
	)
	var i MembershipMembershipPlan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StripePriceID,
		&i.StripeJoiningFeeID,
		&i.MembershipID,
		&i.AmtPeriods,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMembershipPlan = `-- name: DeleteMembershipPlan :execrows
DELETE FROM membership.membership_plans WHERE id = $1
`

func (q *Queries) DeleteMembershipPlan(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteMembershipPlan, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getMembershipPlanById = `-- name: GetMembershipPlanById :one
SELECT id, name, stripe_price_id, stripe_joining_fee_id, membership_id, amt_periods, created_at, updated_at
FROM membership.membership_plans
WHERE id = $1
`

func (q *Queries) GetMembershipPlanById(ctx context.Context, id uuid.UUID) (MembershipMembershipPlan, error) {
	row := q.db.QueryRowContext(ctx, getMembershipPlanById, id)
	var i MembershipMembershipPlan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StripePriceID,
		&i.StripeJoiningFeeID,
		&i.MembershipID,
		&i.AmtPeriods,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMembershipPlans = `-- name: GetMembershipPlans :many
SELECT id, name, stripe_price_id, stripe_joining_fee_id, membership_id, amt_periods, created_at, updated_at 
FROM membership.membership_plans mp
WHERE mp.membership_id = $1
`

func (q *Queries) GetMembershipPlans(ctx context.Context, membershipID uuid.UUID) ([]MembershipMembershipPlan, error) {
	rows, err := q.db.QueryContext(ctx, getMembershipPlans, membershipID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MembershipMembershipPlan
	for rows.Next() {
		var i MembershipMembershipPlan
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StripePriceID,
			&i.StripeJoiningFeeID,
			&i.MembershipID,
			&i.AmtPeriods,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMembershipPlan = `-- name: UpdateMembershipPlan :one
UPDATE membership.membership_plans
SET name              = $1,
    stripe_price_id       = $2,
    stripe_joining_fee_id = $3,
    amt_periods       = $4,
    membership_id     = $5,
    updated_at        = CURRENT_TIMESTAMP
WHERE id = $6
RETURNING id, name, stripe_price_id, stripe_joining_fee_id, membership_id, amt_periods, created_at, updated_at
`

type UpdateMembershipPlanParams struct {
	Name               string         `json:"name"`
	StripePriceID      string         `json:"stripe_price_id"`
	StripeJoiningFeeID sql.NullString `json:"stripe_joining_fee_id"`
	AmtPeriods         sql.NullInt32  `json:"amt_periods"`
	MembershipID       uuid.UUID      `json:"membership_id"`
	ID                 uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateMembershipPlan(ctx context.Context, arg UpdateMembershipPlanParams) (MembershipMembershipPlan, error) {
	row := q.db.QueryRowContext(ctx, updateMembershipPlan,
		arg.Name,
		arg.StripePriceID,
		arg.StripeJoiningFeeID,
		arg.AmtPeriods,
		arg.MembershipID,
		arg.ID,
	)
	var i MembershipMembershipPlan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StripePriceID,
		&i.StripeJoiningFeeID,
		&i.MembershipID,
		&i.AmtPeriods,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
